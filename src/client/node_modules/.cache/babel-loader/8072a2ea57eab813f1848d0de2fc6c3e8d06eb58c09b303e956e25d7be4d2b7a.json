{"ast":null,"code":"import { computed, ref } from 'vue';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport { validSelection } from '@/core/util/validation/rules';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport usei18n from '@/core/util/composable/usei18n';\nconst defaultFilters = {\n  username: '',\n  userRoleId: null,\n  empNumber: null,\n  status: null\n};\nconst defaultSortOrder = {\n  'u.userName': 'ASC',\n  'r.displayName': 'ASC',\n  'e.firstName': 'ASC',\n  'u.status': 'DEFAULT'\n};\nexport default {\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog,\n    'employee-autocomplete': EmployeeAutocomplete\n  },\n  props: {\n    unselectableIds: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup(props) {\n    const {\n      $t\n    } = usei18n();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const userdataNormalizer = data => {\n      return data.map(item => {\n        const selectable = props.unselectableIds.findIndex(id => id == item.id);\n        return {\n          id: item.id,\n          userName: item.userName,\n          role: item.userRole?.displayName === 'Admin' ? $t('general.admin') : $t('general.ess'),\n          empName: $tEmpName(item.employee, {\n            includeMiddle: false\n          }),\n          status: item.status ? $t('general.enabled') : $t('general.disabled'),\n          isSelectable: selectable === -1\n        };\n      });\n    };\n    const filters = ref({\n      ...defaultFilters\n    });\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilters = computed(() => {\n      return {\n        username: filters.value.username,\n        userRoleId: filters.value.userRoleId?.id,\n        empNumber: filters.value.empNumber?.id,\n        status: filters.value.status?.id,\n        sortField: sortField.value,\n        sortOrder: sortOrder.value\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/admin/users');\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: userdataNormalizer\n    });\n    onSort(execQuery);\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      filters,\n      sortDefinition\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'userName',\n        title: this.$t('general.username'),\n        sortField: 'u.userName',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'role',\n        title: this.$t('general.user_role'),\n        style: {\n          flex: 1\n        },\n        sortField: 'r.displayName'\n      }, {\n        name: 'empName',\n        slot: 'title',\n        title: this.$t('general.employee_name'),\n        sortField: 'e.firstName',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'status',\n        title: this.$t('general.status'),\n        sortField: 'u.status',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          delete: {\n            onClick: this.onClickDelete,\n            component: 'oxd-icon-button',\n            props: {\n              name: 'trash'\n            }\n          },\n          edit: {\n            onClick: this.onClickEdit,\n            props: {\n              name: 'pencil-fill'\n            }\n          }\n        }\n      }],\n      userRoles: [{\n        id: 1,\n        label: this.$t('general.admin')\n      }, {\n        id: 2,\n        label: this.$t('general.ess')\n      }],\n      userStatuses: [{\n        id: 1,\n        label: this.$t('general.enabled')\n      }, {\n        id: 0,\n        label: this.$t('general.disabled')\n      }],\n      checkedItems: [],\n      rules: {\n        employee: [validSelection]\n      }\n    };\n  },\n  methods: {\n    onClickAdd() {\n      navigate('/admin/saveSystemUser');\n    },\n    onClickEdit(item) {\n      navigate('/admin/saveSystemUser/{id}', {\n        id: item.id\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      const isSelectable = this.unselectableIds.findIndex(id => id == item.id);\n      if (isSelectable > -1) {\n        return this.$toast.cannotDelete();\n      }\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onClickReset() {\n      this.filters = {\n        ...defaultFilters\n      };\n      this.filterItems();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import useForm from '@ohrm/core/util/composable/useForm';\nimport { APIService } from '@/core/util/services/api.service';\nimport { navigate, reloadPage } from '@/core/util/helper/navigation';\nimport ReviewSummary from '@/orangehrmPerformancePlugin/components/ReviewSummary';\nimport FinalEvaluation from '@/orangehrmPerformancePlugin/components/FinalEvaluation';\nimport EvaluationForm from '@/orangehrmPerformancePlugin/components/EvaluationForm';\nimport useReviewEvaluation from '@/orangehrmPerformancePlugin/util/composable/useReviewEvaluation';\nimport ReviewConfirmModal from '@/orangehrmPerformancePlugin/components/ReviewConfirmModal';\nconst reviewerModel = {\n  details: {\n    empNumber: null,\n    firstName: '',\n    lastName: '',\n    middleName: '',\n    terminationId: null\n  },\n  jobTitle: '',\n  status: 1,\n  actions: new Map()\n};\nexport default {\n  components: {\n    'review-summary': ReviewSummary,\n    'final-evaluation': FinalEvaluation,\n    'evaluation-form': EvaluationForm,\n    'review-confirm-modal': ReviewConfirmModal\n  },\n  props: {\n    reviewId: {\n      type: Number,\n      required: true\n    },\n    status: {\n      type: Number,\n      required: true\n    },\n    reviewPeriodStart: {\n      type: String,\n      required: true\n    },\n    reviewPeriodEnd: {\n      type: String,\n      required: true\n    },\n    dueDate: {\n      type: String,\n      required: true\n    },\n    isReviewer: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup() {\n    const {\n      formRef,\n      invalid,\n      validate\n    } = useForm();\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    const {\n      getAllKpis,\n      getEmployeeReview,\n      getSupervisorReview,\n      getFinalReview,\n      generateRules,\n      generateModel,\n      generateReviewerData,\n      generateAllowedActions,\n      generateEvaluationFormData,\n      finalizeReview,\n      saveEmployeeReview,\n      saveSupervisorReview\n    } = useReviewEvaluation(http);\n    return {\n      http,\n      invalid,\n      formRef,\n      validate,\n      getAllKpis,\n      generateRules,\n      generateModel,\n      generateReviewerData,\n      generateAllowedActions,\n      generateEvaluationFormData,\n      getEmployeeReview,\n      getSupervisorReview,\n      getFinalReview,\n      finalizeReview,\n      saveEmployeeReview,\n      saveSupervisorReview\n    };\n  },\n  data() {\n    return {\n      kpis: [],\n      rules: [],\n      employee: {\n        ...reviewerModel\n      },\n      employeeReview: {},\n      supervisor: {\n        ...reviewerModel\n      },\n      supervisorReview: {},\n      isLoading: false,\n      finalRating: null,\n      finalComment: null,\n      completedDate: null,\n      isFinalizeRequired: false\n    };\n  },\n  computed: {\n    hasSupervisorUpdateAction() {\n      return this.employee.actions.has('supervisorUpdate');\n    },\n    hasSaveAction() {\n      return this.supervisor.actions.has('save');\n    },\n    hasCompleteAction() {\n      return this.supervisor.actions.has('complete');\n    },\n    hasCancelAction() {\n      return this.status !== 4;\n    },\n    hasActions() {\n      return this.hasSupervisorUpdateAction || this.hasSaveAction || this.hasCompleteAction || this.hasCancelAction;\n    }\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.getAllKpis(this.reviewId).then(response => {\n      const {\n        data\n      } = response.data;\n      this.kpis = [...data];\n      this.rules = this.generateRules(data);\n      this.employeeReview = this.generateModel(data);\n      this.supervisorReview = this.generateModel(data);\n      return this.getEmployeeReview(this.reviewId);\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      const {\n        meta\n      } = response.data;\n      this.employee = this.generateReviewerData(meta.reviewer);\n      this.employee.actions = this.generateAllowedActions(meta.allowedActions);\n      this.employeeReview = this.generateEvaluationFormData(data, meta.generalComment, this.employeeReview.kpis);\n      return this.getSupervisorReview(this.reviewId);\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      const {\n        meta\n      } = response.data;\n      this.supervisor = this.generateReviewerData(meta.reviewer);\n      this.supervisor.actions = this.generateAllowedActions(meta.allowedActions);\n      this.supervisorReview = this.generateEvaluationFormData(data, meta.generalComment, this.supervisorReview.kpis);\n      return this.getFinalReview(this.reviewId);\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.finalRating = data.finalRating;\n      this.finalComment = data.finalComment;\n      this.completedDate = data.completedDate;\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSubmit(complete = false) {\n      this.isFinalizeRequired = complete;\n      this.$nextTick().then(() => this.validate()).then(() => {\n        if (this.invalid === true) return;\n        if (complete) {\n          this.$refs.confirmDialog.showDialog().then(confirmation => {\n            if (confirmation === 'ok') {\n              this.submitReview(true);\n            }\n          });\n        } else {\n          this.submitReview(false);\n        }\n      });\n    },\n    submitReview(complete = false) {\n      this.isLoading = true;\n      this.saveSupervisorReview(this.reviewId, this.supervisorReview).then(() => {\n        if (this.hasSupervisorUpdateAction) {\n          return this.saveEmployeeReview(this.reviewId, true, this.employeeReview);\n        }\n      }).then(() => {\n        return this.finalizeReview(this.reviewId, {\n          complete: complete,\n          finalRating: this.finalRating,\n          finalComment: this.finalComment,\n          completedDate: this.completedDate\n        });\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).finally(() => {\n        reloadPage();\n      });\n    },\n    onClickCancel() {\n      navigate(this.isReviewer ? '/performance/searchEvaluatePerformanceReview' : '/performance/searchPerformanceReview');\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
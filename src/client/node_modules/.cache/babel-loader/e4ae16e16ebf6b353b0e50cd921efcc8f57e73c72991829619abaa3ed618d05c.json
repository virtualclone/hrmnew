{"ast":null,"code":"import useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\nexport default {\n  name: 'CompensatoryConflict',\n  props: {\n    workshiftExceeded: {\n      type: Boolean,\n      default: false\n    },\n    data: {\n      type: Object,\n      required: true\n    }\n  },\n  setup() {\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    return {\n      locale,\n      jsDateFormat\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'date',\n        title: this.$t('general.date'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'lengthHours',\n        title: this.$t('leave.no_of_hours'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'duration',\n        title: this.$t('Duration'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'status',\n        title: this.$t('general.status'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'comments',\n        title: this.$t('general.comments'),\n        style: {\n          flex: 1\n        }\n      }]\n    };\n  },\n  computed: {\n    header() {\n      return this.workshiftExceeded ? this.$t('leave.workshift_length_exceeded_due_to_the_following_leave_request') : this.$t('Compensatory off is already applied. See the status below:');\n    },\n    items() {\n      if (this.data.status == 0) {\n        this.data.status = 'Pending';\n      }\n      if (this.data.status == 1) {\n        this.data.status = 'Approved';\n      }\n      if (this.data.status == 2) {\n        this.data.status = 'Reject';\n      }\n      const apiDate = {\n        date: this.data.date.date,\n        timezone_type: this.data.date.timezone_type,\n        timezone: this.data.date.timezone\n      };\n      const parts = apiDate.date.split(\" \");\n      const datePart = parts[0];\n      const [year, month, day1] = datePart.split(\"-\");\n\n      // Create a new Date object with the parts\n\n      const parsedDate = new Date(parseInt(year), parseInt(month) - 1,\n      // Months are 0-based in JavaScript\n      parseInt(day1));\n      const formattedDate = `${year}-${month}-${day1}`;\n      // Convert to a formatted string in the Indian timezone without time\n      const formattedItem = {\n        // this.data.date.date ? new Date(this.data.date.date).toISOString().split('T')[0] : null,\n        date: formattedDate,\n        lengthHours: parseFloat(this.data.lengthHours).toFixed(2),\n        duration: this.data.duration,\n        status: this.data.status,\n        comments: this.data.comments\n      };\n      return [formattedItem];\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
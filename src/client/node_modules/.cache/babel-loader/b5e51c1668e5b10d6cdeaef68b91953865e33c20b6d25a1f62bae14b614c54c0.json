{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport { computed, inject } from 'vue';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport { navigate } from '@/core/util/helper/navigation';\nimport { viewIcon, evaluateIcon, viewLabel, evaluateLabel } from '@/orangehrmPerformancePlugin/util/composable/useReviewActions';\nimport ReviewPeriodCell from '@/orangehrmPerformancePlugin/components/ReviewPeriodCell';\nimport { tableScreenStateKey } from '@ohrm/oxd';\nconst defaultSortOrder = {\n  'performanceReview.statusId': 'ASC',\n  'performanceReview.dueDate': 'ASC',\n  'performanceReview.reviewPeriodStart': 'DEFAULT',\n  'reviewer.status': 'DEFAULT'\n};\nexport default {\n  setup() {\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilter = computed(() => {\n      return {\n        sortField: sortField.value,\n        sortOrder: sortOrder.value\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/performance/reviews');\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const trackerNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          jobTitle: item.jobTitle.name,\n          department: item.subunit.name,\n          reviewPeriod: {\n            reviewPeriodStart: formatDate(parseDate(item.reviewPeriodStart), jsDateFormat, {\n              locale\n            }),\n            reviewPeriodEnd: formatDate(parseDate(item.reviewPeriodEnd), jsDateFormat, {\n              locale\n            })\n          },\n          dueDate: formatDate(parseDate(item.dueDate), jsDateFormat, {\n            locale\n          }),\n          overallStatus: item.overallStatus.statusName,\n          selfEvaluationStatus: item.selfReviewStatus,\n          statusId: item.overallStatus.statusId\n        };\n      });\n    };\n    const {\n      currentPage,\n      total,\n      showPaginator,\n      pages,\n      pageSize,\n      response,\n      execQuery,\n      isLoading\n    } = usePaginate(http, {\n      query: serializedFilter,\n      normalizer: trackerNormalizer\n    });\n    onSort(execQuery);\n    return {\n      http,\n      total,\n      isLoading,\n      items: response,\n      execQuery,\n      sortDefinition,\n      showPaginator,\n      pages,\n      pageSize,\n      currentPage\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'jobTitle',\n        slot: 'title',\n        title: this.$t('general.job_title'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'department',\n        title: this.$t('general.sub_unit'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'reviewPeriod',\n        title: this.$t('performance.review_period'),\n        sortField: 'performanceReview.reviewPeriodStart',\n        style: {\n          flex: 2\n        },\n        cellRenderer: this.reviewPeriodCellRenderer\n      }, {\n        name: 'dueDate',\n        title: this.$t('performance.due_date'),\n        sortField: 'performanceReview.dueDate',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'selfEvaluationStatus',\n        title: this.$t('performance.self_evaluation_status'),\n        sortField: 'reviewer.status',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'overallStatus',\n        title: this.$t('performance.review_status'),\n        sortField: 'performanceReview.statusId',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'action',\n        slot: 'footer',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellRenderer: this.actionButtonCellRenderer\n      }]\n    };\n  },\n  methods: {\n    actionButtonCellRenderer(...[,,, row]) {\n      const cellConfig = {};\n      const screenState = inject(tableScreenStateKey);\n      if (screenState.screenType === 'lg' || screenState.screenType === 'xl') {\n        if (row.selfEvaluationStatus === 'Completed') {\n          cellConfig.view = viewIcon;\n          cellConfig.view.props.title = this.$t('general.view');\n          cellConfig.view.onClick = this.onClickEvaluate;\n        } else {\n          cellConfig.evaluate = evaluateIcon;\n          cellConfig.evaluate.props.title = this.$t('performance.evaluate');\n          cellConfig.evaluate.onClick = this.onClickEvaluate;\n        }\n      } else {\n        if (row.selfEvaluationStatus === 'Completed') {\n          cellConfig.view = viewLabel;\n          cellConfig.view.props.label = this.$t('general.view');\n          cellConfig.view.onClick = this.onClickEvaluate;\n        } else {\n          cellConfig.evaluate = evaluateLabel;\n          cellConfig.evaluate.props.label = this.$t('performance.evaluate');\n          cellConfig.evaluate.onClick = this.onClickEvaluate;\n        }\n      }\n      return {\n        props: {\n          header: {\n            cellConfig\n          }\n        }\n      };\n    },\n    reviewPeriodCellRenderer(...args) {\n      const cellData = args[1];\n      return {\n        component: ReviewPeriodCell,\n        props: {\n          reviewPeriodStart: cellData.reviewPeriodStart,\n          reviewPeriodEnd: cellData.reviewPeriodEnd\n        }\n      };\n    },\n    onClickView() {\n      navigate('/performance/searchKpi');\n    },\n    onClickEvaluate(item) {\n      navigate('/performance/reviewEvaluate/id/{id}', {\n        id: item.id\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
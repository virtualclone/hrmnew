{"ast":null,"code":"import { APIService } from '@ohrm/core/util/services/api.service';\nimport FileUploadInput from '@/core/components/inputs/FileUploadInput';\nimport EditEmployeeLayout from '@/orangehrmPimPlugin/components/EditEmployeeLayout';\nimport JobSpecDownload from '@/orangehrmPimPlugin/components/JobSpecDownload';\nimport ProfileActionHeader from '@/orangehrmPimPlugin/components/ProfileActionHeader';\nimport TerminateModal from '@/orangehrmPimPlugin/components/TerminateModal';\nimport { required, maxFileSize, validFileTypes, validDateFormat, endDateShouldBeAfterStartDate } from '@ohrm/core/util/validation/rules';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { OxdSwitchInput } from '@ohrm/oxd';\nimport WorkWeekDropdown from '@/orangehrmPimPlugin/components/WorkWeekDropdown';\nconst jobDetailsModel = {\n  joinedDate: '',\n  lastreviewdate: '',\n  jobTitleId: [],\n  empStatusId: [],\n  jobCategoryId: [],\n  subunitId: [],\n  locationId: [],\n  workshiftId: [],\n  workweekId: [],\n  noticeperiod: []\n};\nconst reviewDetailModel = {\n  lastreviewdate: '',\n  nextreviewdate: ''\n};\nconst contractDetailsModel = {\n  startDate: '',\n  endDate: '',\n  oldAttachment: null,\n  newAttachment: null,\n  method: 'keepCurrent'\n};\nexport default {\n  components: {\n    'edit-employee-layout': EditEmployeeLayout,\n    'oxd-switch-input': OxdSwitchInput,\n    'job-spec-download': JobSpecDownload,\n    'file-upload-input': FileUploadInput,\n    'profile-action-header': ProfileActionHeader,\n    'terminate-modal': TerminateModal,\n    'workweek-dropdown': WorkWeekDropdown\n  },\n  props: {\n    empNumber: {\n      type: String,\n      required: true\n    },\n    locations: {\n      type: Array,\n      default: () => []\n    },\n    workshifts: {\n      type: Array,\n      default: () => []\n    },\n    jobTitles: {\n      type: Array,\n      default: () => []\n    },\n    jobCategories: {\n      type: Array,\n      default: () => []\n    },\n    subunits: {\n      type: Array,\n      default: () => []\n    },\n    employmentStatuses: {\n      type: Array,\n      default: () => []\n    },\n    terminationReasons: {\n      type: Array,\n      default: () => []\n    },\n    allowedFileTypes: {\n      type: Array,\n      required: true\n    },\n    maxFileSize: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/pim/employees/${props.empNumber}/job-details`);\n    const {\n      jsDateFormat,\n      userDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    return {\n      http,\n      locale,\n      jsDateFormat,\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      showContractDetails: false,\n      job: {\n        ...jobDetailsModel\n      },\n      contract: {\n        ...contractDetailsModel\n      },\n      //review: {...reviewDetailModel}\n      termination: null,\n      showTerminateModal: false,\n      rules: {\n        joinedDate: [validDateFormat(this.userDateFormat)],\n        lastreviewdate: [validDateFormat(this.userDateFormat)],\n        startDate: [validDateFormat(this.userDateFormat)],\n        endDate: [validDateFormat(this.userDateFormat), endDateShouldBeAfterStartDate(() => this.contract.startDate)],\n        contractAttachment: [v => {\n          if (this.contract.method == 'replaceCurrent') {\n            return required(v);\n          } else {\n            return true;\n          }\n        }, validFileTypes(this.allowedFileTypes), maxFileSize(this.maxFileSize)]\n      }\n    };\n  },\n  computed: {\n    selectedJobTitleId() {\n      const jobTitleId = this.job.jobTitleId?.id;\n      return jobTitleId || 0;\n    },\n    terminationActionLabel() {\n      return this.termination?.id ? this.$t('pim.activate_employment') : this.$t('pim.terminate_employment');\n    },\n    terminationActionType() {\n      return this.termination?.id ? 'ghost-success' : 'label-danger';\n    },\n    hasUpdatePermissions() {\n      return this.$can.update(`job_details`);\n    },\n    normalizedJobTitles() {\n      return this.jobTitles.map(jobTitle => {\n        return {\n          id: jobTitle.id,\n          label: jobTitle?.deleted ? jobTitle.label + this.$t('general.deleted') : jobTitle.label\n        };\n      });\n    },\n    terminationDate() {\n      return this.termination?.date ? formatDate(parseDate(this.termination.date), this.jsDateFormat, {\n        locale: this.locale\n      }) : null;\n    }\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.getAll().then(response => {\n      this.updateJobModel(response);\n    }).then(() => {\n      return this.http.request({\n        method: 'GET',\n        url: `/api/v2/pim/employees/${this.empNumber}/employment-contract`\n      });\n    }).then(response => {\n      this.updateContractModel(response);\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.request({\n        method: 'PUT',\n        data: {\n          ...this.job,\n          jobTitleId: this.job.jobTitleId?.id,\n          jobCategoryId: this.job.jobCategoryId?.id,\n          subunitId: this.job.subunitId?.id,\n          empStatusId: this.job.empStatusId?.id,\n          locationId: this.job.locationId?.id,\n          workshiftId: this.job.workshiftId?.id,\n          workweekId: this.job.workweekId?.id\n        }\n      }).then(response => {\n        this.updateJobModel(response);\n        return this.http.request({\n          method: 'PUT',\n          url: `/api/v2/pim/employees/${this.empNumber}/employment-contract`,\n          data: {\n            startDate: this.contract.startDate,\n            endDate: this.contract.endDate,\n            currentContractAttachment: this.contract.oldAttachment ? this.contract.method : undefined,\n            contractAttachment: this.contract.newAttachment ? this.contract.newAttachment : undefined\n          }\n        });\n      }).then(response => {\n        if (response) {\n          this.updateContractModel(response);\n        }\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.isLoading = false;\n      });\n    },\n    // onSubmit(){\n    //   this.isLoading= true;\n    //   this.http.request({\n    //     method: 'put',\n    //     url: ``\n    //     data:{\n    //       lastDate:this.review.lastreviewdate,\n    //       nextDate:this.review.nextreviewdate,\n    //     }\n    //   })\n    //   .then(() => {\n    //         return this.$toast.updateSuccess();\n    //       })\n    // },\n    onClickTerminate() {\n      if (this.termination?.id) {\n        this.isLoading = true;\n        this.http.request({\n          method: 'DELETE',\n          url: `/api/v2/pim/employees/${this.empNumber}/terminations`\n        }).then(() => {\n          return this.$toast.updateSuccess();\n        }).then(() => {\n          location.reload();\n        });\n      } else {\n        this.openTerminateModal();\n      }\n    },\n    openTerminateModal() {\n      this.showTerminateModal = true;\n    },\n    closeTerminateModal(reload) {\n      this.showTerminateModal = false;\n      if (reload) {\n        location.reload();\n      }\n    },\n    updateContractModel(response) {\n      const {\n        data\n      } = response.data;\n      this.contract.startDate = data.startDate;\n      this.contract.endDate = data.endDate;\n      this.contract.oldAttachment = data.contractAttachment?.id ? data.contractAttachment : null;\n      this.contract.newAttachment = null;\n      this.contract.method = 'keepCurrent';\n      if (data.startDate || data.endDate || data.contractAttachment?.id) {\n        this.showContractDetails = true;\n      } else {\n        this.showContractDetails = false;\n      }\n    },\n    updateJobModel(response) {\n      const {\n        data\n      } = response.data;\n      this.job.joinedDate = data.joinedDate;\n      this.job.jobTitleId = this.normalizedJobTitles.find(item => item.id === data.jobTitle?.id);\n      this.job.jobCategoryId = this.jobCategories.find(item => item.id === data.jobCategory?.id);\n      this.job.subunitId = this.subunits.find(item => item.id === data.subunit?.id);\n      this.job.empStatusId = this.employmentStatuses.find(item => item.id === data.empStatus?.id);\n      this.job.locationId = this.locations.find(item => item.id === data.location?.id);\n      this.job.workshiftId = this.workshifts.find(item => item.id === data.workshift?.id);\n      this.termination = data.employeeTerminationRecord;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
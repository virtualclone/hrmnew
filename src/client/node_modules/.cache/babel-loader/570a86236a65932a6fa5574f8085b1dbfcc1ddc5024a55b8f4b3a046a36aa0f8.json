{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { required, validSelection, validDateFormat, endDateShouldBeAfterStartDate } from '@/core/util/validation/rules';\nimport { computed, ref } from 'vue';\nimport { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { truncate } from '@ohrm/core/util/helper/truncate';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useLeaveActions from '@/orangehrmLeavePlugin/util/composable/useLeaveActions';\nimport LeaveCommentsModal from '@/orangehrmLeavePlugin/components/LeaveCommentsModal';\nimport LeaveBulkActionModal from '@/orangehrmLeavePlugin/components/LeaveBulkActionModal';\nimport LeaveListTableHeader from '@/orangehrmLeavePlugin/components/LeaveListTableHeader';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\nconst defaultFilters = {\n  employee: null,\n  fromDate: null,\n  toDate: null,\n  statuses: [],\n  subunit: null,\n  includePastEmps: false,\n  leaveType: null\n};\nexport default {\n  name: 'LeaveListTable',\n  components: {\n    'leave-list-table-header': LeaveListTableHeader,\n    'leave-comment-modal': LeaveCommentsModal,\n    'leave-bulk-action-modal': LeaveBulkActionModal\n  },\n  props: {\n    myLeaveList: {\n      type: Boolean,\n      default: false\n    },\n    leaveStatuses: {\n      type: Array,\n      default: () => []\n    },\n    employee: {\n      type: Object,\n      required: false,\n      default: () => null\n    },\n    leaveType: {\n      type: Object,\n      required: false,\n      default: () => null\n    },\n    fromDate: {\n      type: String,\n      required: false,\n      default: null\n    },\n    toDate: {\n      type: String,\n      required: false,\n      default: null\n    },\n    leaveStatus: {\n      type: Object,\n      required: false,\n      default: () => null\n    }\n  },\n  setup(props) {\n    const filters = ref({\n      ...defaultFilters,\n      ...(props.leaveType && {\n        leaveType: props.leaveType\n      }),\n      ...(props.fromDate && {\n        fromDate: props.fromDate\n      }),\n      ...(props.toDate && {\n        toDate: props.toDate\n      }),\n      ...(props.leaveStatus && {\n        statuses: [props.leaveStatus]\n      }),\n      ...(props.employee && {\n        employee: {\n          id: props.employee.empNumber,\n          label: `${props.employee.firstName} ${props.employee.middleName} ${props.employee.lastName}`,\n          isPastEmployee: props.employee.terminationId\n        }\n      })\n    });\n    const checkedItems = ref([]);\n    const {\n      $t\n    } = usei18n();\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat,\n      userDateFormat\n    } = useDateFormat();\n    const rules = {\n      fromDate: [required, validDateFormat(userDateFormat)],\n      toDate: [required, validDateFormat(userDateFormat), endDateShouldBeAfterStartDate(() => filters.value.fromDate, $t('general.to_date_should_be_after_from_date'), {\n        allowSameDate: true\n      })],\n      statuses: [required],\n      employee: [validSelection]\n    };\n    const serializedFilters = computed(() => {\n      const statuses = Array.isArray(filters.value.statuses) ? filters.value.statuses : [];\n      return {\n        empNumber: filters.value.employee?.id,\n        fromDate: filters.value.fromDate,\n        toDate: filters.value.toDate,\n        subunitId: filters.value.subunit?.id,\n        includeEmployees: filters.value.includePastEmps ? 'currentAndPast' : 'onlyCurrent',\n        statuses: statuses.map(item => item.id),\n        leaveTypeId: filters.value.leaveType?.id\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/leave/${props.myLeaveList ? 'leave-requests' : 'employees/leave-requests'}`);\n    const leavelistNormalizer = data => {\n      return data.map(item => {\n        let leaveDatePeriod,\n          leaveStatuses,\n          leaveBalances = '';\n        const duration = item.dates.durationType?.type;\n        if (item.dates.fromDate) {\n          leaveDatePeriod = formatDate(parseDate(item.dates.fromDate), jsDateFormat, {\n            locale\n          });\n        }\n        if (item.dates.toDate) {\n          leaveDatePeriod += ` to ${formatDate(parseDate(item.dates.toDate), jsDateFormat, {\n            locale\n          })}`;\n        }\n        if (item.dates.startTime && item.dates.endTime) {\n          leaveDatePeriod += ` (${item.dates.startTime} - ${item.dates.endTime})`;\n        }\n        if (duration === 'half_day_morning' || duration === 'half_day_afternoon') {\n          leaveDatePeriod += ` ${$t('leave.half_day')}`;\n        }\n        if (Array.isArray(item.leaveBreakdown)) {\n          leaveStatuses = item.leaveBreakdown.map(status => `${status.name} (${parseFloat(status.lengthDays).toFixed(2)})`).join(', ');\n        }\n        if (Array.isArray(item.leaveBalances)) {\n          if (item.leaveBalances.length > 1) {\n            leaveBalances = item.leaveBalances.map(({\n              period,\n              balance\n            }) => {\n              const _balance = parseFloat(balance.balance).toFixed(2);\n              const startDate = formatDate(parseDate(period.startDate), jsDateFormat, {\n                locale\n              });\n              const endDate = formatDate(parseDate(period.endDate), jsDateFormat, {\n                locale\n              });\n              return `${_balance} (${startDate} - ${endDate})`;\n            }).join(', ');\n          } else {\n            const balance = item.leaveBalances[0]?.balance.balance;\n            leaveBalances = balance ? parseFloat(balance).toFixed(2) : '0.00';\n          }\n        }\n        const empName = `${item.employee?.firstName} ${item.employee?.middleName} ${item.employee?.lastName}`;\n        const leaveTypeName = item.leaveType?.name;\n        if (item.employee?.terminationId) {\n          empName + ` (${$t('general.past_employee')})`;\n        }\n        if (item.leaveType?.deleted) {\n          leaveTypeName + ` (${$t('general.deleted')})`;\n        }\n        return {\n          id: item.id,\n          empNumber: item.employee?.empNumber,\n          date: leaveDatePeriod,\n          employeeName: empName,\n          leaveType: leaveTypeName,\n          leaveBalance: leaveBalances,\n          days: parseFloat(item.noOfDays).toFixed(2),\n          status: leaveStatuses,\n          comment: truncate(item.lastComment?.comment),\n          actions: item.allowedActions\n        };\n      });\n    };\n    const {\n      leaveActions,\n      processLeaveRequestAction,\n      processLeaveRequestBulkAction\n    } = useLeaveActions(http);\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: leavelistNormalizer\n    });\n    const leaveBulkActions = computed(() => {\n      if (checkedItems.value.length > 0 && response.value.data) {\n        const allActions = checkedItems.value.map(item => {\n          return response.value.data[item].actions;\n        });\n        return {\n          APPROVE: allActions.reduce((approvable, actions) => approvable && actions.find(i => i.action === 'APPROVE'), true),\n          REJECT: allActions.reduce((rejectable, actions) => rejectable && actions.find(i => i.action === 'REJECT'), true),\n          CANCEL: allActions.reduce((cancelable, actions) => cancelable && actions.find(i => i.action === 'CANCEL'), true)\n        };\n      }\n      return null;\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      rules,\n      filters,\n      checkedItems,\n      leaveActions,\n      leaveBulkActions,\n      processLeaveRequestAction,\n      processLeaveRequestBulkAction\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'date',\n        title: this.$t('general.date'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'employeeName',\n        title: this.$t('general.employee_name'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'leaveType',\n        title: this.$t('leave.leave_type'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'leaveBalance',\n        title: this.$t('leave.leave_balance_days'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'days',\n        title: this.$t('leave.number_of_days'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'status',\n        title: this.$t('general.status'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'comment',\n        title: this.$t('general.comments'),\n        style: {\n          flex: '5%'\n        }\n      }, {\n        name: 'action',\n        slot: 'footer',\n        title: this.$t('general.actions'),\n        cellType: 'oxd-table-cell-actions',\n        cellRenderer: this.cellRenderer,\n        style: {\n          flex: this.myLeaveList ? '10%' : '20%'\n        }\n      }],\n      showCommentModal: false,\n      commentModalState: null,\n      bulkActionModalState: null\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    if (this.filters.statuses.length === 0) {\n      this.filters.statuses = this.myLeaveList ? this.leaveStatuses : this.leaveStatuses.filter(status => status.id === 1);\n    }\n    this.http.request({\n      method: 'GET',\n      url: '/api/v2/leave/leave-periods'\n    }).then(response => {\n      const {\n        data,\n        meta\n      } = response.data;\n      if (meta.leavePeriodDefined) {\n        this.filters.fromDate = this.filters.fromDate ?? meta?.currentLeavePeriod.startDate;\n        this.filters.toDate = this.filters.toDate ?? meta?.currentLeavePeriod.endDate;\n      } else {\n        this.filters.fromDate = this.filters.fromDate ?? data[0]?.startDate;\n        this.filters.toDate = this.filters.toDate ?? data[0]?.endDate;\n      }\n    }).finally(() => {\n      this.isLoading = false;\n      Object.assign(defaultFilters, this.filters);\n    });\n  },\n  methods: {\n    cellRenderer(...[,,, row]) {\n      const cellConfig = {};\n      const {\n        approve,\n        reject,\n        cancel,\n        more\n      } = this.leaveActions;\n      const dropdownActions = [{\n        label: this.$t('general.add_comment'),\n        context: 'add_comment'\n      }, {\n        label: this.$t('leave.view_leave_details'),\n        context: 'leave_details'\n      }, {\n        label: this.$t('leave.view_pim_info'),\n        context: 'pim_details'\n      }];\n      row.actions.map(item => {\n        if (item.action === 'APPROVE') {\n          approve.props.label = this.$t('general.approve');\n          approve.props.onClick = () => this.onLeaveAction(row.id, 'APPROVE');\n          cellConfig.approve = approve;\n        }\n        if (item.action === 'REJECT') {\n          reject.props.label = this.$t('general.reject');\n          reject.props.onClick = () => this.onLeaveAction(row.id, 'REJECT');\n          cellConfig.reject = reject;\n        }\n        if (item.action === 'CANCEL') {\n          if (this.myLeaveList) {\n            cancel.props.label = this.$t('general.cancel');\n            cancel.props.onClick = () => this.onLeaveAction(row.id, 'CANCEL');\n            cellConfig.reject = cancel;\n          } else {\n            dropdownActions.push({\n              label: this.$t('leave.cancel_leave'),\n              context: 'cancel_leave'\n            });\n          }\n        }\n      });\n      more.props.options = dropdownActions;\n      more.props.onClick = $event => this.onLeaveDropdownAction($event, row);\n      cellConfig.more = more;\n      return {\n        props: {\n          header: {\n            cellConfig\n          }\n        }\n      };\n    },\n    onLeaveDropdownAction(event, item) {\n      switch (event.context) {\n        case 'add_comment':\n          this.commentModalState = item.id;\n          this.showCommentModal = true;\n          break;\n        case 'cancel_leave':\n          this.onLeaveAction(item.id, 'CANCEL');\n          break;\n        case 'pim_details':\n          navigate('/pim/viewPersonalDetails/empNumber/{id}', {\n            id: item.empNumber\n          });\n          break;\n        default:\n          navigate('/leave/viewLeaveRequest/{id}', {\n            id: item.id\n          }, this.myLeaveList && {\n            mode: 'my-leave'\n          });\n      }\n    },\n    onLeaveAction(id, actionType) {\n      this.isLoading = true;\n      this.processLeaveRequestAction(id, actionType).then(() => {\n        this.$toast.updateSuccess();\n      }).finally(this.resetDataTable);\n    },\n    async onLeaveActionBulk(actionType) {\n      this.isLoading = true;\n      this.bulkActionModalState = {\n        count: this.checkedItems.length,\n        action: actionType\n      };\n      const ids = this.checkedItems.map(index => {\n        return this.items.data[index].id;\n      });\n      const confirmation = await this.$refs.bulkActionModal.showDialog();\n      if (confirmation !== 'ok') {\n        this.isLoading = false;\n        return;\n      }\n      this.processLeaveRequestBulkAction(ids, actionType).then(response => {\n        const {\n          data\n        } = response.data;\n        if (Array.isArray(data)) this.$toast.success({\n          title: this.$t('general.success'),\n          message: this.$t('leave.leave_requests_action', {\n            action: actionType,\n            count: data.length\n          })\n        });\n      }).finally(() => {\n        this.bulkActionModalState = null;\n        this.resetDataTable();\n      });\n    },\n    onCommentModalClose() {\n      this.commentModalState = null;\n      this.showCommentModal = false;\n      this.resetDataTable();\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onReset() {\n      this.filters = {\n        ...defaultFilters\n      };\n      this.resetDataTable();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { required, digitsOnly, validPortRange, validHostnameFormat, shouldNotExceedCharLength, numberShouldBeBetweenMinAndMaxValue } from '@/core/util/validation/rules';\nimport useForm from '@/core/util/composable/useForm';\nimport { reloadPage } from '@/core/util/helper/navigation';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport LdapSyncConnection from '@/orangehrmAdminPlugin/components/LdapSyncConnection';\nimport LdapTestConnectionModal from '@/orangehrmAdminPlugin/components/LdapTestConnectionModal';\nimport { OxdAlert, OxdIcon, OxdSwitchInput } from '@ohrm/oxd';\nconst configurationModel = {\n  enable: false,\n  hostname: 'localhost',\n  port: 389,\n  encryption: null,\n  ldapImplementation: null,\n  bindAnonymously: true,\n  bindUserDN: null,\n  bindUserPassword: null,\n  baseDistinguishedName: null,\n  searchScope: null,\n  userNameAttribute: 'cn',\n  userSearchFilter: 'objectClass=person',\n  userUniqueIdAttribute: null,\n  mergeLDAPUsersWithExistingSystemUsers: false,\n  syncInterval: 1,\n  employeeSelectorMapping: '',\n  hasBindUserPassword: false\n};\nconst dataMappingModel = {\n  firstName: 'givenName',\n  lastName: 'sn',\n  middleName: null,\n  userStatus: null,\n  workEmail: null,\n  employeeId: null\n};\nexport default {\n  components: {\n    'oxd-icon': OxdIcon,\n    'oxd-alert': OxdAlert,\n    'oxd-switch-input': OxdSwitchInput,\n    'ldap-sync-connection': LdapSyncConnection,\n    'ldap-test-connection-modal': LdapTestConnectionModal\n  },\n  props: {\n    showSync: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/admin/ldap-config');\n    const {\n      formRef,\n      invalid,\n      validate\n    } = useForm();\n    return {\n      http,\n      formRef,\n      invalid,\n      validate\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      configuration: {\n        ...configurationModel,\n        dataMapping: {\n          ...dataMappingModel\n        }\n      },\n      encryptionOptions: [{\n        id: 'tls',\n        label: this.$t('admin.tls')\n      }, {\n        id: 'ssl',\n        label: this.$t('admin.ssl')\n      }],\n      searchScopeOptions: [{\n        id: 'sub',\n        label: this.$t('admin.subtree')\n      }, {\n        id: 'one',\n        label: this.$t('admin.one_level')\n      }],\n      ldapImplementationOptions: [{\n        id: 'OpenLDAP',\n        label: this.$t('admin.open_ldap_v3')\n      }, {\n        id: 'ActiveDirectory',\n        label: this.$t('admin.ms_active_directory')\n      }],\n      rules: {\n        hostname: [required, validHostnameFormat, shouldNotExceedCharLength(255)],\n        port: [required, validPortRange(5, 0, 65535)],\n        bindUserDN: [required, shouldNotExceedCharLength(255)],\n        bindUserPassword: [v => this.configuration.hasBindUserPassword || required(v), shouldNotExceedCharLength(255)],\n        baseDistinguishedName: [required, shouldNotExceedCharLength(255)],\n        userNameAttribute: [required, shouldNotExceedCharLength(100)],\n        userSearchFilter: [required, shouldNotExceedCharLength(100)],\n        userUniqueIdAttribute: [shouldNotExceedCharLength(100)],\n        firstNameAttribute: [required, shouldNotExceedCharLength(100)],\n        lastNameAttribute: [required, shouldNotExceedCharLength(100)],\n        syncInterval: [required, digitsOnly, numberShouldBeBetweenMinAndMaxValue(1, 23)],\n        middleNameAttribute: [shouldNotExceedCharLength(100)],\n        userStatusAttribute: [shouldNotExceedCharLength(100)],\n        workEmailAttribute: [v => this.configuration.employeeSelectorMapping === 'workEmail' ? required(v) : true, shouldNotExceedCharLength(100)],\n        employeeIdAttribute: [v => this.configuration.employeeSelectorMapping === 'employeeId' ? required(v) : true, shouldNotExceedCharLength(100)]\n      },\n      testModalState: null\n    };\n  },\n  computed: {\n    passwordPlaceHolder() {\n      return this.configuration.hasBindUserPassword ? '********' : null;\n    },\n    workEmailLabelClasses() {\n      return {\n        'oxd-input-field-required': this.configuration.employeeSelectorMapping === 'workEmail'\n      };\n    },\n    employeeIdLabelClasses() {\n      return {\n        'oxd-input-field-required': this.configuration.employeeSelectorMapping === 'employeeId'\n      };\n    }\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.getAll().then(response => {\n      const {\n        data\n      } = response.data;\n      const {\n        userLookupSettings\n      } = data;\n      const userLookupSetting = userLookupSettings[0];\n      this.configuration.enable = data.enable;\n      this.configuration.hostname = data.hostname;\n      this.configuration.port = data.port;\n      this.configuration.encryption = this.encryptionOptions.find(option => option.id === data.encryption);\n      this.configuration.ldapImplementation = this.ldapImplementationOptions.find(option => option.id === data.ldapImplementation) || this.ldapImplementationOptions[0];\n      this.configuration.bindAnonymously = data.bindAnonymously;\n      this.configuration.bindUserDN = data.bindUserDN;\n      this.configuration.hasBindUserPassword = data.hasBindUserPassword;\n      if (userLookupSetting) {\n        this.configuration.baseDistinguishedName = userLookupSetting?.baseDN;\n        this.configuration.userNameAttribute = userLookupSetting?.userNameAttribute;\n        this.configuration.userSearchFilter = userLookupSetting?.userSearchFilter;\n        this.configuration.userUniqueIdAttribute = userLookupSetting?.userUniqueIdAttribute;\n        if (Array.isArray(userLookupSetting?.employeeSelectorMapping)) {\n          if (userLookupSetting.employeeSelectorMapping.length === 0) {\n            this.configuration.employeeSelectorMapping = '';\n          } else {\n            this.configuration.employeeSelectorMapping = userLookupSetting.employeeSelectorMapping[0]['field'];\n          }\n        }\n      }\n      this.configuration.searchScope = this.searchScopeOptions.find(option => option.id === userLookupSetting?.searchScope) || this.searchScopeOptions[0];\n      this.configuration.dataMapping = data.dataMapping;\n      this.configuration.mergeLDAPUsersWithExistingSystemUsers = data.mergeLDAPUsersWithExistingSystemUsers;\n      this.configuration.syncInterval = data.syncInterval;\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onClickTest() {\n      this.validate().then(() => {\n        if (this.invalid === true) return;\n        this.isLoading = true;\n        const data = this.getRequestBody();\n        delete data.enable;\n        delete data.syncInterval;\n        this.http.request({\n          method: 'POST',\n          url: '/api/v2/admin/ldap-test-connection',\n          data\n        }).then(response => {\n          const {\n            data\n          } = response.data;\n          this.testModalState = data;\n        }).finally(() => this.isLoading = false);\n      });\n    },\n    getRequestBody() {\n      let employeeSelectorMapping;\n      if (this.configuration.employeeSelectorMapping) {\n        employeeSelectorMapping = [{\n          field: this.configuration.employeeSelectorMapping,\n          attributeName: this.configuration.dataMapping[this.configuration.employeeSelectorMapping]\n        }];\n      }\n      return {\n        enable: this.configuration.enable,\n        hostname: this.configuration.hostname,\n        port: parseInt(this.configuration.port),\n        encryption: this.configuration.encryption?.id || 'none',\n        ldapImplementation: this.configuration.ldapImplementation?.id,\n        bindAnonymously: this.configuration.bindAnonymously,\n        bindUserDN: this.configuration.bindUserDN,\n        bindUserPassword: this.configuration.bindUserPassword,\n        userLookupSettings: [{\n          baseDN: this.configuration.baseDistinguishedName,\n          searchScope: this.configuration.searchScope?.id,\n          userNameAttribute: this.configuration.userNameAttribute,\n          userSearchFilter: this.configuration.userSearchFilter,\n          userUniqueIdAttribute: this.configuration.userUniqueIdAttribute,\n          employeeSelectorMapping: employeeSelectorMapping || []\n        }],\n        dataMapping: this.configuration.dataMapping,\n        mergeLDAPUsersWithExistingSystemUsers: this.configuration.mergeLDAPUsersWithExistingSystemUsers,\n        syncInterval: parseInt(this.configuration.syncInterval)\n      };\n    },\n    onClickSave() {\n      this.validate().then(() => {\n        if (this.invalid === true) return;\n        this.isLoading = true;\n        this.http.request({\n          method: 'PUT',\n          data: this.getRequestBody()\n        }).then(() => {\n          return this.$toast.updateSuccess();\n        }).finally(() => reloadPage());\n      });\n    },\n    onCloseTestModal() {\n      this.testModalState = null;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
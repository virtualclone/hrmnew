{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport { required, validEmailFormat, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { OxdSwitchInput } from '@ohrm/oxd';\nexport default {\n  components: {\n    'oxd-switch-input': OxdSwitchInput\n  },\n  props: {\n    pathToSendmail: {\n      type: String,\n      required: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/admin/email-configuration');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      passwordPlaceHolder: '',\n      defaultValues: {\n        smtpSecurityType: 'tls'\n      },\n      useTLSSecureConnection: true,\n      sendTestMailEditable: false,\n      isLoading: false,\n      emailConfiguration: {\n        mailType: '',\n        sentAs: '',\n        pathToSendmail: this.pathToSendmail,\n        smtpHost: '',\n        smtpPort: null,\n        smtpUsername: '',\n        smtpPassword: null,\n        smtpAuthType: '',\n        smtpSecurityType: '',\n        testEmailAddress: ''\n      },\n      initialEmailConfiguration: {\n        ...this.emailConfiguration,\n        useTLSSecureConnection: false\n      },\n      rules: {\n        mailType: [required, shouldNotExceedCharLength(50)],\n        sentAs: [required, shouldNotExceedCharLength(100), validEmailFormat],\n        smtpHost: [required, shouldNotExceedCharLength(100)],\n        smtpPort: [shouldNotExceedCharLength(10)],\n        smtpUsername: [required, shouldNotExceedCharLength(100)],\n        smtpPassword: [shouldNotExceedCharLength(100)],\n        smtpAuthType: [shouldNotExceedCharLength(50)],\n        smtpSecurityType: [shouldNotExceedCharLength(50)],\n        testEmailAddress: [required, shouldNotExceedCharLength(250), validEmailFormat]\n      }\n    };\n  },\n  created() {\n    this.isLoading = true;\n    this.http.request({\n      method: 'GET',\n      url: '/api/v2/admin/email-configuration'\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.emailConfiguration.mailType = data.mailType;\n      this.emailConfiguration.sentAs = data.sentAs;\n      this.emailConfiguration.smtpHost = data.smtpHost;\n      this.emailConfiguration.smtpPort = data.smtpPort;\n      this.emailConfiguration.smtpUsername = data.smtpUsername;\n      this.passwordPlaceHolder = data.smtpUsername ? '******' : '';\n      this.emailConfiguration.smtpAuthType = data.smtpAuthType;\n      this.emailConfiguration.testEmailAddress = data.testEmailAddress;\n      this.useTLSSecureConnection = data.smtpSecurityType === 'tls';\n      this.initialEmailConfiguration = {\n        ...this.emailConfiguration,\n        useTLSSecureConnection: this.useTLSSecureConnection\n      };\n      if (!data.smtpUsername) {\n        this.rules.smtpPassword.push(required);\n      }\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.request({\n        method: 'PUT',\n        data: {\n          mailType: this.emailConfiguration.mailType,\n          sentAs: this.emailConfiguration.sentAs,\n          smtpHost: this.emailConfiguration.smtpHost,\n          smtpPort: parseInt(this.emailConfiguration.smtpPort),\n          smtpUsername: this.emailConfiguration.smtpAuthType === 'login' ? this.emailConfiguration.smtpUsername : '',\n          smtpPassword: this.emailConfiguration.smtpPassword === '' ? null : this.emailConfiguration.smtpPassword,\n          smtpAuthType: this.emailConfiguration.smtpAuthType,\n          smtpSecurityType: this.useTLSSecureConnection ? 'tls' : 'none',\n          testEmailAddress: this.emailConfiguration.testEmailAddress\n        }\n      }).then(response => {\n        const testEmailStatus = response.data.meta?.testEmailStatus;\n        if (testEmailStatus === 1 && this.sendTestMailEditable) {\n          this.$toast.success({\n            title: this.$t('general.success'),\n            message: this.$t('admin.test_email_sent')\n          });\n        } else if (testEmailStatus === 0 && this.sendTestMailEditable) {\n          this.$toast.warn({\n            title: this.$t('general.failed'),\n            message: this.$t('admin.test_email_not_sent')\n          });\n        }\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.isLoading = false;\n      });\n    },\n    onReset() {\n      this.emailConfiguration = {\n        ...this.initialEmailConfiguration\n      };\n      this.useTLSSecureConnection = this.initialEmailConfiguration.useTLSSecureConnection;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import useToast from '@/core/util/composable/useToast';\nimport { onBeforeMount, reactive, ref, toRefs } from 'vue';\nimport { APIService } from '@/core/util/services/api.service';\nimport useAutoFocus from '@/core/util/composable/useAutoFocus';\nimport PostComment from '@/orangehrmBuzzPlugin/components/PostComment';\nimport ProfileImage from '@/orangehrmBuzzPlugin/components/ProfileImage';\nimport useBuzzAPIs from '@/orangehrmBuzzPlugin/util/composable/useBuzzAPIs';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nexport default {\n  name: 'PostCommentContainer',\n  components: {\n    'post-comment': PostComment,\n    'profile-image': ProfileImage,\n    'delete-confirmation': DeleteConfirmationDialog\n  },\n  directives: {\n    ...useAutoFocus()\n  },\n  props: {\n    postId: {\n      type: Number,\n      required: true\n    },\n    employee: {\n      type: Object,\n      required: true\n    }\n  },\n  emits: ['create', 'delete'],\n  setup(props, context) {\n    const deleteDialog = ref();\n    const state = reactive({\n      text: null,\n      total: 0,\n      comments: [],\n      showAllComments: false\n    });\n    const {\n      saveSuccess,\n      updateSuccess,\n      deleteSuccess\n    } = useToast();\n    const {\n      fetchPostComments,\n      savePostComment,\n      deletePostComment\n    } = useBuzzAPIs(new APIService(window.appGlobal.baseUrl, ''));\n    const loadComments = () => {\n      fetchPostComments(props.postId, state.showAllComments ? 0 : 4, true).then(response => {\n        const {\n          data,\n          meta\n        } = response.data;\n        state.total = meta.total;\n        state.comments = [...data];\n      });\n    };\n    const onSubmit = () => {\n      if (!state.text) return;\n      savePostComment(props.postId, state.text).then(() => {\n        state.text = null;\n        loadComments();\n        saveSuccess();\n        context.emit('create');\n      });\n    };\n    const onClickShowMore = () => {\n      state.showAllComments = !state.showAllComments;\n      loadComments();\n    };\n    const onEditComment = () => {\n      loadComments();\n      updateSuccess();\n    };\n    const onDeleteComment = commentId => {\n      deleteDialog.value.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          deletePostComment(props.postId, commentId).then(() => {\n            loadComments();\n            deleteSuccess();\n            context.emit('delete');\n          });\n        }\n      });\n    };\n    const onLikeComment = () => {\n      loadComments();\n    };\n    onBeforeMount(() => loadComments());\n    return {\n      onSubmit,\n      deleteDialog,\n      onLikeComment,\n      onEditComment,\n      onClickShowMore,\n      onDeleteComment,\n      ...toRefs(state)\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
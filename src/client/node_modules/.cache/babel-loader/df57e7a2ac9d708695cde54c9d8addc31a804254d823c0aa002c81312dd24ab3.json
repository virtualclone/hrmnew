{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport { required, shouldNotExceedCharLength, validPhoneNumberFormat } from '@ohrm/core/util/validation/rules';\nconst initialLocation = {\n  name: '',\n  countryCode: null,\n  province: '',\n  city: '',\n  address: '',\n  zipCode: '',\n  phone: '',\n  fax: '',\n  note: ''\n};\nexport default {\n  props: {\n    locationId: {\n      type: String,\n      required: true\n    },\n    countries: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/admin/locations');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      location: {\n        ...initialLocation\n      },\n      rules: {\n        name: [required, shouldNotExceedCharLength(100)],\n        countryCode: [required],\n        province: [shouldNotExceedCharLength(50)],\n        city: [shouldNotExceedCharLength(50)],\n        address: [shouldNotExceedCharLength(250)],\n        zipCode: [shouldNotExceedCharLength(30)],\n        phone: [shouldNotExceedCharLength(30), validPhoneNumberFormat],\n        fax: [shouldNotExceedCharLength(30), validPhoneNumberFormat],\n        note: [shouldNotExceedCharLength(250)]\n      }\n    };\n  },\n  computed: {\n    hasUpdatePermissions() {\n      return this.$can.update(`locations`);\n    }\n  },\n  created() {\n    this.isLoading = true;\n    this.http.get(parseInt(this.locationId, 10)).then(response => {\n      const {\n        data\n      } = response.data;\n      this.location.name = data.name;\n      this.location.countryCode = this.countries.find(item => item.id === data.country.countryCode);\n      this.location.province = data.province;\n      this.location.city = data.city;\n      this.location.address = data.address;\n      this.location.zipCode = data.zipCode;\n      this.location.phone = data.phone;\n      this.location.fax = data.fax;\n      this.location.note = data.note;\n\n      // Fetch list data for unique test\n      return this.http.getAll({\n        limit: 0\n      });\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.rules.name.push(v => {\n        const index = data.findIndex(item => String(item.name).toLowerCase() == String(v).toLowerCase());\n        if (index > -1) {\n          const {\n            id\n          } = data[index];\n          return parseInt(id, 10) !== parseInt(this.locationId, 10) ? this.$t('general.already_exists') : true;\n        } else {\n          return true;\n        }\n      });\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      navigate('/admin/viewLocations');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.locationId, {\n        name: this.location.name,\n        countryCode: this.location.countryCode.id,\n        province: this.location.province,\n        city: this.location.city,\n        address: this.location.address,\n        zipCode: this.location.zipCode,\n        phone: this.location.phone,\n        fax: this.location.fax,\n        note: this.location.note\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog.vue';\nimport { computed } from 'vue';\nimport AddExpenseModal from './AddExpenseModal.vue';\nimport EditExpenseModal from './EditExpenseModal.vue';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { formatDate, parseDate } from '@ohrm/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nexport default {\n  name: 'ClaimExpenses',\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog,\n    'add-expense-modal': AddExpenseModal,\n    'edit-expense-modal': EditExpenseModal\n  },\n  props: {\n    requestId: {\n      type: Number,\n      required: true\n    },\n    currency: {\n      type: Object,\n      required: true\n    },\n    canEdit: {\n      type: Boolean,\n      required: true\n    }\n  },\n  setup(props) {\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/claim/requests/${props.requestId}/expenses`);\n    const expenseDataNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          date: item.date ? formatDate(parseDate(item.date), jsDateFormat, {\n            locale\n          }) : '',\n          amount: item.amount ? item.amount.toFixed(2) : '0.00',\n          note: item.note ? item.note : '',\n          expenseType: item.expenseType ? item.expenseType.name : ''\n        };\n      });\n    };\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      normalizer: expenseDataNormalizer,\n      toastNoRecords: false\n    });\n    const totalAmount = computed(() => {\n      const meta = response.value?.meta;\n      return meta ? meta.totalAmount.toFixed(2) : 0.0.toFixed(2);\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      totalAmount\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'expenseType',\n        slot: 'title',\n        title: this.$t('claim.expense_type'),\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'date',\n        title: this.$t('general.date'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'note',\n        title: this.$t('general.note'),\n        cellType: 'oxd-table-cell-truncate',\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'amount',\n        style: {\n          flex: 1\n        },\n        title: this.$t('claim.amount')\n      }],\n      checkedItems: [],\n      showAddExpenseModal: false,\n      showEditExpenseModal: false,\n      editModalState: null\n    };\n  },\n  computed: {\n    tableHeaders() {\n      let computedHeaders = this.headers;\n      const headerActions = {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {}\n      };\n      if (this.canEdit) {\n        headerActions.cellConfig.edit = {\n          onClick: this.onClickEdit,\n          props: {\n            name: 'pencil-fill'\n          }\n        };\n        headerActions.cellConfig.delete = {\n          onClick: this.onClickDelete,\n          component: 'oxd-icon-button',\n          props: {\n            name: 'trash'\n          }\n        };\n      }\n      computedHeaders[3] = {\n        name: 'amount',\n        title: `${this.$t('claim.amount')} (${this.currency.name})`,\n        style: {\n          flex: 1\n        }\n      };\n      if (Object.keys(headerActions.cellConfig).length > 0) {\n        computedHeaders.push(headerActions);\n      }\n      return computedHeaders;\n    },\n    formatedAmount() {\n      const amount = Number(this.totalAmount);\n      return amount.toLocaleString('en-US', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      });\n    }\n  },\n  methods: {\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    onClickAdd() {\n      this.showAddExpenseModal = true;\n    },\n    onClickDeleteSelected() {\n      const ids = [];\n      this.checkedItems.forEach(index => {\n        ids.push(this.items?.data[index].id);\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    onCloseAddExpenseModal() {\n      this.showAddExpenseModal = false;\n      this.resetDataTable();\n    },\n    onCloseEditExpenseModal() {\n      this.showEditExpenseModal = false;\n      this.resetDataTable();\n    },\n    onClickEdit(item) {\n      this.showEditExpenseModal = true;\n      this.editModalState = item;\n      this.showAddExpenseModal = false;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport { required, shouldNotExceedCharLength, validFileTypes, maxFileSize } from '@ohrm/core/util/validation/rules';\nimport FileUploadInput from '@/core/components/inputs/FileUploadInput';\nconst initialJobTitle = {\n  title: '',\n  description: '',\n  oldSpecification: '',\n  newSpecification: null,\n  method: 'keepCurrent',\n  note: ''\n};\nexport default {\n  components: {\n    'file-upload-input': FileUploadInput\n  },\n  props: {\n    jobTitleId: {\n      type: String,\n      required: true\n    },\n    allowedFileTypes: {\n      type: Array,\n      required: true\n    },\n    maxFileSize: {\n      type: Number,\n      required: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/admin/job-titles');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      jobTitle: {\n        ...initialJobTitle\n      },\n      rules: {\n        title: [required, shouldNotExceedCharLength(100)],\n        description: [shouldNotExceedCharLength(400)],\n        specification: [v => {\n          if (this.jobTitle.method == 'replaceCurrent') {\n            return required(v);\n          } else {\n            return true;\n          }\n        }, validFileTypes(this.allowedFileTypes), maxFileSize(this.maxFileSize)],\n        note: [shouldNotExceedCharLength(400)]\n      }\n    };\n  },\n  created() {\n    this.isLoading = true;\n    this.http.get(this.jobTitleId).then(response => {\n      const {\n        data\n      } = response.data;\n      this.jobTitle.title = data.title;\n      this.jobTitle.description = data.description;\n      this.jobTitle.note = data.note;\n      this.jobTitle.oldSpecification = data.jobSpecification?.id ? data.jobSpecification : null;\n      this.jobTitle.newSpecification = null;\n      this.jobTitle.method = 'keepCurrent';\n\n      // Fetch list data for unique test\n      return this.http.getAll({\n        limit: 0\n      });\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.rules.title.push(v => {\n        const index = data.findIndex(item => String(item.title).toLowerCase() == String(v).toLowerCase());\n        if (index > -1) {\n          const {\n            id\n          } = data[index];\n          return id != this.jobTitleId ? this.$t('general.already_exists') : true;\n        } else {\n          return true;\n        }\n      });\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      navigate('/admin/viewJobTitleList');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.jobTitleId, {\n        title: this.jobTitle.title,\n        description: this.jobTitle.description,\n        note: this.jobTitle.note,\n        currentJobSpecification: this.jobTitle.oldSpecification ? this.jobTitle.method : undefined,\n        specification: this.jobTitle.newSpecification ? this.jobTitle.newSpecification : undefined\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
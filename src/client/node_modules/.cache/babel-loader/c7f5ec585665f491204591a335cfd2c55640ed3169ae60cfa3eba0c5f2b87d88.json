{"ast":null,"code":"import { computed, ref } from 'vue';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport JobtitleDropdown from '@/orangehrmPimPlugin/components/JobtitleDropdown';\nimport SubunitDropdown from '@/orangehrmPimPlugin/components/SubunitDropdown';\nimport WorkshiftDropdown from '@/orangehrmPimPlugin/components/WorkshiftDropdown';\nimport LocationDropdown from '@/orangehrmPimPlugin/components/LocationDropdown';\nimport EmploymentStatusDropdown from '@/orangehrmPimPlugin/components/EmploymentStatusDropdown';\nimport IncludeEmployeeDropdown from '@/core/components/dropdown/IncludeEmployeeDropdown';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport { validSelection } from '@/core/util/validation/rules';\nimport usei18n from '@/core/util/composable/usei18n';\nconst defaultSortOrder = {\n  'employee.employeeId': 'DEFAULT',\n  'employee.joinedDate': 'DEFAULT',\n  'employee.firstName': 'ASC',\n  'employee.lastName': 'DEFAULT',\n  'jobTitle.jobTitleName': 'DEFAULT',\n  // 'empStatus.name': 'DEFAULT',\n  'subunit.name': 'DEFAULT',\n  'supervisor.firstName': 'DEFAULT',\n  'workshift.name': 'DEFAULT',\n  'location.name': 'DEFAULT'\n};\nexport default {\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog,\n    'employee-autocomplete': EmployeeAutocomplete,\n    'jobtitle-dropdown': JobtitleDropdown,\n    'subunit-dropdown': SubunitDropdown,\n    'employment-status-dropdown': EmploymentStatusDropdown,\n    'include-employee-dropdown': IncludeEmployeeDropdown,\n    'workshift-dropdown': WorkshiftDropdown,\n    'location-dropdown': LocationDropdown\n  },\n  props: {\n    unselectableEmpNumbers: {\n      type: Array,\n      default: () => []\n    },\n    gender: []\n  },\n  setup(props) {\n    const {\n      $t\n    } = usei18n();\n    const dataNormalizer = data => {\n      return data.map(item => {\n        const selectable = props.unselectableEmpNumbers.findIndex(empNumber => empNumber == item.empNumber);\n        props.gender = 0;\n        return {\n          id: item.empNumber,\n          employeeId: item.employeeId,\n          gender: item.gender,\n          joinedDate: item.joinedDate ? new Date(item.joinedDate.date).toISOString().split('T')[0] : null,\n          firstAndMiddleName: `${item.firstName} ${item.middleName}`,\n          lastName: item.lastName + (item.terminationId ? ` ${$t('general.past_employee')}` : ''),\n          jobTitle: item.jobTitle?.isDeleted ? item.jobTitle.title + $t('general.deleted') : item.jobTitle?.title,\n          empStatus: item.empStatus?.name,\n          subunit: item.subunit?.name,\n          supervisor: item.supervisors ? item.supervisors.map(supervisor => `${supervisor.firstName} ${supervisor.lastName}`).join(',') : '',\n          isSelectable: selectable === -1,\n          location: item.locations ? item.locations.map(location => `${location.name}`).join(',') : '',\n          isSelectable: selectable === -1,\n          workshift: item.workshifts ? item.workshifts.map(workshifts => {\n            const startDate = new Date(workshifts.startTime.date);\n            const endDate = new Date(workshifts.endTime.date);\n            const formattedStartTime = `${startDate.getHours()}:${startDate.getMinutes().toString().padStart(2, '0')}`;\n            const formattedEndTime = `${endDate.getHours()}:${endDate.getMinutes().toString().padStart(2, '0')}`;\n            return `${workshifts.name} (${formattedStartTime} - ${formattedEndTime})`;\n          }).join(',') : '',\n          isSelectable: selectable === -1\n        };\n      });\n    };\n    const filters = ref({\n      employee: null,\n      employeeId: '',\n      // empStatusId: null,\n      supervisor: null,\n      jobTitleId: null,\n      subunitId: null,\n      workshiftId: null,\n      locationId: null,\n      includeEmployees: {\n        id: 1,\n        param: 'onlyCurrent',\n        label: $t('general.current_employees_only')\n      }\n    });\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilters = computed(() => {\n      return {\n        model: 'detailed',\n        nameOrId: typeof filters.value.employee === 'string' ? filters.value.employee : undefined,\n        empNumber: filters.value.employee?.id,\n        employeeId: filters.value.employeeId,\n        // empStatusId: filters.value.empStatusId?.id,\n        includeEmployees: filters.value.includeEmployees?.param,\n        supervisorEmpNumbers: filters.value.supervisor ? [filters.value.supervisor.id] : undefined,\n        jobTitleId: filters.value.jobTitleId?.id,\n        subunitId: filters.value.subunitId?.id,\n        workshiftId: filters.value.workshiftId?.id,\n        locationId: filters.value.locationId?.id,\n        sortField: sortField.value,\n        sortOrder: sortOrder.value\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/pim/employees');\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: dataNormalizer\n    });\n    onSort(execQuery);\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      filters,\n      sortDefinition\n    };\n  },\n  data() {\n    return {\n      checkedItems: [],\n      rules: {\n        employee: [],\n        supervisor: [validSelection]\n      }\n    };\n  },\n  computed: {\n    headers() {\n      return [{\n        name: 'employeeId',\n        slot: 'title',\n        title: this.$t('general.id'),\n        sortField: 'employee.employeeId',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'firstAndMiddleName',\n        title: this.$t('pim.first_middle_name'),\n        sortField: 'employee.firstName',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'lastName',\n        title: this.$t('general.last_name'),\n        sortField: 'employee.lastName',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'jobTitle',\n        title: this.$t('general.job_title'),\n        sortField: 'jobTitle.jobTitleName',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'joinedDate',\n        title: this.$t('general.joined_date'),\n        sortField: 'employee.employeeId',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'location',\n        title: this.$t('general.location'),\n        sortField: 'location.name',\n        style: {\n          flex: 1\n        }\n      },\n      // {\n      //   name: 'empStatus',\n      //   title: this.$t('general.employment_status'),\n      //   sortField: 'empStatus.name',\n      //   style: {flex: 1},\n      // },\n      {\n        name: 'subunit',\n        title: this.$t('general.sub_unit'),\n        sortField: 'subunit.name',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'supervisor',\n        title: this.$t('pim.supervisor'),\n        sortField: 'supervisor.firstName',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'workshift',\n        title: this.$t('general.work_shift'),\n        sortField: 'workshift.name',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          ...(this.$can.delete('employee_list') && {\n            delete: {\n              onClick: this.onClickDelete,\n              component: 'oxd-icon-button',\n              props: {\n                name: 'trash'\n              }\n            }\n          }),\n          edit: {\n            onClick: this.onClickEdit,\n            props: {\n              name: 'pencil-fill'\n            }\n          }\n        }\n      }];\n    }\n  },\n  methods: {\n    onClickAdd() {\n      navigate('/pim/addEmployee');\n    },\n    onClickEdit($event) {\n      const id = $event.id ? $event.id : $event.item?.id;\n      navigate('/pim/viewPersonalDetails/empNumber/{id}', {\n        id\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item, $event) {\n      $event.stopImmediatePropagation();\n      const isSelectable = this.unselectableEmpNumbers.findIndex(empNumber => empNumber == item.id);\n      if (isSelectable > -1) {\n        return this.$toast.cannotDelete();\n      }\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
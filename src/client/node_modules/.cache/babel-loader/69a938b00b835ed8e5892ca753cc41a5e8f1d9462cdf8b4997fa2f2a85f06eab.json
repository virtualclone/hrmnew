{"ast":null,"code":"import useLocale from '@/core/util/composable/useLocale';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { promiseDebounce } from '@ohrm/oxd';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport { required, max, validSelection } from '@/core/util/validation/rules';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport LeaveTypeDropdown from '@/orangehrmLeavePlugin/components/LeaveTypeDropdown';\nconst leaveEntitlementModel = {\n  employee: null,\n  leaveType: null,\n  leavePeriod: null,\n  entitlement: ''\n};\nexport default {\n  components: {\n    'leave-type-dropdown': LeaveTypeDropdown,\n    'employee-autocomplete': EmployeeAutocomplete\n  },\n  props: {\n    entitlementId: {\n      type: String,\n      required: true\n    },\n    employee: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/leave/leave-entitlements');\n    http.setIgnorePath('/api/v2/leave/leave-entitlements/[0-9]+/validation/entitlements');\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    return {\n      http,\n      jsDateFormat,\n      locale\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      leaveEntitlement: {\n        ...leaveEntitlementModel\n      },\n      rules: {\n        employee: [required, validSelection],\n        leaveType: [required],\n        leavePeriod: [required],\n        entitlement: [required, v => {\n          return /^\\d+(\\.\\d{1,2})?$/.test(v) || this.$t('leave.should_be_a_number_with_2_decimal_places');\n        }, max(10000), promiseDebounce(this.validateEntitlement, 500)]\n      },\n      leavePeriods: []\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.request({\n      method: 'GET',\n      url: '/api/v2/leave/leave-periods'\n    }).then(({\n      data\n    }) => {\n      this.leavePeriods = data.data.map(item => {\n        const startDate = formatDate(parseDate(item.startDate), this.jsDateFormat, {\n          locale: this.locale\n        });\n        const endDate = formatDate(parseDate(item.endDate), this.jsDateFormat, {\n          locale: this.locale\n        });\n        return {\n          id: `${item.startDate}_${item.endDate}`,\n          label: `${startDate} - ${endDate}`,\n          startDate: item.startDate,\n          endDate: item.endDate\n        };\n      });\n      return this.http.get(this.entitlementId);\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.leaveEntitlement.employee = {\n        id: data.employee.empNumber,\n        label: `${data.employee.firstName} ${data.employee.lastName}`,\n        isPastEmployee: data.employee.terminationId\n      };\n      this.leaveEntitlement.leaveType = {\n        id: data.leaveType.id,\n        label: data.leaveType.name\n      };\n      this.leaveEntitlement.leavePeriod = this.leavePeriods.find(item => {\n        return item.id === `${data.fromDate}_${data.toDate}`;\n      });\n      this.leaveEntitlement.entitlement = data.entitlement;\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      navigate('/leave/viewLeaveEntitlements', undefined, {\n        empNumber: this.leaveEntitlement.employee?.id,\n        leaveTypeId: this.leaveEntitlement.leaveType?.id,\n        startDate: this.leaveEntitlement.leavePeriod?.startDate,\n        endDate: this.leaveEntitlement.leavePeriod?.endDate\n      });\n    },\n    onSave() {\n      this.isLoading = true;\n      const payload = {\n        fromDate: this.leaveEntitlement.leavePeriod?.startDate,\n        toDate: this.leaveEntitlement.leavePeriod?.endDate,\n        entitlement: this.leaveEntitlement.entitlement\n      };\n      this.http.update(this.entitlementId, payload).then(() => {\n        this.$toast.updateSuccess();\n        this.onCancel();\n      });\n    },\n    validateEntitlement(value) {\n      const entitlement = parseFloat(value);\n      return new Promise(resolve => {\n        if (!isNaN(entitlement)) {\n          this.http.request({\n            method: 'GET',\n            url: `/api/v2/leave/leave-entitlements/${this.entitlementId}/validation/entitlements`,\n            params: {\n              entitlement\n            }\n          }).then(response => {\n            const {\n              data\n            } = response.data;\n            return data.valid === true ? resolve(true) : resolve(this.$t('leave.used_amount_exceeds_the_current_amount'));\n          });\n        } else {\n          resolve(true);\n        }\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
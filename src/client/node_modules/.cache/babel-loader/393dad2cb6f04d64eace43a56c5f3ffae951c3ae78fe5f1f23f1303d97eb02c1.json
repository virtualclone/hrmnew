{"ast":null,"code":"import { required, shouldNotExceedCharLength, validDateFormat } from '@/core/util/validation/rules';\nimport { diffInTime, parseDate, secondsTohhmm } from '@/core/util/helper/datefns';\nimport { navigate } from '@/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport { promiseDebounce } from '@ohrm/oxd';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport TimezoneDropdown from '@/orangehrmAttendancePlugin/components/TimezoneDropdown.vue';\nconst attendanceRecordModal = {\n  userDate: null,\n  userTime: null,\n  utcDate: null,\n  utcTime: null,\n  note: null,\n  timezone: null,\n  timezoneOffset: null\n};\nexport default {\n  components: {\n    'timezone-dropdown': TimezoneDropdown\n  },\n  props: {\n    attendanceId: {\n      type: Number,\n      required: true\n    },\n    isEmployeeEdit: {\n      type: Boolean,\n      default: false\n    },\n    isTimezoneEditable: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/attendance/records`);\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      http,\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      attendance: {\n        employee: null,\n        punchIn: {\n          ...attendanceRecordModal\n        },\n        punchOut: {\n          ...attendanceRecordModal\n        }\n      },\n      rules: {\n        punchIn: {\n          userDate: [required, validDateFormat(this.userDateFormat), promiseDebounce(() => this.validateRecord('punch-in-overlaps'), 500)],\n          userTime: [required, promiseDebounce(() => this.validateRecord('punch-in-overlaps'), 500)],\n          note: [shouldNotExceedCharLength(250)]\n        },\n        punchOut: {\n          userDate: [required, validDateFormat(this.userDateFormat), promiseDebounce(() => this.validateRecord('punch-out-overlaps'), 500)],\n          userTime: [required, promiseDebounce(() => this.validateRecord('punch-out-overlaps'), 500)],\n          note: [shouldNotExceedCharLength(250)]\n        }\n      }\n    };\n  },\n  computed: {\n    totalDuration() {\n      if (!this.attendance.punchOut?.userDate) return null;\n      if (parseDate(this.attendance.punchIn.userDate) === null || parseDate(this.attendance.punchOut.userDate) === null) {\n        return null;\n      }\n      const startTime = `${this.attendance.punchIn.userDate} ${this.attendance.punchIn.userTime}`;\n      const punchInTz = this.attendance.punchIn.timezone?._offset ?? parseFloat(this.attendance.punchIn.timezoneOffset);\n      const startTimezone = (punchInTz > 0 ? ' +' : ' -') + secondsTohhmm(Math.abs(punchInTz) * 3600);\n      const endTime = `${this.attendance.punchOut.userDate} ${this.attendance.punchOut.userTime}`;\n      const punchOutTz = this.attendance.punchOut.timezone?._offset ?? parseFloat(this.attendance.punchOut.timezoneOffset);\n      const endTimezone = (punchOutTz > 0 ? ' +' : ' -') + secondsTohhmm(Math.abs(punchOutTz) * 3600);\n\n      // yyyy-MM-dd HH:mm xxx <=> 2022-03-07 14:26 +05:30\n      return parseFloat(diffInTime(startTime + startTimezone, endTime + endTimezone, 'yyyy-MM-dd HH:mm xxx') / 3600).toFixed(2);\n    }\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.attendanceId).then(response => {\n      const {\n        data\n      } = response.data;\n      this.attendance.employee = data.employee;\n      this.attendance.punchIn = {\n        ...data.punchIn,\n        timezone: {\n          id: data.punchIn.timezone.name,\n          label: data.punchIn.timezone.label,\n          _offset: data.punchIn.timezoneOffset\n        }\n      };\n      this.attendance.punchOut = data.punchOut?.userDate ? {\n        ...data.punchOut,\n        timezone: {\n          id: data.punchOut.timezone.name,\n          label: data.punchOut.timezone.label,\n          _offset: data.punchOut.timezoneOffset\n        }\n      } : null;\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      if (this.isEmployeeEdit) {\n        navigate('/attendance/viewAttendanceRecord', undefined, {\n          employeeId: this.attendance.employee?.empNumber,\n          date: this.attendance.punchIn?.userDate\n        });\n      } else {\n        navigate('/attendance/viewMyAttendanceRecord', undefined, {\n          date: this.attendance.punchIn?.userDate\n        });\n      }\n    },\n    onSave() {\n      this.isLoading = true;\n      const payload = {\n        punchInDate: this.attendance.punchIn.userDate,\n        punchInTime: this.attendance.punchIn.userTime,\n        punchInNote: this.attendance.punchIn.note,\n        ...(this.isTimezoneEditable && {\n          punchInOffset: this.attendance.punchIn.timezone ? this.attendance.punchIn.timezone._offset : this.attendance.punchIn.timezoneOffset,\n          punchInTimezoneName: this.attendance.punchIn.timezone ? this.attendance.punchIn.timezone.id : this.attendance.punchIn.timezone.name\n        })\n      };\n      if (this.attendance.punchOut) {\n        payload.punchOutDate = this.attendance.punchOut.userDate;\n        payload.punchOutTime = this.attendance.punchOut.userTime;\n        payload.punchOutNote = this.attendance.punchOut.note;\n        if (this.isTimezoneEditable) {\n          payload.punchOutOffset = this.attendance.punchOut.timezone ? this.attendance.punchOut.timezone._offset : this.attendance.punchOut.timezoneOffset;\n          payload.punchOutTimezoneName = this.attendance.punchOut.timezone ? this.attendance.punchOut.timezone.id : this.attendance.punchOut.timezone.name;\n        }\n      }\n      this.http.update(this.attendanceId, payload).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    validateRecord(apiPath) {\n      if (parseDate(this.attendance.punchIn.userDate) === null) {\n        return true;\n      }\n      if (this.attendance.punchOut && parseDate(this.attendance.punchOut.userDate) === null) {\n        return true;\n      }\n      return new Promise(resolve => {\n        this.http.request({\n          method: 'GET',\n          url: `/api/v2/attendance/records/${apiPath}`,\n          params: {\n            recordId: this.attendanceId,\n            punchInTimezoneOffset: this.attendance.punchIn.timezone ? this.attendance.punchIn.timezone._offset : this.attendance.punchIn.timezoneOffset,\n            punchInDate: this.attendance.punchIn.userDate,\n            punchInTime: this.attendance.punchIn.userTime,\n            punchOutTimezoneOffset: this.attendance.punchOut?.timezone ? this.attendance.punchOut.timezone._offset : this.attendance.punchOut?.timezoneOffset,\n            punchOutDate: this.attendance.punchOut?.userDate,\n            punchOutTime: this.attendance.punchOut?.userTime\n          },\n          // Prevent triggering response interceptor on 400\n          validateStatus: status => {\n            return status >= 200 && status < 300 || status == 400;\n          }\n        }).then(res => {\n          const {\n            data,\n            error\n          } = res.data;\n          if (error) {\n            return resolve(error.message);\n          }\n          return data.valid === true ? resolve(true) : resolve(this.$t('attendance.overlapping_records_found'));\n        });\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
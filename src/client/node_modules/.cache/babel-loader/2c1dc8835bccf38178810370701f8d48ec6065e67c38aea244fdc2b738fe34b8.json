{"ast":null,"code":"import { validSelection } from '@/core/util/validation/rules';\nimport { parseDate, parseTimeInSeconds } from '@ohrm/core/util/helper/datefns';\nimport ActivityDropdown from '@/orangehrmTimePlugin/components/ActivityDropdown.vue';\nimport ProjectAutocomplete from '@/orangehrmTimePlugin/components/ProjectAutocomplete.vue';\nimport TimesheetCommentModal from '@/orangehrmTimePlugin/components/TimesheetCommentModal.vue';\nimport { OxdAlert, OxdSpinner } from '@ohrm/oxd';\nexport default {\n  name: 'Timesheet',\n  components: {\n    'oxd-alert': OxdAlert,\n    'oxd-loading-spinner': OxdSpinner,\n    'activity-dropdown': ActivityDropdown,\n    'project-autocomplete': ProjectAutocomplete,\n    'timesheet-comment-modal': TimesheetCommentModal\n  },\n  props: {\n    records: {\n      type: Array,\n      default: () => []\n    },\n    columns: {\n      type: Object,\n      required: false,\n      default: () => null\n    },\n    subtotal: {\n      type: String,\n      required: false,\n      default: null\n    },\n    editable: {\n      type: Boolean,\n      default: false\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    timesheetId: {\n      type: Number,\n      default: null\n    }\n  },\n  emits: ['update:records'],\n  data() {\n    return {\n      focusedField: null,\n      showCommentModal: false,\n      commentModalState: null,\n      rules: {\n        project: [validSelection, v => v !== null || this.$t('time.select_a_project')],\n        activity: [v => v !== null || this.$t('time.select_an_activity'), v => this.records.filter(record => record.activity?.id === v?.id).length < 2 || this.$t('time.duplicate_record')]\n      }\n    };\n  },\n  computed: {\n    days() {\n      return this.columns ? Object.keys(this.columns) : [];\n    },\n    dailyTotals() {\n      const totals = {};\n      for (const date in this.columns) {\n        totals[date] = this.records.reduce((acc, record) => {\n          const duration = parseTimeInSeconds(record.dates[date]?.duration);\n          return duration > 0 ? acc + duration : acc;\n        }, 0);\n      }\n      return totals;\n    },\n    daysOfWeek() {\n      const days = [this.$t('general.sun'), this.$t('general.mon'), this.$t('general.tue'), this.$t('general.wed'), this.$t('general.thu'), this.$t('general.fri'), this.$t('general.sat')];\n      return this.days.map(day => {\n        const date = parseDate(day, 'yyyy-MM-dd');\n        return {\n          id: date.valueOf(),\n          day: date.getDate(),\n          title: days[date.getDay()]\n        };\n      });\n    },\n    tableClasses() {\n      return {\n        'orangehrm-timesheet-table': true,\n        '--editable': this.editable\n      };\n    },\n    fixedColumnClasses() {\n      return {\n        'orangehrm-timesheet-table-header-cell': true,\n        '--freeze-left': !this.editable\n      };\n    },\n    fixedCellClasses() {\n      return {\n        'orangehrm-timesheet-table-body-cell': true,\n        '--freeze-left': !this.editable\n      };\n    }\n  },\n  methods: {\n    deleteRow(index) {\n      const updated = this.records.filter((_, i) => i !== index);\n      this.syncRecords(updated);\n      this.$nextTick().then(() => {\n        if (updated.length === 0) this.addRow();\n      });\n    },\n    addRow() {\n      const updated = [...this.records, {\n        project: null,\n        activity: null,\n        dates: {}\n      }];\n      this.syncRecords(updated);\n    },\n    updateTime($value, index, date) {\n      const updated = this.records.map((record, i) => {\n        if (i === index) {\n          const _date = {\n            [date]: {\n              date: date,\n              duration: $value,\n              id: record.dates[date]?.id,\n              comment: record.dates[date]?.comment\n            }\n          };\n          record.dates = {\n            ...record.dates,\n            ..._date\n          };\n        }\n        return record;\n      });\n      this.syncRecords(updated);\n    },\n    updateComment(id, comment, index, date) {\n      const updated = this.records.map((record, i) => {\n        if (i === index) {\n          const _date = {\n            [date]: {\n              id: id,\n              date: date,\n              comment: comment,\n              duration: record.dates[date]?.duration\n            }\n          };\n          record.dates = {\n            ...record.dates,\n            ..._date\n          };\n        }\n        return record;\n      });\n      this.syncRecords(updated);\n    },\n    updateProject($value, index) {\n      const updated = this.records.map((record, i) => {\n        if (i === index) {\n          record.project = $value ? $value : null;\n          record.customer = $value?._customer ? $value._customer : null;\n        }\n        return record;\n      });\n      this.updateActivity(null, index);\n      this.syncRecords(updated);\n    },\n    updateActivity($value, index) {\n      const updated = this.records.map((record, i) => {\n        if (i === index) {\n          record.activity = $value ? {\n            id: $value.id,\n            name: $value.label\n          } : null;\n        }\n        return record;\n      });\n      this.syncRecords(updated);\n    },\n    syncRecords(updated) {\n      if (!this.editable) return;\n      this.$emit('update:records', updated);\n    },\n    viewComment(record, entry, index, date) {\n      if (record.project?.id && record.activity?.id) {\n        this.commentModalState = {\n          date,\n          index,\n          id: entry?.id,\n          project: record.project,\n          activity: record.activity,\n          customer: record.customer\n        };\n        this.showCommentModal = true;\n      } else {\n        this.$toast.warn({\n          title: this.$t('general.warning'),\n          message: this.$t('time.select_a_project_and_an_activity')\n        });\n      }\n    },\n    onCommentModalClose($event) {\n      if ($event) {\n        const {\n          id,\n          comment\n        } = $event;\n        const {\n          index,\n          date\n        } = this.commentModalState;\n        this.updateComment(id, comment, index, date);\n      }\n      this.showCommentModal = false;\n      this.commentModalState = null;\n    },\n    getProject(record) {\n      const {\n        project,\n        customer\n      } = record;\n      if (project && project.label) {\n        return project;\n      }\n      if (project && customer) {\n        return {\n          id: project.id,\n          label: `${customer.name} - ${project.name}`\n        };\n      }\n      return null;\n    },\n    getActivity(activity) {\n      return activity ? {\n        id: activity.id,\n        label: activity.name\n      } : null;\n    },\n    getDuration(entry) {\n      // TODO: convert to format from user config\n      return entry?.duration ? entry.duration : null;\n    },\n    getCommentIcon(entry) {\n      return entry?.comment ? 'chat-dots-fill' : 'chat-dots';\n    },\n    isCommentVisible(entry, index, date) {\n      if (entry?.comment) return true;\n      if (this.editable) {\n        return this.focusedField && this.focusedField.index === index && this.focusedField.date === date;\n      }\n      return false;\n    },\n    onDurationFocus(index, date) {\n      this.focusedField = {\n        index,\n        date\n      };\n    },\n    onDurationBlur() {\n      this.focusedField = null;\n    },\n    validateDuration(date) {\n      const validateFormat = v => {\n        return v === '' || v === null || parseTimeInSeconds(v) >= 0 || this.$t('time.should_be_less_than_24_and_in_hh_mm_or_decimal_format');\n      };\n      const validateTotal = () => {\n        return this.dailyTotals[date] > 86400 ? this.$t('time.total_should_be_less_than_24_hours') : true;\n      };\n      return [validateFormat, validateTotal];\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
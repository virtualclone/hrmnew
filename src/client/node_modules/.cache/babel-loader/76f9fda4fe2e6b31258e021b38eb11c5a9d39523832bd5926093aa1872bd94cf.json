{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport FileUploadInput from '@/core/components/inputs/FileUploadInput';\nimport { required, numericOnly, maxFileSize, validSelection, validFileTypes, shouldNotExceedCharLength, numberShouldBeBetweenMinAndMaxValue } from '@ohrm/core/util/validation/rules';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport JobtitleDropdown from '@/orangehrmPimPlugin/components/JobtitleDropdown';\nimport VacancyLinkCard from '../components/VacancyLinkCard.vue';\nimport { OxdSwitchInput } from '@ohrm/oxd';\nconst vacancyModel = {\n  jobTitle: null,\n  name: '',\n  hiringManager: null,\n  numOfPositions: '',\n  description: '',\n  status: false,\n  isPublished: false\n};\nconst VacancyAttachmentModel = {\n  id: null,\n  comment: '',\n  oldAttachment: {},\n  newAttachment: null,\n  method: 'keepCurrent'\n};\nconst basePath = `${window.location.protocol}//${window.location.host}${window.appGlobal.baseUrl}`;\nconst attachmentNormalizer = data => {\n  return data.map(item => {\n    return {\n      id: item.id,\n      vacancyId: item.vacancyId,\n      fileName: item.attachment.fileName,\n      fileSize: +(item.attachment.fileSize / 1024).toFixed(2) + ' kb',\n      fileType: item.attachment.fileType,\n      comment: item.comment,\n      attachmentType: item.attachmentType\n    };\n  });\n};\nexport default {\n  components: {\n    'oxd-switch-input': OxdSwitchInput,\n    'employee-autocomplete': EmployeeAutocomplete,\n    'jobtitle-dropdown': JobtitleDropdown,\n    'vacancy-link-card': VacancyLinkCard,\n    'delete-confirmation': DeleteConfirmationDialog,\n    'file-upload-input': FileUploadInput\n  },\n  props: {\n    vacancyId: {\n      type: String,\n      required: true\n    },\n    allowedFileTypes: {\n      type: Array,\n      required: true\n    },\n    maxFileSize: {\n      type: Number,\n      required: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/recruitment/vacancies');\n    const httpAttachments = new APIService(window.appGlobal.baseUrl, '/api/v2/recruitment/vacancy/attachments');\n    return {\n      http,\n      httpAttachments\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      isLoadingAttachment: false,\n      isLoadingTable: false,\n      isAddClicked: false,\n      isEditClicked: false,\n      currentName: '',\n      vacancy: {\n        ...vacancyModel\n      },\n      vacancyAttachment: {\n        ...VacancyAttachmentModel\n      },\n      rules: {\n        jobTitle: [required],\n        name: [required, shouldNotExceedCharLength(50)],\n        hiringManager: [required, validSelection, v => v?.isPastEmployee ? this.$t('general.invalid') : true],\n        numOfPositions: [value => {\n          if (value === null || value === '') return true;\n          return typeof numericOnly(value) === 'string' ? numericOnly(value) : numberShouldBeBetweenMinAndMaxValue(1, 99)(value);\n        }],\n        description: [],\n        status: [required],\n        isPublished: [required],\n        addAttachment: [required, maxFileSize(this.maxFileSize), validFileTypes(this.allowedFileTypes)],\n        updateAttachment: [v => {\n          if (this.vacancyAttachment.method == 'replaceCurrent') {\n            return required(v);\n          } else {\n            return true;\n          }\n        }, validFileTypes(this.allowedFileTypes), maxFileSize(this.maxFileSize)],\n        comment: [shouldNotExceedCharLength(200)]\n      },\n      headers: [{\n        name: 'fileName',\n        slot: 'title',\n        title: this.$t('general.file_name'),\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'fileSize',\n        title: this.$t('general.file_size'),\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'fileType',\n        title: this.$t('general.file_type'),\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'comment',\n        title: this.$t('general.comment'),\n        style: {\n          flex: 4\n        }\n      }, {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 2\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          delete: {\n            onClick: this.onClickDelete,\n            component: 'oxd-icon-button',\n            props: {\n              name: 'trash'\n            }\n          },\n          download: {\n            onClick: this.downloadFile,\n            props: {\n              name: 'download'\n            }\n          },\n          edit: {\n            onClick: this.onClickEdit,\n            props: {\n              name: 'pencil-fill'\n            }\n          }\n        }\n      }],\n      attachments: [],\n      checkedItems: [],\n      rssFeedUrl: `${basePath}/recruitmentApply/jobs.rss`,\n      webUrl: `${basePath}/recruitmentApply/jobs.html`\n    };\n  },\n  created() {\n    this.isLoading = true;\n    this.isLoadingTable = true;\n    this.http.get(this.vacancyId).then(response => {\n      const {\n        data\n      } = response.data;\n      this.currentName = data.name;\n      this.vacancy.name = data.name;\n      this.vacancy.description = data.description;\n      this.vacancy.numOfPositions = data.numOfPositions || '';\n      this.vacancy.status = data.status;\n      this.vacancy.isPublished = data.isPublished;\n      this.vacancy.hiringManager = data.hiringManager.id ? {\n        id: data.hiringManager.id,\n        label: `${data.hiringManager.firstName} ${data.hiringManager.middleName} ${data.hiringManager.lastName}`,\n        isPastEmployee: data.hiringManager.terminationId ? true : false\n      } : this.$t('general.deleted');\n      this.vacancy.jobTitle = data.jobTitle.isDeleted ? null : {\n        id: data.jobTitle.id,\n        label: data.jobTitle.title\n      };\n      return this.http.getAll({\n        limit: 0\n      });\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.rules.name.push(v => {\n        const index = data.findIndex(item => {\n          return item.name == v && item.name != this.currentName;\n        });\n        return index === -1 || this.$t('general.already_exists');\n      });\n    }).then(() => {\n      this.httpAttachments.request({\n        method: 'GET',\n        url: `/api/v2/recruitment/vacancies/${this.vacancyId}/attachments`\n      }).then(response => {\n        const {\n          data\n        } = response.data;\n        this.attachments = attachmentNormalizer(data);\n      });\n    }).finally(() => {\n      this.isLoadingTable = false;\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      navigate('/recruitment/viewJobVacancy');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.vacancy = {\n        name: this.vacancy.name,\n        jobTitleId: this.vacancy.jobTitle.id,\n        employeeId: this.vacancy.hiringManager.id,\n        numOfPositions: this.vacancy.numOfPositions ? parseInt(this.vacancy.numOfPositions) : null,\n        description: this.vacancy.description,\n        status: this.vacancy.status,\n        isPublished: this.vacancy.isPublished\n      };\n      this.http.update(this.vacancyId, {\n        ...this.vacancy\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        navigate('/recruitment/addJobVacancy/{id}', {\n          id: this.vacancyId\n        });\n      });\n    },\n    onSaveAttachment() {\n      this.isLoadingAttachment = true;\n      this.isLoadingTable = true;\n      this.httpAttachments.create({\n        vacancyId: parseInt(this.vacancyId),\n        attachment: this.vacancyAttachment.newAttachment ? this.vacancyAttachment.newAttachment : undefined,\n        comment: this.vacancyAttachment.comment,\n        attachmentType: 1\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.updateVisibility();\n        this.resetDataTable();\n        this.isLoadingAttachment = false;\n        this.isLoadingTable = false;\n      });\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteData([item.id]);\n        }\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.attachments[index]?.id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteData(ids);\n        }\n      });\n    },\n    async deleteData(items) {\n      if (items instanceof Array) {\n        this.isLoadingTable = true;\n        this.httpAttachments.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.resetDataTable();\n          this.isLoadingTable = false;\n        });\n      }\n    },\n    resetDataTable() {\n      this.checkedItems = [];\n      this.httpAttachments.request({\n        method: 'GET',\n        url: `/api/v2/recruitment/vacancies/${this.vacancyId}/attachments`\n      }).then(response => {\n        const {\n          data\n        } = response.data;\n        this.attachments = attachmentNormalizer(data);\n      });\n    },\n    onClickAdd() {\n      this.isEditClicked = false;\n      this.isAddClicked = true;\n    },\n    onClickEdit(item) {\n      this.vacancyAttachment.id = item.id;\n      this.vacancyAttachment.comment = item.comment;\n      this.vacancyAttachment.oldAttachment = {\n        id: item.id,\n        filename: item.fileName,\n        fileType: item.fileType,\n        fileSize: item.filefileSize\n      };\n      this.vacancyAttachment.newAttachment = null;\n      this.vacancyAttachment.method = 'keepCurrent';\n      this.isAddClicked = false;\n      this.isEditClicked = true;\n    },\n    onUpdateAttachment() {\n      this.isLoadingAttachment = true;\n      this.isLoadingTable = true;\n      this.httpAttachments.request({\n        method: 'PUT',\n        url: `/api/v2/recruitment/vacancies/${this.vacancyId}/attachments/${this.vacancyAttachment.id}`,\n        data: {\n          vacancyId: parseInt(this.vacancyId),\n          currentAttachment: this.vacancyAttachment.oldAttachment ? this.vacancyAttachment.method : undefined,\n          attachment: this.vacancyAttachment.newAttachment ? this.vacancyAttachment.newAttachment : undefined,\n          comment: this.vacancyAttachment.comment,\n          attachmentType: 1\n        }\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.updateVisibility();\n        this.resetDataTable();\n        this.isLoadingAttachment = false;\n        this.isLoadingTable = false;\n      });\n    },\n    updateVisibility() {\n      this.isAddClicked = false;\n      this.isEditClicked = false;\n      this.vacancyAttachment = {\n        ...VacancyAttachmentModel\n      };\n    },\n    downloadFile(item) {\n      if (!item?.id) return;\n      const fileUrl = 'recruitment/viewVacancyAttachment/attachId';\n      const downUrl = `${window.appGlobal.baseUrl}/${fileUrl}/${item.id}`;\n      window.open(downUrl, '_blank');\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
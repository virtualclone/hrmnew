{"ast":null,"code":"import { onBeforeMount, reactive, toRefs } from 'vue';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport { startOfYear, endOfYear, formatDate, parseDate } from '@ohrm/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useLocale from '@/core/util/composable/useLocale';\nexport default {\n  name: 'DateInput',\n  setup() {\n    const state = reactive({\n      attributes: [],\n      events: []\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    const {\n      jsDateFormat,\n      userDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const responseValidator = status => {\n      return status >= 200 && status < 300 || status === 403;\n    };\n    const fetchWorkWeek = async () => {\n      http.request({\n        method: 'GET',\n        url: '/api/v2/leave/workweek',\n        params: {\n          model: 'indexed'\n        },\n        validateStatus: responseValidator\n      }).then(({\n        data\n      }) => {\n        if (data?.data) {\n          state.attributes = Object.keys(data.data).map(i => {\n            return {\n              index: parseInt(i),\n              class: data.data[i] === 8 ? '--non-working-day' : data.data[i] === 4 ? '--working-day-half' : ''\n            };\n          });\n        }\n      });\n    };\n    const fetchEvents = async (fromDate, toDate) => {\n      http.request({\n        method: 'GET',\n        url: '/api/v2/leave/holidays',\n        params: {\n          fromDate,\n          toDate\n        },\n        validateStatus: responseValidator\n      }).then(({\n        data\n      }) => {\n        if (Array.isArray(data?.data)) {\n          state.events = data.data.map(event => {\n            return {\n              date: parseDate(event.date, 'yyyy-MM-dd'),\n              type: event.name,\n              class: event.length === 0 ? '--holiday-full' : '--holiday-half'\n            };\n          });\n        }\n      });\n    };\n    const onSelectYear = async ({\n      year\n    }) => {\n      const now = new Date().setFullYear(year);\n      const fromDate = formatDate(startOfYear(now), 'yyyy-MM-dd');\n      const endDate = formatDate(endOfYear(now), 'yyyy-MM-dd');\n      fetchEvents(fromDate, endDate);\n    };\n    onBeforeMount(async () => {\n      await fetchWorkWeek();\n      await onSelectYear({\n        year: new Date().getFullYear()\n      });\n    });\n    return {\n      jsDateFormat,\n      userDateFormat,\n      ...toRefs(state),\n      onSelectYear,\n      locale\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
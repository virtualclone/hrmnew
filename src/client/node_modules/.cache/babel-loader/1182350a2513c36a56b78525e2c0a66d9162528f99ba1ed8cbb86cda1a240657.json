{"ast":null,"code":"import { reactive, toRefs } from 'vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useToast from '@/core/util/composable/useToast';\nimport { APIService } from '@/core/util/services/api.service';\nimport { validSelection } from '@/core/util/validation/rules';\nimport useInfiniteScroll from '@ohrm/core/util/composable/useInfiniteScroll';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport SummaryCard from '@/orangehrmCorporateDirectoryPlugin/components/SummaryCard';\nimport EmployeeDetails from '@/orangehrmCorporateDirectoryPlugin/components/EmployeeDetails';\nimport SummaryCardDetails from '@/orangehrmCorporateDirectoryPlugin/components/SummaryCardDetails';\nimport { OxdSpinner, useResponsive } from '@ohrm/oxd';\nconst defaultFilters = {\n  employeeNumber: null,\n  jobTitleId: null,\n  locationId: null\n};\nexport default {\n  name: 'CorporateDirectory',\n  components: {\n    'summary-card': SummaryCard,\n    'oxd-loading-spinner': OxdSpinner,\n    'employee-details': EmployeeDetails,\n    'summary-card-details': SummaryCardDetails,\n    'employee-autocomplete': EmployeeAutocomplete\n  },\n  props: {\n    jobTitles: {\n      type: Array,\n      default: () => []\n    },\n    locations: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup() {\n    const {\n      $t\n    } = usei18n();\n    const {\n      noRecordsFound\n    } = useToast();\n    const responsiveState = useResponsive();\n    const rules = {\n      employee: [validSelection]\n    };\n    const employeeDataNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.empNumber,\n          employeeName: `${item.firstName} ${item.middleName} ${item.lastName} ` + (item.terminationId ? $t('general.past_employee') : ''),\n          employeeJobTitle: item.jobTitle?.isDeleted ? `${item.jobTitle?.title} ` + $t('general.deleted') : item.jobTitle?.title,\n          employeeSubUnit: item.subunit?.name,\n          employeeLocation: item.location?.name\n        };\n      });\n    };\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/directory/employees');\n    const limit = 14;\n    const state = reactive({\n      total: 0,\n      offset: 0,\n      employees: [],\n      currentIndex: -1,\n      isLoading: false,\n      filters: {\n        ...defaultFilters\n      }\n    });\n    const fetchData = () => {\n      state.isLoading = true;\n      http.getAll({\n        limit: limit,\n        offset: state.offset,\n        locationId: state.filters.locationId?.id,\n        empNumber: state.filters.employeeNumber?.id,\n        jobTitleId: state.filters.jobTitleId?.id\n      }).then(response => {\n        const {\n          data,\n          meta\n        } = response.data;\n        state.total = meta?.total || 0;\n        if (Array.isArray(data)) {\n          state.employees = [...state.employees, ...employeeDataNormalizer(data)];\n        }\n        if (state.total === 0) {\n          noRecordsFound();\n        }\n      }).finally(() => state.isLoading = false);\n    };\n    const {\n      scrollerRef\n    } = useInfiniteScroll(() => {\n      if (state.employees.length >= state.total) return;\n      state.offset += limit;\n      fetchData();\n    });\n    return {\n      rules,\n      fetchData,\n      scrollerRef,\n      ...toRefs(state),\n      ...toRefs(responsiveState)\n    };\n  },\n  computed: {\n    isMobile() {\n      return this.windowWidth < 800;\n    },\n    isEmployeeSelected() {\n      return this.currentIndex >= 0;\n    },\n    oxdGridClasses() {\n      return {\n        'orangehrm-container': true,\n        'orangehrm-container-min-display': this.isEmployeeSelected\n      };\n    },\n    colSize() {\n      if (this.windowWidth >= 1920) {\n        return this.isEmployeeSelected ? 5 : 7;\n      }\n      return this.isEmployeeSelected ? 3 : 4;\n    }\n  },\n  beforeMount() {\n    this.fetchData();\n  },\n  methods: {\n    hideEmployeeDetails() {\n      this.currentIndex = -1;\n    },\n    showEmployeeDetails(index) {\n      if (this.currentIndex != index) {\n        this.currentIndex = index;\n      } else {\n        this.hideEmployeeDetails();\n      }\n    },\n    onSearch() {\n      this.hideEmployeeDetails();\n      this.employees = [];\n      this.offset = 0;\n      this.fetchData();\n    },\n    onReset() {\n      this.hideEmployeeDetails();\n      this.employees = [];\n      this.offset = 0;\n      this.filters = {\n        ...defaultFilters\n      };\n      this.fetchData();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
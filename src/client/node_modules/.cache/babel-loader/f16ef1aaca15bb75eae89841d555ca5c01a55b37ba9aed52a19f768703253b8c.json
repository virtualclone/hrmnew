{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { OxdSwitchInput } from '@ohrm/oxd';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nconst initialExpenseTypes = {\n  name: '',\n  description: '',\n  status: false\n};\nexport default {\n  components: {\n    'oxd-switch-input': OxdSwitchInput\n  },\n  props: {\n    id: {\n      type: Number,\n      required: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/claim/expenses/types');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      expenseTypes: {\n        ...initialExpenseTypes\n      },\n      canEdit: false,\n      name: '',\n      rules: {\n        name: [required, shouldNotExceedCharLength(100)],\n        description: [shouldNotExceedCharLength(1000)]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.id).then(response => {\n      const {\n        data\n      } = response.data;\n      this.expenseTypes = {\n        ...data\n      };\n      this.name = data.name;\n      this.canEdit = response.data.meta.canEdit;\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  created() {\n    this.isLoading = true;\n    this.http.getAll({\n      limit: 0\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.rules.name.push(value => {\n        const index = data.findIndex(item => item.name.toLowerCase() == value.trim().toLowerCase());\n        if (index > -1) {\n          const {\n            id\n          } = data[index];\n          return id != this.id ? this.$t('general.already_exists') : true;\n        }\n        return true;\n      });\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      navigate('/claim/viewExpense');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.id, {\n        name: this.canEdit ? this.expenseTypes.name : null,\n        description: this.expenseTypes.description,\n        status: this.expenseTypes.status\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
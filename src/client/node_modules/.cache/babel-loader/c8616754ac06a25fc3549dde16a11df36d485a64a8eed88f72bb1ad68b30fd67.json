{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { truncate } from '@ohrm/core/util/helper/truncate';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useLeaveActions from '@/orangehrmLeavePlugin/util/composable/useLeaveActions';\nimport LeaveCommentsModal from '@/orangehrmLeavePlugin/components/LeaveCommentsModal';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nexport default {\n  name: 'LeaveViewRequest',\n  components: {\n    'leave-comment-modal': LeaveCommentsModal\n  },\n  props: {\n    leaveRequestId: {\n      type: String,\n      required: true\n    },\n    myLeaveRequest: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/leave/leave-requests/${props.leaveRequestId}/leaves`);\n    const {\n      leaveActions,\n      processLeaveAction\n    } = useLeaveActions(http);\n    const {\n      $t\n    } = usei18n();\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const leaveRequestNormalizer = data => {\n      return data.map(item => {\n        let leaveDatePeriod = '';\n        const duration = item.dates.durationType?.type;\n        if (item.dates.fromDate) {\n          leaveDatePeriod = formatDate(parseDate(item.dates.fromDate), jsDateFormat, {\n            locale\n          });\n        }\n        if (item.dates.startTime && item.dates.endTime) {\n          leaveDatePeriod += ` (${item.dates.startTime} - ${item.dates.endTime})`;\n        }\n        if (duration === 'half_day_morning' || duration === 'half_day_afternoon') {\n          leaveDatePeriod += ` ${$t('leave.half_day')}`;\n        }\n        const leaveTypeName = item.leaveType?.name;\n        if (item.leaveType?.deleted) {\n          leaveTypeName + $t('general.deleted');\n        }\n        return {\n          id: item.id,\n          date: leaveDatePeriod,\n          leaveType: leaveTypeName,\n          leaveBalance: item.leaveBalance?.balance.balance ? parseFloat(item.leaveBalance.balance.balance).toFixed(2) : undefined,\n          duration: parseFloat(item.lengthHours).toFixed(2),\n          status: item.leaveStatus?.name,\n          comment: truncate(item.lastComment?.comment),\n          actions: item.allowedActions,\n          canComment: !(item.leaveStatus?.id === 5 || item.leaveStatus?.id === 4)\n        };\n      });\n    };\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      normalizer: leaveRequestNormalizer\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      response,\n      leaveActions,\n      processLeaveAction,\n      jsDateFormat,\n      locale,\n      translateEmpName: $tEmpName\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'date',\n        title: this.$t('general.date'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'leaveType',\n        title: this.$t('leave.leave_type'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'leaveBalance',\n        title: this.$t('leave.leave_balance_days'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'duration',\n        title: this.$t('attendance.duration_hours'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'status',\n        title: this.$t('general.status'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'comment',\n        title: this.$t('general.comments'),\n        style: {\n          flex: '10%'\n        }\n      }, {\n        name: 'action',\n        slot: 'footer',\n        title: this.$t('general.actions'),\n        cellType: 'oxd-table-cell-actions',\n        cellRenderer: this.cellRenderer,\n        style: {\n          flex: '20%'\n        }\n      }],\n      showCommentModal: false,\n      commentModalState: null,\n      isLeaveRequest: false\n    };\n  },\n  computed: {\n    employeeName() {\n      const employee = this.response?.meta?.employee;\n      if (employee) {\n        return this.translateEmpName(employee, {\n          includeMiddle: true,\n          excludePastEmpTag: false\n        });\n      }\n      return '';\n    },\n    leavePeriod() {\n      const startDate = formatDate(parseDate(this.response?.meta?.startDate), this.jsDateFormat, {\n        locale: this.locale\n      });\n      const endDate = formatDate(parseDate(this.response?.meta?.endDate), this.jsDateFormat, {\n        locale: this.locale\n      });\n      return startDate === endDate ? startDate : `${startDate} - ${endDate}`;\n    }\n  },\n  methods: {\n    cellRenderer(...[,,, row]) {\n      const cellConfig = {};\n      const dropdownActions = [];\n      const {\n        approve,\n        reject,\n        cancel,\n        more\n      } = this.leaveActions;\n      if (row.canComment) {\n        dropdownActions.push({\n          label: 'Add Comment',\n          context: 'add_comment'\n        });\n      }\n      row.actions.map(item => {\n        if (item.action === 'APPROVE') {\n          approve.props.label = this.$t('general.approve');\n          approve.props.onClick = () => this.onLeaveAction(row.id, 'APPROVE');\n          cellConfig.approve = approve;\n        }\n        if (item.action === 'REJECT') {\n          reject.props.label = this.$t('general.reject');\n          reject.props.onClick = () => this.onLeaveAction(row.id, 'REJECT');\n          cellConfig.reject = reject;\n        }\n        if (item.action === 'CANCEL') {\n          if (this.myLeaveRequest) {\n            cancel.props.label = this.$t('general.cancel');\n            cancel.props.onClick = () => this.onLeaveAction(row.id, 'CANCEL');\n            cellConfig.cancel = cancel;\n          } else {\n            dropdownActions.push({\n              label: 'Cancel Leave',\n              context: 'cancel_leave'\n            });\n          }\n        }\n      });\n      if (dropdownActions.length > 0) {\n        more.props.options = dropdownActions;\n        more.props.onClick = $event => this.onLeaveDropdownAction($event, row);\n        cellConfig.more = more;\n      }\n      return {\n        props: {\n          header: {\n            cellConfig\n          }\n        }\n      };\n    },\n    onClickComments() {\n      this.commentModalState = this.leaveRequestId;\n      this.isLeaveRequest = true;\n      this.showCommentModal = true;\n    },\n    onCommentModalClose() {\n      this.commentModalState = null;\n      this.showCommentModal = false;\n      this.resetDataTable();\n    },\n    onLeaveDropdownAction(event, item) {\n      if (event.context === 'cancel_leave') {\n        this.onLeaveAction(item.id, 'CANCEL');\n      } else {\n        this.commentModalState = item.id;\n        this.isLeaveRequest = false;\n        this.showCommentModal = true;\n      }\n    },\n    onLeaveAction(id, actionType) {\n      this.isLoading = true;\n      this.processLeaveAction(id, actionType).then(() => {\n        this.$toast.updateSuccess();\n      }).finally(this.resetDataTable);\n    },\n    onClickBack() {\n      this.myLeaveRequest ? navigate('/leave/viewMyLeaveList') : navigate('/leave/viewLeaveList');\n    },\n    async resetDataTable() {\n      await this.execQuery();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
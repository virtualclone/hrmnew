{"ast":null,"code":"import { computed, ref } from 'vue';\nimport { freshDate, parseDate, parseTime, formatTime, formatDate, getStandardTimezone } from '@/core/util/helper/datefns';\nimport { navigate } from '@/core/util/helper/navigation';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { required, validDateFormat } from '@/core/util/validation/rules';\nimport RecordCell from '@/orangehrmAttendancePlugin/components/RecordCell.vue';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nexport default {\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog\n  },\n  props: {\n    date: {\n      type: String,\n      default: null\n    },\n    isEditable: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat,\n      userDateFormat,\n      timeFormat,\n      jsTimeFormat\n    } = useDateFormat();\n    const rules = {\n      date: [required, validDateFormat(userDateFormat)]\n    };\n    const filters = ref({\n      date: props.date ? props.date : formatDate(freshDate(), 'yyyy-MM-dd')\n    });\n    const serializedFilters = computed(() => {\n      return {\n        date: filters.value.date\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/attendance/records');\n    const attendanceRecordNormalizer = data => {\n      return data.map(item => {\n        const {\n          punchIn,\n          punchOut\n        } = item;\n        const punchInDate = formatDate(parseDate(punchIn?.userDate), jsDateFormat, {\n          locale\n        });\n        const punchInTime = formatTime(parseTime(punchIn?.userTime, timeFormat), jsTimeFormat);\n        const punchOutDate = formatDate(parseDate(punchOut?.userDate), jsDateFormat, {\n          locale\n        });\n        const punchOutTime = formatTime(parseTime(punchOut?.userTime, timeFormat), jsTimeFormat);\n        return {\n          id: item.id,\n          punchIn: {\n            ...punchIn,\n            userTime: punchInTime,\n            userDate: punchInDate\n          },\n          punchOut: {\n            ...punchOut,\n            userTime: punchOutTime,\n            userDate: punchOutDate\n          },\n          punchInNote: punchIn.note,\n          punchOutNote: punchOut.note,\n          duration: item.duration\n        };\n      });\n    };\n    const {\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery,\n      currentPage,\n      showPaginator\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: attendanceRecordNormalizer\n    });\n    const totalDuration = computed(() => {\n      const meta = response.value?.meta;\n      return meta ? meta.sum.label : '0.00';\n    });\n    return {\n      http,\n      rules,\n      total,\n      pages,\n      filters,\n      pageSize,\n      isLoading,\n      execQuery,\n      currentPage,\n      showPaginator,\n      items: response,\n      totalDuration\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'punchIn',\n        slot: 'title',\n        title: this.$t('attendance.punch_in'),\n        style: {\n          flex: 1\n        },\n        cellRenderer: this.cellRenderer\n      }, {\n        name: 'punchInNote',\n        slot: 'title',\n        cellType: 'oxd-table-cell-truncate',\n        title: this.$t('attendance.punch_in_note'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'punchOut',\n        slot: 'title',\n        title: this.$t('attendance.punch_out'),\n        style: {\n          flex: 1\n        },\n        cellRenderer: this.cellRenderer\n      }, {\n        name: 'punchOutNote',\n        slot: 'title',\n        cellType: 'oxd-table-cell-truncate',\n        title: this.$t('attendance.punch_out_note'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'duration',\n        slot: 'title',\n        title: this.$t('attendance.duration_hours'),\n        style: {\n          flex: 1\n        }\n      }, {\n        ...(this.isEditable && {\n          name: 'actions',\n          slot: 'action',\n          title: this.$t('general.actions'),\n          style: {\n            flex: 1\n          },\n          cellType: 'oxd-table-cell-actions',\n          cellConfig: {\n            delete: {\n              onClick: this.onClickDelete,\n              component: 'oxd-icon-button',\n              props: {\n                name: 'trash'\n              }\n            },\n            edit: {\n              onClick: this.onClickEdit,\n              props: {\n                name: 'pencil-fill'\n              }\n            }\n          }\n        })\n      }],\n      checkedItems: []\n    };\n  },\n  methods: {\n    cellRenderer(...args) {\n      const cellData = args[1];\n      return {\n        component: RecordCell,\n        props: {\n          date: cellData.userDate,\n          time: cellData.userTime,\n          offset: getStandardTimezone(cellData.offset)\n        }\n      };\n    },\n    onClickEdit(item) {\n      navigate('/attendance/editAttendanceRecord/{id}', {\n        id: item.id\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
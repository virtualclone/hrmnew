{"ast":null,"code":"import { navigate } from '@/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nexport default {\n  name: 'RecruitmentStatus',\n  props: {\n    candidate: {\n      type: Object,\n      required: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/recruitment/candidates');\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    return {\n      http,\n      translateEmpName: $tEmpName\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      statuses: [{\n        id: 1,\n        label: this.$t('recruitment.application_initiated')\n      }, {\n        id: 2,\n        label: this.$t('recruitment.shortlisted')\n      }, {\n        id: 3,\n        label: this.$t('leave.rejected')\n      }, {\n        id: 4,\n        label: this.$t('recruitment.interview_scheduled')\n      }, {\n        id: 5,\n        label: this.$t('recruitment.interview_passed')\n      }, {\n        id: 6,\n        label: this.$t('recruitment.interview_failed')\n      }, {\n        id: 7,\n        label: this.$t('recruitment.job_offered')\n      }, {\n        id: 8,\n        label: this.$t('recruitment.offer_declined')\n      }, {\n        id: 9,\n        label: this.$t('recruitment.hired')\n      }],\n      actions: []\n    };\n  },\n  computed: {\n    recruitmentStatus() {\n      return this.statuses.find(item => item.id === this.candidate.status?.id)?.label || null;\n    },\n    candidateName() {\n      return `${this.candidate.firstName} ${this.candidate?.middleName || ''} ${this.candidate.lastName}`;\n    },\n    vacancyName() {\n      const {\n        vacancy\n      } = this.candidate;\n      if (!vacancy) return null;\n      return vacancy.status === false ? vacancy.name + ` (${this.$t('general.closed')})` : vacancy.name;\n    },\n    hiringManagerName() {\n      return this.candidate.vacancy?.hiringManager ? this.translateEmpName(this.candidate.vacancy.hiringManager, {\n        includeMiddle: true,\n        excludePastEmpTag: false\n      }) : undefined;\n    }\n  },\n  watch: {\n    candidate() {\n      this.getAllowedActions();\n    }\n  },\n  beforeMount() {\n    this.getAllowedActions();\n  },\n  methods: {\n    hasWorkflow(actionId) {\n      return this.actions.findIndex(actions => actions.id == actionId) > -1;\n    },\n    doWorkflow(actionId) {\n      navigate('/recruitment/changeCandidateVacancyStatus', {}, {\n        candidateId: this.candidate?.id,\n        selectedAction: actionId\n      });\n    },\n    getAllowedActions() {\n      this.isLoading = true;\n      this.http.request({\n        method: 'GET',\n        url: `/api/v2/recruitment/candidates/${this.candidate?.id}/actions/allowed`\n      }).then(response => {\n        const {\n          data\n        } = response.data;\n        this.actions = [...data];\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
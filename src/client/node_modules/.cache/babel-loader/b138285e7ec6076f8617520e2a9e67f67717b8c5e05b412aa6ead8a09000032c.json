{"ast":null,"code":"import { navigate } from '@/core/util/helper/navigation';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport ReviewerAutoComplete from '@/orangehrmPerformancePlugin/components/ReviewerAutoComplete';\nimport { required, validSelection, shouldNotExceedCharLength } from '@/core/util/validation/rules';\nimport { APIService } from '@/core/util/services/api.service';\nconst trackerModel = {\n  name: null,\n  employee: null,\n  reviewers: []\n};\nexport default {\n  components: {\n    'employee-autocomplete': EmployeeAutocomplete,\n    'reviewer-autocomplete': ReviewerAutoComplete\n  },\n  props: {\n    performanceTrackerId: {\n      type: Number,\n      required: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/performance/config/trackers');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      tracker: {\n        ...trackerModel\n      },\n      isReadOnly: false,\n      rules: {\n        tracker: [required, shouldNotExceedCharLength(200)],\n        employee: [required, validSelection, value => {\n          if (value === null) {\n            return true;\n          }\n          const valid = this.tracker.reviewers.findIndex(reviewer => {\n            return reviewer.id === value.id;\n          });\n          if (valid == -1) {\n            return true;\n          }\n          return this.$t('performance.employee_cannot_be_assigned_as_his_own_reviewer');\n        }],\n        reviewers: [required, validSelection]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.performanceTrackerId) //performance-tracker-id\n    .then(response => {\n      const {\n        data\n      } = response.data;\n      this.isReadOnly = data.ownerEditable === false;\n      this.tracker.id = data.id;\n      this.tracker.name = data.trackerName;\n      this.tracker.employee = data.employee ? {\n        id: data.employee.empNumber,\n        label: `${data.employee.firstName} ${data.employee.middleName} ${data.employee.lastName}`,\n        isPastEmployee: data.employee.terminationId ? true : false\n      } : null;\n      this.tracker.reviewers = data.reviewers.map(employee => {\n        return {\n          id: employee.empNumber,\n          label: `${employee.firstName} ${employee.middleName} ${employee.lastName}`,\n          isPastEmployee: employee.terminationId ? true : false\n        };\n      });\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      navigate('/performance/viewPerformanceTracker');\n    },\n    onSave() {\n      this.isLoading = true;\n      const payload = {\n        trackerName: this.tracker.name.trim(),\n        empNumber: this.tracker.employee.id,\n        reviewerEmpNumbers: this.tracker.reviewers.map(employee => employee.id)\n      };\n      this.http.update(this.performanceTrackerId, payload).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
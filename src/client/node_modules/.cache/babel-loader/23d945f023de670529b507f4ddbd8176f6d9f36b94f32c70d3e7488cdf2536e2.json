{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { computed } from 'vue';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport SaveUserModal from '@/orangehrmTimePlugin/components/SaveUserModal.vue';\nimport EditActivityModal from '@/orangehrmTimePlugin/components/EditActivityModal.vue';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog.vue';\nexport default {\n  name: 'Activities',\n  components: {\n    'save-user-modal': SaveUserModal,\n    'edit-activity-modal': EditActivityModal,\n    'delete-confirmation': DeleteConfirmationDialog\n  },\n  props: {\n    projectId: {\n      type: Number,\n      required: true\n    },\n    unselectableIds: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/time/project/${props.projectId}/users`);\n    const dhttp = new APIService(window.appGlobal.baseUrl, `/api/v2/time/project/users`);\n    const activitiesNormalizer = data => {\n      const empArray = [];\n      return data.map(item => {\n        const selectable = props.unselectableIds.findIndex(id => id == item.id);\n        const username = `${item.firstName} ${item.middleName} ${item.lastName}`;\n        empArray.push(item.empNumber);\n        return {\n          // ...item,\n          username,\n          empArray,\n          isSelectable: selectable === -1\n        };\n      });\n    };\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      normalizer: activitiesNormalizer\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'username',\n        slot: 'title',\n        title: this.$t('User Name'),\n        style: {\n          'flex-basis': '80%'\n        }\n      }, {\n        name: 'actions',\n        title: this.$t('general.actions'),\n        slot: 'action',\n        style: {\n          'flex-shrink': 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          delete: {\n            onClick: this.onClickDelete,\n            component: 'oxd-icon-button',\n            props: {\n              name: 'trash'\n            }\n          },\n          edit: {\n            onClick: this.onClickEdit,\n            props: {\n              name: 'pencil-fill'\n            }\n          }\n        }\n      }],\n      checkedItems: [],\n      showSaveUserModal: false,\n      showEditActivityModal: false,\n      editActivityModalState: null\n      // empArray: this.empArray,\n    };\n  },\n\n  methods: {\n    onClickAdd() {\n      this.showSaveUserModal = true;\n      // console.log(props.empArray,'from modal');\n    },\n\n    onClickEdit(item) {\n      this.editActivityModalState = item.id;\n      this.showEditActivityModal = true;\n    },\n    onCloseModal() {\n      this.showSaveUserModal = false;\n      this.showEditActivityModal = false;\n      this.resetDataTable();\n    },\n    onClickDeleteSelected() {\n      const ids = [];\n      this.checkedItems.forEach(index => {\n        ids.push(this.items?.data[index].id);\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      const isSelectable = this.unselectableIds.findIndex(id => id == item.id);\n      if (isSelectable > -1) {\n        return this.$toast.error({\n          title: this.$t('general.error'),\n          message: this.$t('time.not_allowed_to_delete_project_activities_which_have_time_logged_against')\n        });\n      }\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          this.$toast.deleteSuccess();\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
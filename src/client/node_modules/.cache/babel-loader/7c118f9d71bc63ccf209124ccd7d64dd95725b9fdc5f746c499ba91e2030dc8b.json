{"ast":null,"code":"import { computed, ref } from 'vue';\nimport useSort from '@/core/util/composable/useSort';\nimport { navigate } from '@/core/util/helper/navigation';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { validSelection } from '@/core/util/validation/rules';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@/core/util/composable/usePaginate';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@ohrm/core/util/helper/datefns';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nconst defaultFilters = {\n  empNumber: null\n};\nconst defaultSortOrder = {\n  'performanceTracker.modifiedDate': 'DESC',\n  'employee.lastName': 'ASC',\n  'performanceTracker.trackerName': 'ASC',\n  'performanceTracker.addedDate': 'DESC'\n};\nexport default {\n  name: 'TrackerList',\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog,\n    'employee-autocomplete': EmployeeAutocomplete\n  },\n  props: {\n    unselectableIds: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup() {\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const trackerNormalizer = data => {\n      return data.map(row => {\n        return {\n          id: row.id,\n          tracker: row.trackerName,\n          addDate: formatDate(parseDate(row.addedDate), jsDateFormat, {\n            locale\n          }),\n          modifiedDate: formatDate(parseDate(row.modifiedDate), jsDateFormat, {\n            locale\n          }),\n          empName: $tEmpName(row.employee, {\n            includeMiddle: false,\n            excludePastEmpTag: false\n          })\n        };\n      });\n    };\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/performance/config/trackers');\n    const filters = ref({\n      ...defaultFilters\n    });\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilters = computed(() => {\n      return {\n        empNumber: filters.value.empNumber?.id,\n        sortField: sortField.value,\n        sortOrder: sortOrder.value,\n        includeEmployees: filters.value.includeEmployees?.param\n      };\n    });\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      response,\n      pages,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: trackerNormalizer,\n      prefetch: true,\n      toastNoRecords: true\n    });\n    onSort(execQuery);\n    return {\n      http,\n      total,\n      isLoading,\n      showPaginator,\n      currentPage,\n      pages,\n      response,\n      execQuery,\n      sortDefinition,\n      filters\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'empName',\n        title: this.$t('general.employee'),\n        slot: 'title',\n        sortField: 'employee.lastName',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'tracker',\n        title: this.$t('performance.tracker'),\n        style: {\n          flex: 1\n        },\n        sortField: 'performanceTracker.trackerName'\n      }, {\n        name: 'addDate',\n        title: this.$t('performance.added_date'),\n        sortField: 'performanceTracker.addedDate',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'modifiedDate',\n        title: this.$t('performance.modified_date'),\n        sortField: 'performanceTracker.modifiedDate',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          delete: {\n            onClick: this.onClickDelete,\n            component: 'oxd-icon-button',\n            props: {\n              name: 'trash'\n            }\n          },\n          edit: {\n            onClick: this.onClickEdit,\n            props: {\n              name: 'pencil-fill'\n            }\n          }\n        }\n      }],\n      checkedItems: [],\n      rules: {\n        employee: [validSelection]\n      }\n    };\n  },\n  methods: {\n    onClickAdd() {\n      navigate('/performance/addPerformanceTracker');\n    },\n    onClickEdit(item) {\n      navigate('/performance/addPerformanceTracker/{id}', {\n        id: item.id\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.response?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      const isSelectable = this.unselectableIds.findIndex(id => id == item.id);\n      if (isSelectable > -1) {\n        return this.$toast.cannotDelete();\n      }\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onClickReset() {\n      this.filters = {\n        ...defaultFilters\n      };\n      this.filterItems();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
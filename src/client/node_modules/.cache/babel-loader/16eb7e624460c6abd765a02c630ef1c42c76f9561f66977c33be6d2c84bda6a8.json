{"ast":null,"code":"import { OxdSheet, OxdSpinner, OxdTreeView, DEVICE_TYPES, useResponsive, OxdSwitchInput, OxdDropdownMenu } from '@ohrm/oxd';\nimport { computed } from 'vue';\nimport SaveOrgUnit from './SaveOrgUnit';\nimport EditOrgUnit from './EditOrgUnit';\nimport { APIService } from '@/core/util/services/api.service';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nexport default {\n  components: {\n    'oxd-sheet': OxdSheet,\n    'save-org-unit': SaveOrgUnit,\n    'edit-org-unit': EditOrgUnit,\n    'oxd-tree-view': OxdTreeView,\n    'oxd-dropdown': OxdDropdownMenu,\n    'oxd-loading-spinner': OxdSpinner,\n    'oxd-switch-input': OxdSwitchInput,\n    'delete-confirmation': DeleteConfirmationDialog\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/admin/subunits');\n    const responsiveState = useResponsive();\n    const isMobile = computed(() => {\n      return !(responsiveState.screenType === DEVICE_TYPES.DEVICE_LG || responsiveState.screenType === DEVICE_TYPES.DEVICE_XL);\n    });\n    return {\n      http,\n      isMobile\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      editable: false,\n      showSaveModal: false,\n      saveModalState: null,\n      showEditModal: false,\n      editModalState: null,\n      data: {}\n    };\n  },\n  created() {\n    this.fetchOrgStructure();\n  },\n  methods: {\n    onDelete(node) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.isLoading = true;\n          this.http.delete(node.id).then(() => {\n            return this.$toast.deleteSuccess();\n          }).then(() => {\n            this.isLoading = false;\n            this.fetchOrgStructure();\n          });\n        }\n      });\n    },\n    onAddOrglevel(node) {\n      if (this.editable) {\n        this.saveModalState = node;\n        this.showSaveModal = true;\n      }\n    },\n    onEditOrglevel(node) {\n      if (this.editable) {\n        this.editModalState = node;\n        this.showEditModal = true;\n      }\n    },\n    onSaveModalClose() {\n      this.saveModalState = null;\n      this.showSaveModal = false;\n      this.fetchOrgStructure();\n    },\n    onEditModalClose() {\n      this.editModalState = null;\n      this.showEditModal = false;\n      this.fetchOrgStructure();\n    },\n    fetchOrgStructure() {\n      this.isLoading = true;\n      this.http.getAll({\n        mode: 'tree'\n      }).then(response => {\n        const {\n          data\n        } = response.data;\n        this.data = data[0];\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
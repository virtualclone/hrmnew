{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { required, validSelection, validDateFormat, validTimeFormat, shouldNotExceedCharLength } from '@/core/util/validation/rules';\nimport { navigate } from '@/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport CandidateActionLayout from '@/orangehrmRecruitmentPlugin/components/CandidateActionLayout.vue';\nimport InterviewerAutocomplete from '@/orangehrmRecruitmentPlugin/components/InterviewerAutocomplete.vue';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nconst interviewModel = {\n  interviewName: null,\n  interviewDate: null,\n  interviewTime: null,\n  note: null\n};\nexport default {\n  components: {\n    'candidate-action-layout': CandidateActionLayout,\n    'interviewer-autocomplete': InterviewerAutocomplete\n  },\n  props: {\n    candidateId: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/recruitment/candidates/${props.candidateId}/shedule-interview`);\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      http,\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      interview: {\n        ...interviewModel\n      },\n      interviewers: [null],\n      rules: {\n        interviewName: [required, shouldNotExceedCharLength(100)],\n        interviewDate: [required, validDateFormat(this.userDateFormat)],\n        interviewTime: [validTimeFormat],\n        interviewerName: [required, validSelection, value => {\n          return this.interviewers.filter(interviewer => interviewer && interviewer.id === value?.id).length < 2 ? true : this.$t('general.already_exists');\n        }],\n        note: [shouldNotExceedCharLength(2000)]\n      }\n    };\n  },\n  methods: {\n    onAddAnother() {\n      if (this.interviewers.length < 5) {\n        this.interviewers.push(null);\n      }\n    },\n    onRemoveInterviewer(index) {\n      this.interviewers.splice(index, 1);\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        ...this.interview,\n        interviewerEmpNumbers: this.interviewers.map(interviewer => interviewer?.id).filter(Number)\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        navigate('/recruitment/addCandidate/{id}', {\n          id: this.candidateId\n        });\n      });\n    },\n    onClickBack() {\n      navigate('/recruitment/addCandidate/{id}', {\n        id: this.candidateId\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
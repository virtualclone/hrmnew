{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { OxdAlert, OxdSwitchInput } from '@ohrm/oxd';\nconst initialOAuthClient = {\n  id: null,\n  name: '',\n  redirectUri: '',\n  enabled: true,\n  clientId: null,\n  clientSecret: '********',\n  confidential: false\n};\nexport default {\n  components: {\n    'oxd-switch-input': OxdSwitchInput,\n    'oxd-alert': OxdAlert\n  },\n  props: {\n    id: {\n      type: Number,\n      default: null\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/admin/oauth-clients');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      isSecretPlain: false,\n      oAuthClient: {\n        ...initialOAuthClient\n      },\n      rules: {\n        name: [required, shouldNotExceedCharLength(80)],\n        redirectUri: [required, shouldNotExceedCharLength(2000)]\n      }\n    };\n  },\n  computed: {\n    editMode() {\n      return this.oAuthClient.clientId !== null;\n    },\n    showClientSecret() {\n      return this.oAuthClient.confidential === true;\n    }\n  },\n  created() {\n    this.isLoading = true;\n    this.getClient().then(response => {\n      const {\n        data\n      } = response.data;\n      this.rules.name.push(v => {\n        const index = data.findIndex(item => item.name === v);\n        if (index > -1) {\n          const {\n            id\n          } = data[index];\n          return id !== this.id ? this.$t('general.already_exists') : true;\n        } else {\n          return true;\n        }\n      });\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    getClient() {\n      if (this.id !== null) {\n        return this.http.get(this.id).then(response => {\n          const {\n            data\n          } = response.data;\n          this.setDataFromResponse(data);\n\n          // Fetch list data for unique test\n          return this.http.getAll({\n            limit: 0\n          });\n        });\n      }\n      return this.http.getAll({\n        limit: 0\n      });\n    },\n    onCancel() {\n      navigate('/admin/registerOAuthClient');\n    },\n    onSave() {\n      this.isLoading = true;\n      (this.editMode ? this.update() : this.create()).finally(() => {\n        this.isLoading = false;\n      });\n    },\n    create() {\n      return this.http.create({\n        name: this.oAuthClient.name,\n        redirectUri: this.oAuthClient.redirectUri,\n        enabled: this.oAuthClient.enabled,\n        confidential: this.oAuthClient.confidential\n      }).then(response => {\n        const {\n          data,\n          meta\n        } = response.data;\n        this.setDataFromResponse(data);\n        this.oAuthClient.clientSecret = meta.clientSecret;\n        this.isSecretPlain = true;\n        return this.$toast.saveSuccess();\n      });\n    },\n    update() {\n      return this.http.update(this.oAuthClient.id, {\n        name: this.oAuthClient.name,\n        redirectUri: this.oAuthClient.redirectUri,\n        enabled: this.oAuthClient.enabled,\n        confidential: this.oAuthClient.confidential\n      }).then(response => {\n        const {\n          data,\n          meta\n        } = response.data;\n        this.setDataFromResponse(data);\n        if (data.confidential === true && meta.clientSecret !== null) {\n          this.oAuthClient.clientSecret = meta.clientSecret;\n          this.isSecretPlain = true;\n        }\n        return this.$toast.updateSuccess();\n      });\n    },\n    setDataFromResponse(data) {\n      this.oAuthClient.id = data.id;\n      this.oAuthClient.name = data.name;\n      this.oAuthClient.redirectUri = data.redirectUri;\n      this.oAuthClient.enabled = data.enabled;\n      this.oAuthClient.clientId = data.clientId;\n      this.oAuthClient.confidential = data.confidential;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
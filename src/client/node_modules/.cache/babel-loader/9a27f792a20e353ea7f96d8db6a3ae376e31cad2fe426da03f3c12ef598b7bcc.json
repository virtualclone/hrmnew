{"ast":null,"code":"import { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport useForm from '@/core/util/composable/useForm';\nimport { APIService } from '@/core/util/services/api.service';\nimport PasswordInput from '@/core/components/inputs/PasswordInput';\nconst userModel = {\n  currentPassword: '',\n  password: '',\n  passwordConfirm: ''\n};\nexport default {\n  components: {\n    'password-input': PasswordInput\n  },\n  props: {\n    userName: {\n      type: String,\n      required: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/core/update-password');\n    const {\n      formRef,\n      reset\n    } = useForm();\n    return {\n      http,\n      formRef,\n      reset\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      user: {\n        ...userModel\n      },\n      rules: {\n        currentPassword: [required, shouldNotExceedCharLength(64)]\n      }\n    };\n  },\n  methods: {\n    onCancel() {\n      window.history.back();\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.request({\n        method: 'PUT',\n        url: '/api/v2/pim/update-password',\n        data: {\n          newPassword: this.user.password,\n          currentPassword: this.user.currentPassword\n        },\n        validateStatus: status => {\n          return status >= 200 && status < 300 || status === 422;\n        }\n      }).then(response => {\n        if (response.status === 200) {\n          this.reset();\n          return this.$toast.saveSuccess();\n        } else {\n          return this.$toast.error({\n            title: this.$t('general.error'),\n            message: this.$t('pim.current_password_is_incorrect')\n          });\n        }\n      }).finally(() => this.isLoading = false);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
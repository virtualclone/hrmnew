{"ast":null,"code":"import { computed, ref } from 'vue';\nimport { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { truncate } from '@ohrm/core/util/helper/truncate';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\nconst defaultFilters = {\n  CompOffList: \"MY\"\n};\nexport default {\n  name: 'MyCompOffListTable',\n  props: {\n    CompOffList: {\n      type: String\n    }\n  },\n  setup(props) {\n    const filters = ref({\n      ...defaultFilters,\n      ...(props.CompOffList && {\n        CompOffList: props.CompOffList\n      })\n    });\n    const {\n      $t\n    } = usei18n();\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat,\n      userDateFormat\n    } = useDateFormat();\n    const serializedFilters = computed(() => {\n      return {\n        CompOffList: filters.value.CompOffList\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/leave/compensatory-off`);\n    const compOfflistNormalizer = data => {\n      if (!data || !Array.isArray(data)) {\n        // Handle the case where data is undefined or not an array\n        return [];\n      }\n      return data.map(item => {\n        const apiDate = {\n          date: item.date.date,\n          timezone_type: item.date.timezone_type,\n          timezone: item.date.timezone\n        };\n        const parts = apiDate.date.split(\" \");\n        const datePart = parts[0];\n        const [year, month, day1] = datePart.split(\"-\");\n\n        // Create a new Date object with the parts\n\n        const parsedDate = new Date(parseInt(year), parseInt(month) - 1,\n        // Months are 0-based in JavaScript\n        parseInt(day1));\n        const apiExpDate = {\n          date: item.expireDate.date,\n          timezone_type: item.date.timezone_type,\n          timezone: item.date.timezone\n        };\n        const partsExp = apiExpDate.date.split(\" \");\n        const datePartExp = partsExp[0];\n        const [yearExp, monthExp, day1Exp] = datePartExp.split(\"-\");\n\n        // Create a new Date object with the parts\n\n        const parsedDateExp = new Date(parseInt(yearExp), parseInt(monthExp) - 1,\n        // Months are 0-based in JavaScript\n        parseInt(day1Exp));\n\n        // Convert to a formatted string in the Indian timezone without time\n\n        const formattedDate = `${year}-${month}-${day1}`; //parsedDate.toLocaleDateString(\"en-IN\", options);\n        const formattedDateExp = `${yearExp}-${monthExp}-${day1Exp}`; //parsedDate.toLocaleDateString(\"en-IN\", options);\n\n        const date = formattedDate;\n        const Expdate = formattedDateExp;\n        let duration = '';\n        let leaveTaken = '';\n        if (item.duration == \"half_day\") {\n          duration = 'Half Day';\n        } else {\n          duration = 'Full Day';\n        }\n        if (item.status == 0) {\n          status = 'Pending';\n        } else if (item.status == 1) {\n          status = 'Approve';\n        } else {\n          status = 'Reject';\n        }\n        if (item.leaveTaken == 0) {\n          leaveTaken = 'No';\n        } else {\n          leaveTaken = 'Yes';\n        }\n        return {\n          id: item.id,\n          Expdate: Expdate,\n          date: date,\n          lengthHours: parseFloat(item.lengthHours).toFixed(2),\n          duration: duration,\n          status: status,\n          comment: item.comments,\n          leaveTaken: leaveTaken\n        };\n      });\n    };\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: compOfflistNormalizer\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      filters\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'date',\n        title: this.$t('Date'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'Expdate',\n        title: this.$t('Expiry Date'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'lengthHours',\n        title: this.$t('No of Hours'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'duration',\n        title: this.$t('Duration'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'status',\n        title: this.$t('general.status'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'comment',\n        title: this.$t('general.comments'),\n        style: {\n          flex: '5%'\n        }\n      }, {\n        name: 'leaveTaken',\n        title: this.$t('Availed'),\n        style: {\n          flex: '5%'\n        }\n      }]\n    };\n  },\n  methods: {\n    async filterItems() {\n      await this.execQuery();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
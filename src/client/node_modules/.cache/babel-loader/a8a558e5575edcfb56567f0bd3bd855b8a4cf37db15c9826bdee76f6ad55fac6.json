{"ast":null,"code":"import { computed, ref } from 'vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport { shouldNotExceedCharLength } from '@/core/util/validation/rules';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport { OxdDivider } from '@ohrm/oxd';\nconst defaultPic = `${window.appGlobal.publicPath}/images/default-photo.png`;\nexport default {\n  components: {\n    'oxd-divider': OxdDivider\n  },\n  props: {\n    kpis: {\n      type: Array,\n      required: true\n    },\n    title: {\n      type: String,\n      required: true\n    },\n    editable: {\n      type: Boolean,\n      required: true\n    },\n    collapsible: {\n      type: Boolean,\n      required: true\n    },\n    employee: {\n      type: Object,\n      required: true\n    },\n    jobTitle: {\n      type: String,\n      required: true\n    },\n    rules: {\n      type: Array,\n      required: true\n    },\n    modelValue: {\n      type: Object,\n      required: true,\n      validator: value => Object.hasOwn(value, 'kpis') && Object.hasOwn(value, 'generalComment')\n    },\n    collapsed: {\n      type: Boolean,\n      default: false\n    },\n    status: {\n      type: Number,\n      required: true\n    }\n  },\n  emits: ['update:modelValue'],\n  setup(props, context) {\n    const {\n      $t\n    } = usei18n();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const isCollapsed = ref(props.collapsed);\n    const commentValidators = [shouldNotExceedCharLength(2000)];\n    const profileImgSrc = computed(() => {\n      return props.employee.empNumber ? `${window.appGlobal.baseUrl}/pim/viewPhoto/empNumber/${props.employee.empNumber}` : defaultPic;\n    });\n    const employeeName = computed(() => {\n      return $tEmpName(props.employee);\n    });\n    const toggleForm = () => {\n      isCollapsed.value = !isCollapsed.value;\n    };\n    const onUpdateRating = (value, index) => {\n      context.emit('update:modelValue', {\n        kpis: props.modelValue.kpis.map((item, _index) => {\n          if (_index === index) {\n            return {\n              ...item,\n              rating: value\n            };\n          }\n          return item;\n        }),\n        generalComment: props.modelValue.generalComment\n      });\n    };\n    const onUpdateComment = (value, index) => {\n      context.emit('update:modelValue', {\n        kpis: props.modelValue.kpis.map((item, _index) => {\n          if (_index === index) {\n            return {\n              ...item,\n              comment: value\n            };\n          }\n          return item;\n        }),\n        generalComment: props.modelValue.generalComment\n      });\n    };\n    const onUpdateGeneralComment = value => {\n      context.emit('update:modelValue', {\n        kpis: props.modelValue.kpis,\n        generalComment: value\n      });\n    };\n    const statusOpts = [{\n      id: 1,\n      label: $t('performance.evaluation_activated')\n    }, {\n      id: 2,\n      label: $t('performance.evaluation_in_progress')\n    }, {\n      id: 3,\n      label: $t('performance.evaluation_completed')\n    }];\n    const evaluationLabel = computed(() => statusOpts.find(el => el.id === props.status).label);\n    return {\n      toggleForm,\n      isCollapsed,\n      employeeName,\n      profileImgSrc,\n      onUpdateRating,\n      onUpdateComment,\n      onUpdateGeneralComment,\n      commentValidators,\n      evaluationLabel\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
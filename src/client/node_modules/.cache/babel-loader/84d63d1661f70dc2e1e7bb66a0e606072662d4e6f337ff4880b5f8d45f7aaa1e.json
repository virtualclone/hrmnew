{"ast":null,"code":"import { computed, ref } from 'vue';\nimport { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\nexport default {\n  name: 'LeaveEntitlementTable',\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog\n  },\n  props: {\n    prefetch: {\n      type: Boolean,\n      default: true\n    },\n    employee: {\n      type: Object,\n      required: false,\n      default: () => null\n    },\n    leaveType: {\n      type: Object,\n      required: false,\n      default: () => null\n    },\n    leavePeriod: {\n      type: Object,\n      required: false,\n      default: () => null\n    }\n  },\n  setup(props) {\n    const filters = ref({\n      leaveType: props.leaveType ? props.leaveType : null,\n      leavePeriod: props.leavePeriod ? props.leavePeriod : null,\n      employee: props.employee ? {\n        id: props.employee.empNumber,\n        label: `${props.employee.firstName} ${props.employee.middleName} ${props.employee.lastName}`,\n        isPastEmployee: props.employee.terminationId\n      } : null\n    });\n    const serializedFilters = computed(() => {\n      return {\n        empNumber: filters.value.employee?.id,\n        leaveTypeId: filters.value.leaveType?.id,\n        fromDate: filters.value.leavePeriod?.startDate,\n        toDate: filters.value.leavePeriod?.endDate\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/leave/leave-entitlements');\n    const {\n      $t\n    } = usei18n();\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const entitlementNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          leaveType: item.leaveType.name + `${item.leaveType.deleted ? $t('general.deleted') : ''}`,\n          entitlementType: item.entitlementType.name,\n          fromDate: formatDate(parseDate(item.fromDate), jsDateFormat, {\n            locale\n          }),\n          toDate: formatDate(parseDate(item.toDate), jsDateFormat, {\n            locale\n          }),\n          days: item.entitlement,\n          isSelectable: item.deletable\n        };\n      });\n    };\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: entitlementNormalizer,\n      prefetch: props.employee || props.prefetch\n    });\n    const totalEntitlements = computed(() => {\n      const sum = response.value.meta?.sum ? response.value.meta.sum : 0;\n      return `Total ${parseFloat(sum).toFixed(2)} Day(s)`;\n    });\n    const showDatatable = computed(() => response.value.data !== undefined);\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      filters,\n      totalEntitlements,\n      showDatatable\n    };\n  },\n  data() {\n    return {\n      checkedItems: []\n    };\n  },\n  computed: {\n    headers() {\n      const headers = [{\n        name: 'leaveType',\n        slot: 'title',\n        title: this.$t('leave.leave_type'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'entitlementType',\n        title: this.$t('leave.entitlement_type'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'fromDate',\n        title: this.$t('leave.valid_from'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'toDate',\n        title: this.$t('leave.valid_to'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'days',\n        title: this.$t('leave.days'),\n        style: {\n          flex: 1\n        }\n      }];\n      const headerActions = {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {}\n      };\n      if (this.$can.delete(`leave_entitlements`)) {\n        headerActions.cellConfig.delete = {\n          onClick: this.onClickDelete,\n          component: 'oxd-icon-button',\n          props: {\n            name: 'trash'\n          }\n        };\n      }\n      if (this.$can.update(`leave_entitlements`)) {\n        headerActions.cellConfig.edit = {\n          onClick: this.onClickEdit,\n          props: {\n            name: 'pencil-fill'\n          }\n        };\n      }\n      return Object.keys(headerActions.cellConfig).length > 0 ? headers.concat([headerActions]) : headers;\n    }\n  },\n  methods: {\n    onClickAdd() {\n      navigate('/leave/addLeaveEntitlement');\n    },\n    onClickEdit(item) {\n      navigate('/leave/editLeaveEntitlement/{id}', {\n        id: item.id\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      if (!item.isSelectable) {\n        return this.$toast.error({\n          title: this.$t('general.error'),\n          message: this.$t('leave.entitlements_will_not_be_deleted_since_already_in_use')\n        });\n      }\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { promiseDebounce } from '@ohrm/oxd';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePasswordPolicy from '@/core/util/composable/usePasswordPolicy';\nimport PasswordStrengthIndicator from '@/core/components/labels/PasswordStrengthIndicator';\nexport default {\n  name: 'PasswordInput',\n  components: {\n    'password-strength-indicator': PasswordStrengthIndicator\n  },\n  props: {\n    password: {\n      type: String,\n      required: true\n    },\n    passwordConfirm: {\n      type: String,\n      required: true\n    }\n  },\n  emits: ['update:password', 'update:passwordConfirm'],\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    const {\n      passwordStrength,\n      validatePassword\n    } = usePasswordPolicy(http);\n    return {\n      passwordStrength,\n      validatePassword\n    };\n  },\n  data() {\n    return {\n      rules: {\n        password: [required, shouldNotExceedCharLength(64), promiseDebounce(this.validatePassword, 500)],\n        passwordConfirm: [required, shouldNotExceedCharLength(64), v => !!v && v === this.password || this.$t('general.passwords_do_not_match')]\n      }\n    };\n  },\n  watch: {\n    password(value) {\n      if (!!this.passwordConfirm && value !== this.passwordConfirm || !!this.passwordConfirm && value === this.passwordConfirm) {\n        this.$nextTick(this.$refs.passwordConfirm.triggerUpdate);\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { APIService } from '@ohrm/core/util/services/api.service';\nimport { required, validDateFormat } from '@/core/util/validation/rules';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { OxdDialog } from '@ohrm/oxd';\nimport { shouldNotExceedCharLength, digitsOnlyWithDecimalPoint, maxCurrency, digitsOnlyWithTwoDecimalPoints } from '@ohrm/core/util/validation/rules';\nimport ClaimExpenseTypeDropdown from './ClaimExpenseTypeDropdown.vue';\nconst expenseModel = {\n  expenseType: null,\n  date: null,\n  amount: null,\n  note: null\n};\nexport default {\n  name: 'EditExpense',\n  components: {\n    'oxd-dialog': OxdDialog,\n    'claim-expense-type-dropdown': ClaimExpenseTypeDropdown\n  },\n  props: {\n    data: {\n      type: Object,\n      required: true\n    },\n    requestId: {\n      type: Number,\n      required: true\n    }\n  },\n  emits: ['close'],\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `api/v2/claim/requests/${props.requestId}/expenses`);\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      http,\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      selectedOption: {},\n      expense: {\n        ...expenseModel\n      },\n      rules: {\n        type: [required],\n        date: [required, validDateFormat(this.userDateFormat)],\n        note: [shouldNotExceedCharLength(1000)],\n        amount: [required, digitsOnlyWithDecimalPoint, maxCurrency(10000000000), digitsOnlyWithTwoDecimalPoints]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.data.id).then(response => {\n      const {\n        data\n      } = response.data;\n      this.expense = data;\n      this.expense.amount = parseFloat(data.amount).toFixed(2);\n      this.selectedOption = {\n        id: data.expenseType.id,\n        label: data.expenseType.isDeleted ? `${data.expenseType.name} (${this.$t('general.deleted')})` : !data.expenseType.status ? `${data.expenseType.name} (${this.$t('performance.inactive')})` : data.expenseType.name\n      };\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.data.id, {\n        expenseTypeId: this.selectedOption.id,\n        date: this.expense.date,\n        amount: Number(this.expense.amount).toFixed(2),\n        note: this.expense.note\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.expense = {\n          ...expenseModel\n        };\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
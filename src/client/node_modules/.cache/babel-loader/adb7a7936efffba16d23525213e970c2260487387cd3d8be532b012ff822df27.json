{"ast":null,"code":"import useToast from '@/core/util/composable/useToast';\nimport { APIService } from '@/core/util/services/api.service';\nimport { onBeforeMount, reactive, ref, toRefs, watch } from 'vue';\nimport PostBody from '@/orangehrmBuzzPlugin/components/PostBody.vue';\nimport PostStats from '@/orangehrmBuzzPlugin/components/PostStats.vue';\nimport CreatePost from '@/orangehrmBuzzPlugin/components/CreatePost.vue';\nimport useInfiniteScroll from '@/core/util/composable/useInfiniteScroll';\nimport PostActions from '@/orangehrmBuzzPlugin/components/PostActions.vue';\nimport useBuzzAPIs from '@/orangehrmBuzzPlugin/util/composable/useBuzzAPIs';\nimport EditPostModal from '@/orangehrmBuzzPlugin/components/EditPostModal.vue';\nimport PhotoCarousel from '@/orangehrmBuzzPlugin/components/PhotoCarousel.vue';\nimport PostContainer from '@/orangehrmBuzzPlugin/components/PostContainer.vue';\nimport SharePostModal from '@/orangehrmBuzzPlugin/components/SharePostModal.vue';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport PostCommentContainer from '@/orangehrmBuzzPlugin/components/PostCommentContainer.vue';\nimport { OxdSpinner } from '@ohrm/oxd';\nexport default {\n  name: 'NewsFeed',\n  components: {\n    'post-body': PostBody,\n    'post-stats': PostStats,\n    'create-post': CreatePost,\n    'post-actions': PostActions,\n    'oxd-loading-spinner': OxdSpinner,\n    'photo-carousel': PhotoCarousel,\n    'post-container': PostContainer,\n    'edit-post-modal': EditPostModal,\n    'share-post-modal': SharePostModal,\n    'post-comment-container': PostCommentContainer,\n    'delete-confirmation': DeleteConfirmationDialog\n  },\n  props: {\n    employee: {\n      type: Object,\n      required: true\n    },\n    sortField: {\n      type: String,\n      required: true\n    },\n    mobile: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const POST_LIMIT = 10;\n    const deleteDialog = ref();\n    const {\n      deleteSuccess\n    } = useToast();\n    const {\n      fetchPosts,\n      deletePost\n    } = useBuzzAPIs(new APIService(window.appGlobal.baseUrl, ''));\n    const noPostsPic = `${window.appGlobal.publicPath}/images/buzz_no_posts.svg`;\n    const state = reactive({\n      total: 0,\n      offset: 0,\n      posts: [],\n      isLoading: false,\n      showEditModal: false,\n      editModalState: null,\n      showShareModal: false,\n      shareModalState: null,\n      showPhotoCarousel: false,\n      photoCarouselState: null\n    });\n    const fetchData = () => {\n      state.isLoading = true;\n      fetchPosts(POST_LIMIT, state.offset, 'DESC', props.sortField).then(response => {\n        const {\n          data,\n          meta\n        } = response.data;\n        state.total = meta.total || 0;\n        if (Array.isArray(data)) {\n          state.posts = [...state.posts, ...data];\n        }\n      }).finally(() => state.isLoading = false);\n    };\n    useInfiniteScroll(() => {\n      if (state.posts.length >= state.total) return;\n      state.offset += POST_LIMIT;\n      fetchData();\n    });\n    const onLike = index => {\n      state.posts[index].liked = !state.posts[index].liked;\n      if (state.posts[index].liked) {\n        state.posts[index].stats.numOfLikes++;\n      } else {\n        state.posts[index].stats.numOfLikes--;\n      }\n    };\n    const onEdit = index => {\n      state.showEditModal = true;\n      state.editModalState = {\n        postIndex: index,\n        post: state.posts[index]\n      };\n      document.body.style.overflow = 'hidden';\n    };\n    const onShare = index => {\n      state.showShareModal = true;\n      state.shareModalState = state.posts[index];\n      document.body.style.overflow = 'hidden';\n    };\n    const onComment = index => {\n      if (state.posts[index].showComments) {\n        state.posts[index].showComments = false;\n      } else {\n        state.posts[index].showComments = true;\n      }\n    };\n    const resetFeed = () => {\n      state.posts = [];\n      state.offset = 0;\n      fetchData();\n    };\n    const onSelectPhoto = ($event, index) => {\n      state.photoCarouselState = {\n        postIndex: index,\n        photoIndex: $event,\n        post: state.posts[index]\n      };\n      state.showPhotoCarousel = true;\n      document.body.style.overflow = 'hidden';\n    };\n    const onClosePhotoCarousel = () => {\n      state.showPhotoCarousel = false;\n      state.photoCarouselState = null;\n      document.body.style.overflow = 'auto';\n    };\n    const onCloseShareModal = $event => {\n      state.showShareModal = false;\n      state.shareModalState = null;\n      document.body.style.overflow = 'auto';\n      if ($event) resetFeed();\n    };\n    const onCloseEditModal = $event => {\n      const {\n        data\n      } = $event;\n      if (data) state.posts[state.editModalState.postIndex] = {\n        ...data\n      };\n      state.showEditModal = false;\n      state.editModalState = null;\n      document.body.style.overflow = 'auto';\n    };\n    const onDelete = index => {\n      deleteDialog.value.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          deletePost(state.posts[index].id).then(() => {\n            resetFeed();\n            deleteSuccess();\n          });\n        }\n      });\n    };\n    const onCreateComment = index => {\n      state.posts[index].stats.numOfComments++;\n    };\n    const onDeleteComment = index => {\n      state.posts[index].stats.numOfComments--;\n    };\n    onBeforeMount(() => fetchData());\n    watch(() => props.sortField, () => {\n      state.posts = [];\n      state.offset = 0;\n      fetchData();\n    });\n    return {\n      onLike,\n      onEdit,\n      onShare,\n      onDelete,\n      resetFeed,\n      onComment,\n      noPostsPic,\n      deleteDialog,\n      onSelectPhoto,\n      onCreateComment,\n      onDeleteComment,\n      onCloseEditModal,\n      onCloseShareModal,\n      onClosePhotoCarousel,\n      ...toRefs(state)\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
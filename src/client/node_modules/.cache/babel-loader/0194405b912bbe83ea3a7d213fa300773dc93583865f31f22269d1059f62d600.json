{"ast":null,"code":"import usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport ProfileActionHeader from '@/orangehrmPimPlugin/components/ProfileActionHeader';\nimport EditEmployeeLayout from '@/orangehrmPimPlugin/components/EditEmployeeLayout';\nimport SaveImmigration from '@/orangehrmPimPlugin/components/SaveImmigration';\nimport EditImmigration from '@/orangehrmPimPlugin/components/EditImmigration';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\nexport default {\n  components: {\n    'profile-action-header': ProfileActionHeader,\n    'edit-employee-layout': EditEmployeeLayout,\n    'save-immigration': SaveImmigration,\n    'edit-immigration': EditImmigration,\n    'delete-confirmation': DeleteConfirmationDialog\n  },\n  props: {\n    empNumber: {\n      type: String,\n      required: true\n    },\n    countries: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/pim/employees/${props.empNumber}/immigrations`);\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const immigrationNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          type: item.type == 1 ? 'Passport' : 'VISA',\n          number: item.number,\n          countryCode: item.country.code,\n          countryName: item.country.name,\n          issuedDate: formatDate(parseDate(item.issuedDate), jsDateFormat, {\n            locale\n          }),\n          expiryDate: formatDate(parseDate(item.expiryDate), jsDateFormat, {\n            locale\n          })\n        };\n      });\n    };\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      normalizer: immigrationNormalizer,\n      toastNoRecords: false\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'type',\n        slot: 'title',\n        title: this.$t('pim.document'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'number',\n        title: this.$t('pim.number'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'countryName',\n        title: this.$t('pim.issued_by'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'issuedDate',\n        title: this.$t('pim.issued_date'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'expiryDate',\n        title: this.$t('general.expiry_date'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          delete: {\n            onClick: this.onClickDelete,\n            component: 'oxd-icon-button',\n            props: {\n              name: 'trash'\n            }\n          },\n          edit: {\n            onClick: this.onClickEdit,\n            props: {\n              name: 'pencil-fill'\n            }\n          }\n        }\n      }],\n      checkedItems: [],\n      showSaveModal: false,\n      showEditModal: false,\n      editModalState: null\n    };\n  },\n  computed: {\n    isDisabled() {\n      return this.showSaveModal || this.showEditModal;\n    }\n  },\n  methods: {\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    onClickAdd() {\n      this.showEditModal = false;\n      this.editModalState = null;\n      this.showSaveModal = true;\n    },\n    onClickEdit(item) {\n      this.showSaveModal = false;\n      this.editModalState = item;\n      this.showEditModal = true;\n    },\n    onSaveModalClose() {\n      this.showSaveModal = false;\n      this.resetDataTable();\n    },\n    onEditModalClose() {\n      this.showEditModal = false;\n      this.editModalState = null;\n      this.resetDataTable();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { required, shouldNotExceedCharLength } from '@/core/util/validation/rules';\nimport { computed, reactive, toRefs } from 'vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useToast from '@/core/util/composable/useToast';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { APIService } from '@/core/util/services/api.service';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport PostModal from '@/orangehrmBuzzPlugin/components/PostModal';\nimport PhotoFrame from '@/orangehrmBuzzPlugin/components/PhotoFrame';\nimport VideoFrame from '@/orangehrmBuzzPlugin/components/VideoFrame';\nimport PhotoInput from '@/orangehrmBuzzPlugin/components/PhotoInput';\nimport useBuzzAPIs from '@/orangehrmBuzzPlugin/util/composable/useBuzzAPIs';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport { OxdBuzzPostInput, promiseDebounce } from '@ohrm/oxd';\nexport default {\n  name: 'EditPostModal',\n  components: {\n    'post-modal': PostModal,\n    'photo-frame': PhotoFrame,\n    'photo-input': PhotoInput,\n    'video-frame': VideoFrame,\n    'oxd-buzz-post-input': OxdBuzzPostInput\n  },\n  props: {\n    data: {\n      type: Object,\n      required: true\n    }\n  },\n  emits: ['close'],\n  setup(props, context) {\n    const {\n      $t\n    } = usei18n();\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat,\n      jsTimeFormat\n    } = useDateFormat();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    const {\n      updateSuccess\n    } = useToast();\n    const {\n      updatePost,\n      updateSharedPost\n    } = useBuzzAPIs(http);\n    const state = reactive({\n      post: {\n        text: props.data.text,\n        type: props.data.type,\n        photos: props.data.photoIds || [],\n        video: props.data.video?.link || null\n      },\n      isLoading: false,\n      embedURL: props.data.video?.link || null\n    });\n    const onSubmit = () => {\n      let type = 'text';\n      state.isLoading = true;\n      if (state.post.photos.length > 0) {\n        type = 'photo';\n      }\n      if (state.post.video) {\n        type = 'video';\n      }\n      new Promise(resolve => {\n        if (props.data.originalPost) {\n          resolve(updateSharedPost(props.data.id, state.post.text));\n        } else {\n          resolve(updatePost(props.data.post.id, {\n            type: type,\n            text: state.post.text,\n            link: state.post.video,\n            photos: state.post.photos.filter(id => typeof id === 'object'),\n            deletedPhotos: (props.data.photoIds || []).filter(id => {\n              return state.post.photos.findIndex(photo => photo === id) === -1;\n            })\n          }));\n        }\n      }).then(response => {\n        updateSuccess();\n        context.emit('close', response.data);\n      });\n    };\n    const rules = {\n      url: [required, promiseDebounce(async value => {\n        if (!value) return true;\n        state.embedURL = null;\n        const response = await http.request({\n          method: 'GET',\n          url: '/api/v2/buzz/validation/links',\n          params: {\n            url: value\n          }\n        });\n        const {\n          data\n        } = response.data;\n        if (data?.valid === true) {\n          state.embedURL = data.embeddedURL;\n          return true;\n        } else {\n          return $t('general.invalid_video_url_message');\n        }\n      }, 500)],\n      text: [shouldNotExceedCharLength(65530), value => {\n        if (props.data.type === 'video' || state.post.photos.length > 0) {\n          return true;\n        }\n        return required(value);\n      }]\n    };\n    const originalPost = computed(() => {\n      const originalText = props.data.originalPost?.text;\n      const originalEmployee = props.data.originalPost?.employee;\n      const {\n        createdDate,\n        createdTime\n      } = props.data.originalPost;\n      const utcDate = parseDate(`${createdDate} ${createdTime} +00:00`, 'yyyy-MM-dd HH:mm xxx');\n      return {\n        text: originalText,\n        employee: $tEmpName(originalEmployee, {\n          includeMiddle: true,\n          excludePastEmpTag: false\n        }),\n        dateTime: formatDate(utcDate, `${jsDateFormat} ${jsTimeFormat}`, {\n          locale\n        })\n      };\n    });\n    return {\n      rules,\n      onSubmit,\n      originalPost,\n      ...toRefs(state)\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
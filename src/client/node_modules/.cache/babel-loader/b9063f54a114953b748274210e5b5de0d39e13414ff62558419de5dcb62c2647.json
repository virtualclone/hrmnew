{"ast":null,"code":"import { shouldNotExceedCharLength, max, digitsOnly } from '@ohrm/core/util/validation/rules';\nconst skillModel = {\n  yearsOfExperience: 0,\n  comments: '',\n  name: ''\n};\nexport default {\n  name: 'EditSkill',\n  props: {\n    http: {\n      type: Object,\n      required: true\n    },\n    data: {\n      type: Object,\n      required: true\n    }\n  },\n  emits: ['close'],\n  data() {\n    return {\n      isLoading: false,\n      skill: {\n        ...skillModel\n      },\n      rules: {\n        yearsOfExperience: [digitsOnly, max(100)],\n        comments: [shouldNotExceedCharLength(100)]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.data.id).then(response => {\n      const {\n        data\n      } = response.data;\n      this.skill.name = data.skill.name;\n      this.skill.comments = data.comments;\n      this.skill.yearsOfExperience = data.yearsOfExperience;\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.data.id, {\n        yearsOfExperience: parseInt(this.skill.yearsOfExperience),\n        comments: this.skill.comments !== '' ? this.skill.comments : ''\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
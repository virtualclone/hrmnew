{"ast":null,"code":"import { computed, ref } from 'vue';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@ohrm/core/util/helper/datefns';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport CandidateRecords from '@/orangehrmMaintenancePlugin/components/CandidateRecords';\nexport default {\n  name: 'SelectedCandidates',\n  components: {\n    'purge-candidate-records': CandidateRecords\n  },\n  props: {\n    loading: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: ['purge'],\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/maintenance/candidates');\n    const vacancy = ref(null);\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const serializedFilters = computed(() => {\n      return {\n        vacancyId: vacancy.value\n      };\n    });\n    const purgeCandidateNormalizer = data => {\n      return data.map(item => {\n        return {\n          name: $tEmpName({\n            firstName: item.firstName,\n            middleName: item.middleName,\n            lastName: item.lastName,\n            terminationId: null\n          }, {\n            includeMiddle: true\n          }),\n          date: formatDate(parseDate(item.dateOfApplication), jsDateFormat, {\n            locale\n          }),\n          status: item.status.label\n        };\n      });\n    };\n    const {\n      total,\n      pages,\n      response,\n      isLoading,\n      currentPage,\n      showPaginator,\n      execQuery\n    } = usePaginate(http, {\n      prefetch: false,\n      query: serializedFilters,\n      normalizer: purgeCandidateNormalizer\n    });\n    return {\n      http,\n      total,\n      pages,\n      vacancy,\n      isLoading,\n      currentPage,\n      showPaginator,\n      items: response,\n      execQuery\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'name',\n        title: this.$t('recruitment.candidate_name'),\n        style: {\n          flex: '45%'\n        }\n      }, {\n        name: 'date',\n        title: this.$t('recruitment.date_of_application'),\n        style: {\n          flex: '45%'\n        }\n      }, {\n        name: 'status',\n        title: this.$t('general.status'),\n        style: {\n          flex: '10%'\n        }\n      }]\n    };\n  },\n  methods: {\n    onClickSearch(vacancy) {\n      this.vacancy = vacancy;\n      this.execQuery();\n    },\n    onClickPurge() {\n      if (this.vacancy) this.$emit('purge', this.vacancy);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
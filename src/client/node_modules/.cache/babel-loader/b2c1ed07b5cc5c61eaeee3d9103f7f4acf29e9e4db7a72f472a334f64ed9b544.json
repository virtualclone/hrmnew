{"ast":null,"code":"import { APIService } from '@ohrm/core/util/services/api.service';\nimport { reloadPage } from '@ohrm/core/util/helper/navigation';\nimport { required } from '@/core/util/validation/rules';\nimport { addDays, formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useLocale from '@/core/util/composable/useLocale';\nconst leavePeriodModel = {\n  startMonth: null,\n  startDay: null,\n  currentPeriod: null\n};\nexport default {\n  props: {\n    monthDates: {\n      type: Object,\n      required: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/leave/leave-period');\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    return {\n      http,\n      jsDateFormat,\n      locale\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      leavePeriod: {\n        ...leavePeriodModel\n      },\n      leavePeriodDefined: true,\n      rules: {\n        startMonth: [required],\n        startDay: [required]\n      }\n    };\n  },\n  computed: {\n    months() {\n      return Array(12).fill('').map((...[, index]) => {\n        return {\n          id: index + 1,\n          label: this.locale.localize.month(index, {\n            width: 'wide'\n          })\n        };\n      });\n    },\n    dates() {\n      return (this.monthDates[this.leavePeriod.startMonth?.id] ?? []).map(day => {\n        return {\n          id: day,\n          label: String(day).padStart(2, '0')\n        };\n      });\n    },\n    endDay() {\n      const month = this.leavePeriod.startMonth?.id;\n      const date = this.leavePeriod.startDay?.id;\n      const year = new Date().getFullYear();\n      if (month && date) {\n        const endDay = addDays(new Date(year, month - 1, date), 364);\n        const isFollowingYear = endDay.getFullYear() > year;\n        return formatDate(endDay, 'LLLL dd', {\n          locale: this.locale\n        }) + (isFollowingYear ? ` (${this.$t('leave.following_year')})` : '');\n      }\n      return '-';\n    }\n  },\n  watch: {\n    'leavePeriod.startMonth': function () {\n      this.leavePeriod.startDay = this.dates.length > 0 ? this.dates[0] : null;\n    }\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.request({\n      method: 'GET'\n    }).then(response => {\n      const {\n        data,\n        meta\n      } = response.data;\n      this.updateLeavePeriodModel(data);\n      this.defineLeavePeriod(meta);\n      this.resetLeavePeriod();\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.request({\n        method: 'PUT',\n        data: {\n          startMonth: this.leavePeriod.startMonth?.id,\n          startDay: this.leavePeriod.startDay?.id\n        }\n      }).then(response => {\n        const {\n          data,\n          meta\n        } = response.data;\n        this.updateLeavePeriodModel(data);\n        this.defineLeavePeriod(meta);\n        this.resetLeavePeriod();\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.isLoading = false;\n        if (!this.leavePeriodDefined) {\n          reloadPage();\n        }\n      });\n    },\n    onClickReset() {\n      this.resetLeavePeriod();\n    },\n    resetLeavePeriod() {\n      this.leavePeriod.startMonth = leavePeriodModel.startMonth;\n      this.$nextTick(() => {\n        this.leavePeriod.startDay = leavePeriodModel.startDay;\n      });\n    },\n    updateLeavePeriodModel(data) {\n      leavePeriodModel.startMonth = this.months.find(m => {\n        return m.id === data.startMonth;\n      });\n      this.$nextTick(() => {\n        leavePeriodModel.startDay = this.dates.find(d => {\n          return d.id === data.startDay;\n        });\n      });\n    },\n    defineLeavePeriod(meta) {\n      if (meta.leavePeriodDefined === true) {\n        this.leavePeriodDefined = meta.leavePeriodDefined;\n        const startDate = formatDate(parseDate(meta.currentLeavePeriod.startDate), this.jsDateFormat, {\n          locale: this.locale\n        });\n        const endDate = formatDate(parseDate(meta.currentLeavePeriod.endDate), this.jsDateFormat, {\n          locale: this.locale\n        });\n        this.leavePeriod.currentPeriod = `${startDate} ${this.$t('general.to').toLowerCase()} ${endDate}`;\n      } else {\n        this.leavePeriodDefined = false;\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
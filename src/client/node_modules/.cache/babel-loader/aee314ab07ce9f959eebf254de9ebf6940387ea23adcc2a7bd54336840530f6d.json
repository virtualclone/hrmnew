{"ast":null,"code":"import InlineActionButton from '@/orangehrmAdminPlugin/components/InlineActionButton.vue';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport SavePayCurrency from '@/orangehrmAdminPlugin/pages/payGrade/SavePayCurrency.vue';\nimport EditPayCurrency from '@/orangehrmAdminPlugin/pages/payGrade/EditPayCurrency.vue';\nimport DeleteConfirmationDialog from '@/core/components/dialogs/DeleteConfirmationDialog';\nconst PayGradeCurrencyNormalizer = data => {\n  return data.map(item => {\n    return {\n      id: item.currencyType.id,\n      name: item.currencyType.name,\n      maxSalary: item.maxSalary ? parseFloat(item.maxSalary).toFixed(2) : '0.00',\n      minSalary: item.minSalary ? parseFloat(item.minSalary).toFixed(2) : '0.00'\n    };\n  });\n};\nexport default {\n  name: 'PayGradeCurrency',\n  components: {\n    'inline-action-button': InlineActionButton,\n    'save-pay-currency': SavePayCurrency,\n    'edit-pay-currency': EditPayCurrency,\n    'delete-confirmation': DeleteConfirmationDialog\n  },\n  props: {\n    payGradeId: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/admin/pay-grades/${props.payGradeId}/currencies`);\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      normalizer: PayGradeCurrencyNormalizer\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'name',\n        slot: 'title',\n        title: this.$t('general.currency'),\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'minSalary',\n        title: this.$t('admin.minimum_salary'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'maxSalary',\n        title: this.$t('admin.maximum_salary'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          delete: {\n            onClick: this.onClickDelete,\n            component: 'oxd-icon-button',\n            props: {\n              name: 'trash'\n            }\n          },\n          edit: {\n            onClick: this.onClickEdit,\n            props: {\n              name: 'pencil-fill'\n            }\n          }\n        }\n      }],\n      checkedItems: [],\n      showSaveModal: false,\n      showEditModal: false,\n      editModalState: null\n    };\n  },\n  computed: {\n    selectable() {\n      return !(this.showSaveModal || this.showEditModal);\n    }\n  },\n  methods: {\n    onclickAdd() {\n      this.showEditModal = false;\n      this.editModalState = null;\n      this.showSaveModal = true;\n    },\n    onClickDelete(item) {\n      if (!this.selectable) return;\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    onClickDeleteSelected() {\n      if (!this.selectable) return;\n      const ids = this.checkedItems.map(index => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    onSaveModalClose() {\n      this.showSaveModal = false;\n      this.resetDataTable();\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    onClickEdit(item) {\n      this.showSaveModal = false;\n      this.editModalState = item;\n      this.showEditModal = true;\n    },\n    onEditModalClose() {\n      this.showEditModal = false;\n      this.editModalState = null;\n      this.resetDataTable();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { required, shouldNotExceedCharLength, validDateFormat, endDateShouldBeAfterStartDate } from '@ohrm/core/util/validation/rules';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nconst workExpModel = {\n  company: '',\n  jobTitle: '',\n  fromDate: '',\n  toDate: '',\n  comment: ''\n};\nexport default {\n  name: 'SaveWorkExperience',\n  props: {\n    http: {\n      type: Object,\n      required: true\n    }\n  },\n  emits: ['close'],\n  setup() {\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      workExperience: {\n        ...workExpModel\n      },\n      rules: {\n        company: [required, shouldNotExceedCharLength(100)],\n        jobTitle: [required, shouldNotExceedCharLength(100)],\n        fromDate: [validDateFormat(this.userDateFormat)],\n        toDate: [validDateFormat(this.userDateFormat), endDateShouldBeAfterStartDate(() => this.workExperience.fromDate, this.$t('general.to_date_should_be_after_from_date'))],\n        comment: [shouldNotExceedCharLength(200)]\n      }\n    };\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        ...this.workExperience\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
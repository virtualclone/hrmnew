{"ast":null,"code":"import { navigate } from '@/core/util/helper/navigation';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport SupervisorAutoComplete from '@/orangehrmPerformancePlugin/components/SupervisorAutoComplete';\nimport { APIService } from '@/core/util/services/api.service';\nimport { required, validSelection, validDateFormat, endDateShouldBeAfterStartDate, startDateShouldBeBeforeEndDate } from '@/core/util/validation/rules';\nimport useForm from '@/core/util/composable/useForm';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nconst reviewModel = {\n  employee: null,\n  supervisorReviewer: null,\n  startDate: null,\n  endDate: null,\n  dueDate: null\n};\nexport default {\n  components: {\n    'employee-autocomplete': EmployeeAutocomplete,\n    'supervisor-autocomplete': SupervisorAutoComplete\n  },\n  setup() {\n    const {\n      formRef,\n      invalid,\n      validate\n    } = useForm();\n    const {\n      userDateFormat\n    } = useDateFormat();\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/performance/manage/reviews');\n    http.setIgnorePath('/api/v2/performance/manage/reviews');\n    return {\n      formRef,\n      invalid,\n      validate,\n      http,\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      review: {\n        ...reviewModel\n      },\n      rules: {\n        employee: [required, validSelection],\n        supervisorReviewer: [required, validSelection],\n        startDate: [required, validDateFormat(this.userDateFormat), startDateShouldBeBeforeEndDate(() => this.review.endDate, this.$t('performance.review_period_start_date_should_be_before_end_date'))],\n        endDate: [required, validDateFormat(this.userDateFormat), endDateShouldBeAfterStartDate(() => this.review.startDate, this.$t('performance.review_period_end_date_should_be_after_start_date'))],\n        dueDate: [required, validDateFormat(), endDateShouldBeAfterStartDate(() => this.review.endDate, this.$t('performance.due_date_should_be_after_review_period_end_date'))]\n      }\n    };\n  },\n  methods: {\n    onCancel() {\n      navigate('/performance/searchPerformanceReview');\n    },\n    onSave(activate = false) {\n      this.validate().then(() => {\n        if (this.invalid === true) return;\n        this.isLoading = true;\n        this.http.create({\n          empNumber: this.review.employee.id,\n          reviewerEmpNumber: this.review.supervisorReviewer.id,\n          startDate: this.review.startDate,\n          endDate: this.review.endDate,\n          dueDate: this.review.dueDate,\n          activate\n        }).then(() => {\n          if (activate === true) {\n            return this.$toast.success({\n              title: this.$t('general.success'),\n              message: this.$t('general.successfully_activated')\n            });\n          } else {\n            return this.$toast.updateSuccess();\n          }\n        }).then(() => {\n          this.onCancel();\n        }).catch(response => {\n          return this.$toast.warn({\n            title: this.$t('general.warning'),\n            message: response?.data.error.message\n          });\n        }).finally(() => {\n          this.isLoading = false;\n        });\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport { required, max, validSelection } from '@/core/util/validation/rules';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport LeaveTypeDropdown from '@/orangehrmLeavePlugin/components/LeaveTypeDropdown';\nimport LeavePeriodDropdown from '@/orangehrmLeavePlugin/components/LeavePeriodDropdown';\nimport EntitlementUpdateModal from '@/orangehrmLeavePlugin/components/EntitlementUpdateModal';\nimport EntitlementBulkUpdateModal from '@/orangehrmLeavePlugin/components/EntitlementBulkUpdateModal';\nimport EntitlementNoMatchModal from '@/orangehrmLeavePlugin/components/EntitlementNoMatchModal';\nconst leaveEntitlementModel = {\n  bulkAssign: 0,\n  employee: null,\n  leaveType: null,\n  leavePeriod: null,\n  entitlement: '',\n  subunit: null,\n  location: null\n};\nexport default {\n  components: {\n    'leave-type-dropdown': LeaveTypeDropdown,\n    'leave-period-dropdown': LeavePeriodDropdown,\n    'employee-autocomplete': EmployeeAutocomplete,\n    'entitlement-update-modal': EntitlementUpdateModal,\n    'entitlement-bulk-update-modal': EntitlementBulkUpdateModal,\n    'entitlement-no-match-modal': EntitlementNoMatchModal\n  },\n  props: {\n    locations: {\n      type: Array,\n      default: () => []\n    },\n    subunits: {\n      type: Array,\n      default: () => []\n    },\n    leavePeriod: {\n      type: Object,\n      required: false,\n      default: () => null\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/leave/leave-entitlements');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      leaveEntitlement: {\n        ...leaveEntitlementModel\n      },\n      leavePeriodDefined: false,\n      rules: {\n        employee: [required, validSelection],\n        leaveType: [required],\n        leavePeriod: [required],\n        entitlement: [required, v => {\n          return /^\\d+(\\.\\d{1,2})?$/.test(v) || this.$t('leave.should_be_a_number_with_2_decimal_places');\n        }, max(10000)]\n      },\n      empMatchCount: 0\n    };\n  },\n  watch: {\n    'leaveEntitlement.location': 'fetchEmployeeCount',\n    'leaveEntitlement.subunit': 'fetchEmployeeCount'\n  },\n  beforeMount() {\n    this.fetchEmployeeCount();\n    if (this.leavePeriod) {\n      this.leaveEntitlement.leavePeriod = this.leavePeriod;\n    }\n  },\n  methods: {\n    onCancel() {\n      navigate('/leave/viewLeaveEntitlements');\n    },\n    async onSave() {\n      let confirmation = null;\n      this.isLoading = true;\n      const isBulkAssign = this.leaveEntitlement.bulkAssign == 1;\n      if (isBulkAssign) {\n        if (this.empMatchCount === 0) {\n          this.isLoading = false;\n          return this.$refs.noMatchModal.showDialog();\n        }\n        confirmation = await this.$refs.bulkUpdateModal.showDialog();\n      } else {\n        confirmation = await this.$refs.updateModal.showDialog();\n      }\n      if (confirmation !== 'ok') {\n        this.isLoading = false;\n        return;\n      }\n      const payload = {\n        empNumber: undefined,\n        bulkAssign: undefined,\n        locationId: undefined,\n        subunitId: undefined,\n        leaveTypeId: this.leaveEntitlement.leaveType?.id,\n        fromDate: this.leaveEntitlement.leavePeriod?.startDate,\n        toDate: this.leaveEntitlement.leavePeriod?.endDate,\n        entitlement: this.leaveEntitlement.entitlement\n      };\n      if (isBulkAssign) {\n        payload.bulkAssign = true;\n        payload.locationId = this.leaveEntitlement.location?.id;\n        payload.subunitId = this.leaveEntitlement.subunit?.id;\n      } else {\n        payload.empNumber = this.leaveEntitlement.employee?.id;\n      }\n      this.http.create(payload).then(response => {\n        let toast = null;\n        let params = null;\n        const {\n          data\n        } = response.data;\n        if (Array.isArray(data)) {\n          toast = this.$toast.success({\n            title: this.$t('general.success'),\n            message: this.$t('leave.entitlement_added_to_n_employees', {\n              count: data.length\n            })\n          });\n        } else {\n          params = {\n            empNumber: data.employee.empNumber,\n            leaveTypeId: data.leaveType.id,\n            startDate: data.fromDate,\n            endDate: data.toDate\n          };\n          toast = this.$toast.saveSuccess();\n        }\n        return new Promise(resolve => {\n          toast.then(() => {\n            resolve(params);\n          });\n        });\n      }).then(params => {\n        if (params) {\n          navigate('/leave/viewLeaveEntitlements', undefined, params);\n        } else {\n          navigate('/leave/viewLeaveEntitlements');\n        }\n      });\n    },\n    async fetchEmployeeCount() {\n      this.http.request({\n        method: 'GET',\n        url: '/api/v2/pim/employees/count',\n        params: {\n          locationId: this.leaveEntitlement.location?.id,\n          subunitId: this.leaveEntitlement.subunit?.id\n        }\n      }).then(response => {\n        const {\n          data\n        } = response.data;\n        this.empMatchCount = parseInt(data.count);\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
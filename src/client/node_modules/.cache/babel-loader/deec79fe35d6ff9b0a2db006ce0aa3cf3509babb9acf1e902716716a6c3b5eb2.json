{"ast":null,"code":"import { required, shouldNotExceedCharLength } from '@/core/util/validation/rules';\nimport { reactive, toRefs } from 'vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport { APIService } from '@/core/util/services/api.service';\nimport PostModal from '@/orangehrmBuzzPlugin/components/PostModal.vue';\nimport VideoFrame from '@/orangehrmBuzzPlugin/components/VideoFrame.vue';\nimport { OxdBuzzPostInput, promiseDebounce } from '@ohrm/oxd';\nexport default {\n  name: 'ShareVideoModal',\n  components: {\n    'post-modal': PostModal,\n    'video-frame': VideoFrame,\n    'oxd-buzz-post-input': OxdBuzzPostInput\n  },\n  props: {\n    text: {\n      type: String,\n      default: null\n    }\n  },\n  emits: ['close'],\n  setup(props, context) {\n    const {\n      $t\n    } = usei18n();\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/buzz/posts');\n    const state = reactive({\n      post: {\n        text: props.text || null,\n        url: null\n      },\n      embedURL: null,\n      isLoading: false\n    });\n    const rules = {\n      url: [required, promiseDebounce(async value => {\n        if (!value) return true;\n        state.embedURL = null;\n        const response = await http.request({\n          method: 'GET',\n          url: '/api/v2/buzz/validation/links',\n          params: {\n            url: value\n          }\n        });\n        const {\n          data\n        } = response.data;\n        if (data?.valid === true) {\n          state.embedURL = data.embeddedURL;\n          return true;\n        } else {\n          return $t('general.invalid_video_url_message');\n        }\n      }, 500)],\n      text: [shouldNotExceedCharLength(65530)]\n    };\n    const onSubmit = () => {\n      state.isLoading = true;\n      http.create({\n        type: 'video',\n        link: state.post.url,\n        text: state.post.text\n      }).then(() => context.emit('close', true));\n    };\n    return {\n      rules,\n      onSubmit,\n      ...toRefs(state)\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { promiseDebounce } from '@ohrm/oxd';\nimport CardNote from '../components/CardNote';\nimport { urlFor } from '@/core/util/helper/url';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePasswordPolicy from '@/core/util/composable/usePasswordPolicy';\nimport PasswordStrengthIndicator from '@/core/components/labels/PasswordStrengthIndicator';\nexport default {\n  name: 'ResetPassword',\n  components: {\n    'card-note': CardNote,\n    'password-strength-indicator': PasswordStrengthIndicator\n  },\n  props: {\n    username: {\n      type: String,\n      required: true\n    },\n    token: {\n      type: String,\n      required: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    const {\n      passwordStrength,\n      validatePassword\n    } = usePasswordPolicy(http);\n    return {\n      http,\n      passwordStrength,\n      validatePassword\n    };\n  },\n  data() {\n    return {\n      user: {\n        username: '',\n        newPassword: '',\n        confirmPassword: ''\n      },\n      rules: {\n        newPassword: [required, shouldNotExceedCharLength(64), promiseDebounce(this.validatePassword, 500)],\n        confirmPassword: [required, shouldNotExceedCharLength(64), v => !!v && v === this.user.newPassword || this.$t('general.passwords_do_not_match')]\n      }\n    };\n  },\n  computed: {\n    submitUrl() {\n      return urlFor('/auth/resetPassword');\n    }\n  },\n  methods: {\n    onSubmit() {\n      this.$refs.resetForm.$el.submit();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
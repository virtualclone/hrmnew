{"ast":null,"code":"import { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport { APIService } from '@/core/util/services/api.service';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { OxdSpinner } from '@ohrm/oxd';\nexport default {\n  name: 'LdapSyncConnection',\n  components: {\n    'oxd-loading-spinner': OxdSpinner\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/admin/ldap/user-sync');\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    return {\n      http,\n      jsDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      lastSyncDate: null,\n      lastSyncTime: null,\n      lastSyncStatus: null\n    };\n  },\n  computed: {\n    lastSync() {\n      if (this.lastSyncStatus === 2) return null;\n      if (this.lastSyncDate && this.lastSyncTime) {\n        const parsedDateTime = parseDate(`${this.lastSyncDate} ${this.lastSyncTime} +00:00`, 'yyyy-MM-dd HH:mm xxx');\n        return this.$t(this.lastSyncStatus === 1 ? 'admin.last_synced_on_datetime' : 'admin.last_sync_failed_on_datetime', {\n          datetime: formatDate(parsedDateTime, `hh:mm a ${this.jsDateFormat}`)\n        });\n      } else {\n        return null;\n      }\n    }\n  },\n  beforeMount() {\n    this.getLastSyncStatus();\n  },\n  methods: {\n    getLastSyncStatus() {\n      this.isLoading = true;\n      this.http.getAll().then(response => {\n        const {\n          data\n        } = response.data;\n        this.lastSyncStatus = data.syncStatus;\n        this.lastSyncDate = data.syncFinishedAt?.date || data.syncStartedAt?.date;\n        this.lastSyncTime = data.syncFinishedAt?.time || data.syncStartedAt?.time;\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    },\n    onClickSync() {\n      this.isLoading = true;\n      this.http.create().then(response => {\n        const {\n          data\n        } = response.data;\n        this.lastSyncStatus = data.syncStatus;\n        this.lastSyncDate = data.syncFinishedAt?.date || data.syncStartedAt?.date;\n        this.lastSyncTime = data.syncFinishedAt?.time || data.syncStartedAt?.time;\n        this.$toast.success({\n          title: this.$t('general.success'),\n          message: this.$t('admin.synchronization_successful')\n        });\n      }).catch(() => {\n        this.getLastSyncStatus();\n        this.$toast.error({\n          title: this.$t('general.error'),\n          message: this.$t('admin.synchronization_failed')\n        });\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
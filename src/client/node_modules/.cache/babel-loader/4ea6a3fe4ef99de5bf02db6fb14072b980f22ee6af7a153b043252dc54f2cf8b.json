{"ast":null,"code":"import { ref, onBeforeMount } from 'vue';\nimport { required } from '@ohrm/core/util/validation/rules';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nexport default {\n  name: 'ReportCriterionSelect',\n  inheritAttrs: false,\n  props: {\n    api: {\n      type: String,\n      required: false,\n      default: null\n    },\n    options: {\n      type: Array,\n      default: () => []\n    },\n    valueX: {\n      type: Object,\n      required: false,\n      default: () => null\n    }\n  },\n  emits: ['update:valueX', 'update:operator'],\n  setup(props, context) {\n    const opts = ref(props.options);\n    const rules = [required];\n    if (props.api) {\n      const http = new APIService(window.appGlobal.baseUrl, props.api);\n      onBeforeMount(() => {\n        http.getAll({\n          ...(props.api !== '/api/v2/admin/subunits' && {\n            limit: 0\n          })\n        }).then(({\n          data\n        }) => {\n          opts.value = data.data.map(item => {\n            return {\n              id: item.id,\n              label: item.name ? item.name : item.title,\n              _indent: item.level ? item.level + 1 : 1\n            };\n          });\n        });\n      });\n    }\n    if (props.api === '/api/v2/admin/locations' || props.api === '/api/v2/admin/subunits') {\n      context.emit('update:operator', {\n        id: 'in',\n        label: 'Equal'\n      });\n    } else {\n      context.emit('update:operator', {\n        id: 'eq',\n        label: 'Equal'\n      });\n    }\n    return {\n      opts,\n      rules\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
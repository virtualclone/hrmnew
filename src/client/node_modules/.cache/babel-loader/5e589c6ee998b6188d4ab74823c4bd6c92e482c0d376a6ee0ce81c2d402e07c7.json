{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog.vue';\nimport { convertFilesizeToString } from '@ohrm/core/util/helper/filesize';\nimport AddAttachmentModal from './AddAttachmentModal.vue';\nimport EditAttachmentModal from './EditAttachmentModal.vue';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { formatDate, parseDate } from '@ohrm/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nexport default {\n  name: 'ClaimAttachment',\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog,\n    'add-attachment-modal': AddAttachmentModal,\n    'edit-attachment-modal': EditAttachmentModal\n  },\n  props: {\n    requestId: {\n      type: Number,\n      required: true\n    },\n    canEdit: {\n      type: Boolean,\n      required: true\n    },\n    allowedFileTypes: {\n      type: Array,\n      required: true\n    },\n    maxFileSize: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/claim/requests/${props.requestId}/attachments`);\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const attachmentDataNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          attachedDate: item.date ? formatDate(parseDate(item.date), jsDateFormat, {\n            locale\n          }) : '',\n          filename: item.attachment.fileName ?? '',\n          size: item.attachment.size ? convertFilesizeToString(item.attachment.size, 2) : '',\n          fileType: item.attachment.fileType ? item.attachment.fileType : '',\n          description: item.attachment.description ? item.attachment.description : '',\n          attachedByName: $tEmpName(item.attachedBy, {\n            excludePastEmpTag: false\n          })\n        };\n      });\n    };\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      normalizer: attachmentDataNormalizer,\n      toastNoRecords: false\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'filename',\n        slot: 'title',\n        cellType: 'oxd-table-cell-truncate',\n        title: this.$t('general.file_name'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'description',\n        title: this.$t('general.description'),\n        cellType: 'oxd-table-cell-truncate',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'size',\n        title: this.$t('general.size'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'fileType',\n        title: this.$t('general.type'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'attachedDate',\n        title: this.$t('pim.date_added'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'attachedByName',\n        title: this.$t('pim.added_by'),\n        style: {\n          flex: 1\n        }\n      }],\n      checkedItems: [],\n      editModalState: null,\n      showAddAttachmentModal: false,\n      showEditAttachmentModal: false\n    };\n  },\n  computed: {\n    tableHeaders() {\n      let computedHeaders = this.headers;\n      if (computedHeaders.length > 6) {\n        computedHeaders.pop();\n      }\n      const headerActions = {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {}\n      };\n      if (this.canEdit) {\n        headerActions.cellConfig.delete = {\n          onClick: this.onClickDelete,\n          component: 'oxd-icon-button',\n          props: {\n            name: 'trash'\n          }\n        };\n        headerActions.cellConfig.edit = {\n          onClick: this.onClickEdit,\n          props: {\n            name: 'pencil-fill'\n          }\n        };\n      }\n      headerActions.cellConfig.download = {\n        onClick: this.onClickDownload,\n        props: {\n          name: 'download'\n        }\n      };\n      computedHeaders.push(headerActions);\n      return computedHeaders;\n    }\n  },\n  methods: {\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    onClickAdd() {\n      this.showAddAttachmentModal = true;\n      this.showEditAttachmentModal = false;\n    },\n    onClickDeleteSelected() {\n      const ids = [];\n      this.checkedItems.forEach(index => {\n        ids.push(this.items?.data[index].id);\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    onClickEdit(item) {\n      this.showAddAttachmentModal = false;\n      this.editModalState = item;\n      this.showEditAttachmentModal = true;\n    },\n    onCloseAddAttachmentModal() {\n      this.showAddAttachmentModal = false;\n      this.reloadAttachments();\n    },\n    onCloseEditAttachmentModal() {\n      this.showEditAttachmentModal = false;\n      this.reloadAttachments();\n    },\n    async reloadAttachments() {\n      await this.execQuery();\n    },\n    onClickDownload(item) {\n      const downUrl = `${window.appGlobal.baseUrl}/claim/requests/${this.requestId}/attachId/${item.id}`;\n      window.open(downUrl, '_blank');\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
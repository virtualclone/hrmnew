{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { computed, ref, inject } from 'vue';\nimport { navigate } from '@/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport { validSelection, validDateFormat, endDateShouldBeAfterStartDate, startDateShouldBeBeforeEndDate } from '@/core/util/validation/rules';\nimport { viewIcon, editIcon, evaluateIcon, viewLabel, editLabel, evaluateLabel } from '@/orangehrmPerformancePlugin/util/composable/useReviewActions';\nimport { formatDate, parseDate } from '@ohrm/core/util/helper/datefns';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useLocale from '@/core/util/composable/useLocale';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport JobtitleDropdown from '@/orangehrmPimPlugin/components/JobtitleDropdown';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport ReviewStatusDropdown from '@/orangehrmPerformancePlugin/components/ReviewStatusDropdown';\nimport IncludeEmployeeDropdown from '@/core/components/dropdown/IncludeEmployeeDropdown';\nimport ReviewPeriodCell from '@/orangehrmPerformancePlugin/components/ReviewPeriodCell';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport { tableScreenStateKey } from '@ohrm/oxd';\nconst defaultSortOrder = {\n  'employee.lastName': 'DEFAULT',\n  'performanceReview.reviewPeriodStart': 'DEFAULT',\n  'performanceReview.dueDate': 'DEFAULT',\n  'performanceReview.statusId': 'ASC',\n  'jobTitle.jobTitleName': 'DEFAULT',\n  'reviewerEmployee.lastName': 'DEFAULT'\n};\nexport default {\n  name: 'ReviewSearch',\n  components: {\n    'include-employee-dropdown': IncludeEmployeeDropdown,\n    'review-status-dropdown': ReviewStatusDropdown,\n    'jobtitle-dropdown': JobtitleDropdown,\n    'employee-autocomplete': EmployeeAutocomplete,\n    'delete-confirmation-dialog': DeleteConfirmationDialog\n  },\n  props: {\n    fromDate: {\n      type: String,\n      required: false,\n      default: null\n    },\n    toDate: {\n      type: String,\n      required: false,\n      default: null\n    }\n  },\n  setup(props) {\n    const {\n      $t\n    } = usei18n();\n    const {\n      jsDateFormat,\n      userDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const reviewListDateFormat = date => formatDate(parseDate(date), jsDateFormat, {\n      locale\n    });\n    const statusOpts = [{\n      id: 1,\n      label: $t('performance.inactive')\n    }, {\n      id: 2,\n      label: $t('performance.activated')\n    }, {\n      id: 3,\n      label: $t('performance.in_progress')\n    }, {\n      id: 4,\n      label: $t('performance.completed')\n    }];\n    const reviewListNormalizer = data => {\n      return data.map(item => {\n        const employee = item.employee;\n        const reviewer = item.reviewer?.employee;\n        return {\n          id: item.id,\n          employee: $tEmpName(employee),\n          reviewer: $tEmpName(reviewer),\n          jobTitle: item.jobTitle?.name,\n          reviewPeriod: {\n            reviewPeriodStart: reviewListDateFormat(item.reviewPeriodStart),\n            reviewPeriodEnd: reviewListDateFormat(item.reviewPeriodEnd)\n          },\n          dueDate: reviewListDateFormat(item.dueDate),\n          status: statusOpts.find(el => el.id === item.overallStatus.statusId).label,\n          statusId: item.overallStatus.statusId\n        };\n      });\n    };\n    const defaultFilters = {\n      employee: null,\n      jobTitle: null,\n      status: null,\n      reviewer: null,\n      fromDate: null,\n      toDate: null,\n      includeEmployees: {\n        id: 1,\n        param: 'onlyCurrent',\n        label: $t('general.current_employees_only')\n      }\n    };\n    const filters = ref({\n      ...defaultFilters,\n      ...(props.fromDate && {\n        fromDate: props.fromDate\n      }),\n      ...(props.toDate && {\n        toDate: props.toDate\n      })\n    });\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilters = computed(() => {\n      return {\n        sortField: sortField.value,\n        sortOrder: sortOrder.value,\n        empNumber: filters.value.employee?.id,\n        jobTitleId: filters.value.jobTitle?.id,\n        statusId: filters.value.status?.id,\n        reviewerEmpNumber: filters.value.reviewer?.id,\n        fromDate: filters.value.fromDate,\n        toDate: filters.value.toDate,\n        includeEmployees: filters.value.includeEmployees?.param\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/performance/manage/reviews');\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: reviewListNormalizer\n    });\n    onSort(execQuery);\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      filters,\n      sortDefinition,\n      statusOpts,\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'employee',\n        title: this.$t('general.employee'),\n        slot: 'title',\n        sortField: 'employee.lastName',\n        style: {\n          flex: '14%'\n        }\n      }, {\n        name: 'jobTitle',\n        title: this.$t('general.job_title'),\n        sortField: 'jobTitle.jobTitleName',\n        style: {\n          flex: '14%'\n        }\n      }, {\n        name: 'reviewPeriod',\n        title: this.$t('performance.review_period'),\n        sortField: 'performanceReview.reviewPeriodStart',\n        style: {\n          flex: '14%'\n        },\n        cellRenderer: this.reviewPeriodCellRenderer\n      }, {\n        name: 'dueDate',\n        title: this.$t('performance.due_date'),\n        sortField: 'performanceReview.dueDate',\n        style: {\n          flex: '14%'\n        }\n      }, {\n        name: 'reviewer',\n        title: this.$t('performance.reviewer'),\n        sortField: 'reviewerEmployee.lastName',\n        style: {\n          flex: '14%'\n        }\n      }, {\n        name: 'status',\n        title: this.$t('performance.review_status'),\n        sortField: 'performanceReview.statusId',\n        style: {\n          flex: '14%'\n        }\n      }, {\n        name: 'action',\n        slot: 'footer',\n        title: this.$t('general.actions'),\n        cellType: 'oxd-table-cell-actions',\n        cellRenderer: this.actionButtonCellRenderer,\n        style: {\n          flex: '16%'\n        }\n      }],\n      checkedItems: [],\n      rules: {\n        employee: [validSelection],\n        fromDate: [validDateFormat(this.userDateFormat), startDateShouldBeBeforeEndDate(() => this.filters.toDate, this.$t('general.from_date_should_be_before_to_date'), {\n          allowSameDate: true\n        })],\n        toDate: [validDateFormat(this.userDateFormat), endDateShouldBeAfterStartDate(() => this.filters.fromDate, this.$t('general.to_date_should_be_after_from_date'), {\n          allowSameDate: true\n        })]\n      }\n    };\n  },\n  methods: {\n    actionButtonCellRenderer(...[,,, row]) {\n      const cellConfig = {};\n      const screenState = inject(tableScreenStateKey);\n      cellConfig.delete = {\n        onClick: this.onClickDelete,\n        component: 'oxd-icon-button',\n        props: {\n          name: 'trash'\n        }\n      };\n      if (screenState.screenType === 'lg' || screenState.screenType === 'xl') {\n        if (row.statusId === 4) {\n          cellConfig.view = viewIcon;\n          cellConfig.view.props.title = this.$t('general.view');\n          cellConfig.view.onClick = this.onClickEvaluate;\n        } else if (row.statusId === 1) {\n          cellConfig.edit = editIcon;\n          cellConfig.edit.props.title = this.$t('general.edit');\n          cellConfig.edit.onClick = this.onClickEdit;\n        } else {\n          cellConfig.evaluate = evaluateIcon;\n          cellConfig.evaluate.props.title = this.$t('performance.evaluate');\n          cellConfig.evaluate.onClick = this.onClickEvaluate;\n        }\n      } else {\n        if (row.statusId === 4) {\n          cellConfig.view = viewLabel;\n          cellConfig.view.props.label = this.$t('general.view');\n          cellConfig.view.onClick = this.onClickEvaluate;\n        } else if (row.statusId === 1) {\n          cellConfig.edit = editLabel;\n          cellConfig.edit.props.label = this.$t('general.edit');\n          cellConfig.edit.onClick = this.onClickEdit;\n        } else {\n          cellConfig.evaluate = evaluateLabel;\n          cellConfig.evaluate.props.label = this.$t('performance.evaluate');\n          cellConfig.evaluate.onClick = this.onClickEvaluate;\n        }\n      }\n      return {\n        props: {\n          header: {\n            cellConfig\n          }\n        }\n      };\n    },\n    reviewPeriodCellRenderer(...args) {\n      const cellData = args[1];\n      return {\n        component: ReviewPeriodCell,\n        props: {\n          reviewPeriodStart: cellData.reviewPeriodStart,\n          reviewPeriodEnd: cellData.reviewPeriodEnd\n        }\n      };\n    },\n    onClickEdit(item) {\n      navigate('/performance/saveReview/{id}', {\n        id: item.id\n      });\n    },\n    onClickAdd() {\n      navigate('/performance/saveReview');\n    },\n    onClickEvaluate(item) {\n      navigate('/performance/reviewEvaluateByAdmin/{id}', {\n        id: item.id\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = [];\n      this.checkedItems.forEach(index => {\n        ids.push(this.items?.data[index].id);\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
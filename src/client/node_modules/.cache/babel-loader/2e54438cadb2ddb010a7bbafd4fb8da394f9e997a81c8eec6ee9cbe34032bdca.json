{"ast":null,"code":"import { required, validDateFormat, endDateShouldBeAfterStartDate, digitsOnlyWithDecimalPoint, maxCurrency } from '@ohrm/core/util/validation/rules';\nimport { yearRange } from '@ohrm/core/util/helper/year-range';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nconst membershipModel = {\n  membershipId: [],\n  subscriptionFee: '',\n  subscriptionPaidBy: null,\n  currencyTypeId: [],\n  subscriptionCommenceDate: '',\n  subscriptionRenewalDate: ''\n};\nexport default {\n  name: 'SaveMembership',\n  props: {\n    http: {\n      type: Object,\n      required: true\n    },\n    currencies: {\n      type: Array,\n      default: () => []\n    },\n    paidBy: {\n      type: Array,\n      default: () => []\n    },\n    memberships: {\n      type: Array,\n      default: () => []\n    }\n  },\n  emits: ['close'],\n  setup() {\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      membership: {\n        ...membershipModel\n      },\n      yearArray: [...yearRange()],\n      rules: {\n        membership: [required],\n        subscriptionCommenceDate: [validDateFormat(this.userDateFormat)],\n        subscriptionRenewalDate: [validDateFormat(this.userDateFormat), endDateShouldBeAfterStartDate(() => this.membership.subscriptionCommenceDate, this.$t('pim.renewal_date_should_be_after_the_commencing_date'))],\n        subscriptionFee: [digitsOnlyWithDecimalPoint, maxCurrency(1000000000)]\n      }\n    };\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        subscriptionFee: this.membership.subscriptionFee,\n        subscriptionCommenceDate: this.membership.subscriptionCommenceDate,\n        subscriptionRenewalDate: this.membership.subscriptionRenewalDate,\n        membershipId: this.membership.membership.id,\n        subscriptionPaidBy: this.membership.subscriptionPaidBy?.id,\n        currencyTypeId: this.membership.currencyType?.id\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.membership = {\n          ...membershipModel\n        };\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
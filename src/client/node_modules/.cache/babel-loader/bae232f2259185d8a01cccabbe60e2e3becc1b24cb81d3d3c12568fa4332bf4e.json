{"ast":null,"code":"import { required, validDateFormat, shouldNotExceedCharLength, startDateShouldBeBeforeEndDate } from '@/core/util/validation/rules';\nimport { yearRange } from '@ohrm/core/util/helper/year-range';\nimport { diffInDays } from '@ohrm/core/util/helper/datefns';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport useForm from '@ohrm/core/util/composable/useForm';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useCompOffValidators from '@/orangehrmLeavePlugin/util/composable/useCompoffValidators';\nimport CompensatoryConflict from '@/orangehrmLeavePlugin/components/CompensatoryConflict';\nimport useLocale from '@/core/util/composable/useLocale';\nconst compensatoryModel = {\n  applyDate: null,\n  comment: '',\n  duration: {\n    type: null\n  },\n  lengthHours: null,\n  lengthDays: null,\n  expireDate: null,\n  durationLabel: null\n};\nexport default {\n  name: 'CompensatoryApply',\n  components: {\n    'compensatory-conflict': CompensatoryConflict\n  },\n  props: {\n    workShift: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/leave/compensatory-off');\n    const {\n      validateOverlapCompoff\n    } = useCompOffValidators(http);\n    const {\n      formRef,\n      reset\n    } = useForm();\n    const {\n      userDateFormat,\n      isDateInFuture\n    } = useDateFormat();\n    return {\n      http,\n      reset,\n      formRef,\n      userDateFormat,\n      validateOverlapCompoff\n    };\n  },\n  data() {\n    return {\n      selectedDate: null,\n      isLoading: false,\n      compensatory: {\n        ...compensatoryModel\n      },\n      rules: {\n        type: [required],\n        applyDate: [required, validDateFormat(this.userDateFormat)],\n        comment: [shouldNotExceedCharLength(250)]\n      },\n      durationOptions: [{\n        id: 1,\n        label: 'Full Day',\n        key: 'full_day'\n      }, {\n        id: 2,\n        label: 'Half Day',\n        key: 'half_day'\n      }],\n      showCompensatoryConflict: false,\n      isWorkShiftExceeded: false,\n      compConflictData: null\n    };\n  },\n  watch: {\n    'compensatory.applyDate': function (applyDate) {\n      const currentDate = new Date();\n      const selectedDate = new Date(applyDate);\n      if (!applyDate) {\n        this.compensatory.expireDate = null;\n        return;\n      }\n      if (selectedDate > currentDate) {\n        this.$toast.warn({\n          title: this.$t('general.warning'),\n          message: this.$t('Select Valid Date')\n        });\n      }\n\n      // Calculate expire date as one month after selected date\n\n      const expireDate = new Date(selectedDate);\n      expireDate.setMonth(expireDate.getMonth() + 1);\n      this.compensatory.expireDate = expireDate.toISOString().substr(0, 10);\n    }\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.showCompensatoryConflict = false;\n      this.compConflictData = null;\n      //console.log(this.compensatory.applyDate)\n      if (this.compensatory.duration.type.id === 1) {\n        this.compensatory.lengthHours = 8.00;\n        this.compensatory.lengthDays = 1.000;\n        this.compensatory.durationLabel = this.compensatory.duration.type.key;\n      } else {\n        this.compensatory.lengthHours = 4.00;\n        this.compensatory.lengthDays = 0.5000;\n        this.compensatory.durationLabel = this.compensatory.duration.type.key;\n      }\n      this.validateOverlapCompoff(this.compensatory).then(({\n        isConflict,\n        isOverWorkshift,\n        data\n      }) => {\n        if (isConflict) {\n          this.compConflictData = data;\n          this.showCompensatoryConflict = true;\n          this.isWorkShiftExceeded = isOverWorkshift;\n          return Promise.reject();\n        }\n        return this.http.create({\n          applyDate: this.compensatory.applyDate,\n          comment: this.compensatory.comment,\n          duration: this.compensatory.duration.type.key,\n          lengthHours: this.compensatory.lengthHours,\n          lengthDays: this.compensatory.lengthDays,\n          expireDate: this.compensatory.expireDate\n        });\n      }).then(() => {\n        this.$toast.saveSuccess();\n        this.reset();\n      }).catch(() => {\n        this.showCompensatoryConflict && this.$toast.warn({\n          title: this.$t('general.warning'),\n          message: this.$t('leave.failed_to_submit')\n        });\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
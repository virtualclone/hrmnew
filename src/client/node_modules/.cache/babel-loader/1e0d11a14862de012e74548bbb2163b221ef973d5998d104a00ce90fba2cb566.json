{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport { OxdDialog } from '@ohrm/oxd';\nimport { required, shouldNotExceedCharLength, validDateFormat } from '@ohrm/core/util/validation/rules';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nconst terminationModel = {\n  terminationReason: null,\n  date: '',\n  note: null\n};\nexport default {\n  name: 'TerminateModal',\n  components: {\n    'oxd-dialog': OxdDialog\n  },\n  props: {\n    employeeId: {\n      type: String,\n      required: true\n    },\n    terminationReasons: {\n      type: Array,\n      required: true\n    },\n    terminationId: {\n      type: Number,\n      required: false,\n      default: null\n    }\n  },\n  emits: ['close'],\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/pim/employees/${props.employeeId}/terminations`);\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      http,\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      termination: {\n        ...terminationModel\n      },\n      rules: {\n        terminationReason: [required],\n        date: [required, validDateFormat(this.userDateFormat)],\n        note: [shouldNotExceedCharLength(250)]\n      }\n    };\n  },\n  beforeMount() {\n    if (this.terminationId) {\n      this.isLoading = true;\n      this.http.get(this.terminationId).then(response => {\n        const {\n          data\n        } = response.data;\n        this.termination.terminationReason = this.terminationReasons.find(item => item.id === data.terminationReason?.id);\n        this.termination.date = data.date;\n        this.termination.note = data.note;\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    }\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      const payload = {\n        date: this.termination.date,\n        note: this.termination.note,\n        terminationReasonId: this.termination.terminationReason?.id\n      };\n      this.submitData(payload, this.terminationId).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel(true);\n      });\n    },\n    async submitData(payload, id) {\n      return !id ? this.http.create(payload) : this.http.update(id, payload);\n    },\n    onCancel(reload) {\n      this.$emit('close', reload);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
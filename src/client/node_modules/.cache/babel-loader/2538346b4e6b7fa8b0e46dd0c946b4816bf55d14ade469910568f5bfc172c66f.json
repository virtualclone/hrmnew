{"ast":null,"code":"import { computed, onBeforeMount, ref, watch } from 'vue';\nimport { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport { CellAdapter, OxdMultilineCell, OxdReportTable } from '@ohrm/oxd';\nexport default {\n  name: 'ReportsTable',\n  components: {\n    'oxd-report-table': OxdReportTable\n  },\n  props: {\n    name: {\n      type: String,\n      required: true\n    },\n    module: {\n      type: String,\n      required: true\n    },\n    prefetch: {\n      type: Boolean,\n      default: false\n    },\n    filters: {\n      type: Object,\n      default: () => ({})\n    },\n    columnCount: {\n      type: Number,\n      default: null,\n      required: false\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/${props.module}/reports/data`);\n    const headers = ref([]);\n    const colCount = ref(props.columnCount ? props.columnCount : 0);\n    const serializedFilters = computed(() => {\n      return {\n        ...props.filters,\n        name: props.name,\n        _dateFormattingEnabled: true\n      };\n    });\n    const {\n      total,\n      pages,\n      response,\n      isLoading,\n      currentPage,\n      showPaginator,\n      execQuery: fetchTableData\n    } = usePaginate(http, {\n      query: serializedFilters,\n      prefetch: false\n    });\n    const items = computed(() => {\n      const _items = Array.isArray(response.value.data) ? response.value.data : [];\n      return _items.map(item => {\n        let _rows = 0;\n        for (const key in item) {\n          const value = item[key];\n          if (Array.isArray(value) && value.length > _rows) _rows = value.length;\n        }\n        return {\n          ...item,\n          _rows\n        };\n      });\n    });\n    const setupTableHeaders = header => {\n      delete header['size'];\n      const {\n        type,\n        ...rest\n      } = header.cellProperties ?? {};\n      const cellProperties = function ({\n        prop,\n        model\n      }) {\n        const url = model?._url ? model?._url[prop] : undefined;\n        return {\n          ...rest,\n          onClick: url ? () => navigate(url) : undefined\n        };\n      };\n      return {\n        ...header,\n        cellProperties,\n        cellTemplate: type === 'list' ? CellAdapter(OxdMultilineCell) : undefined\n      };\n    };\n    const fetchTableHeaders = async () => {\n      isLoading.value = true;\n      http.request({\n        method: 'GET',\n        url: `/api/v2/${props.module}/reports`,\n        params: {\n          name: serializedFilters.value.name,\n          reportId: serializedFilters.value?.reportId\n        }\n      }).then(response => {\n        const {\n          data,\n          meta\n        } = response.data;\n        headers.value = data.headers.map(header => {\n          if (header?.children && Array.isArray(header.children)) {\n            header.children = header.children.map(child => setupTableHeaders(child));\n            return header;\n          } else {\n            return setupTableHeaders(header);\n          }\n        });\n        if (meta.headers?.columnCount) {\n          colCount.value = meta.headers.columnCount;\n        }\n        isLoading.value = false;\n      });\n    };\n    const generateReport = async () => {\n      if (headers.value.length === 0) await fetchTableHeaders();\n      await fetchTableData();\n    };\n    watch(() => props.name, () => {\n      headers.value = [];\n    });\n    props.prefetch && onBeforeMount(() => generateReport());\n    return {\n      total,\n      pages,\n      items,\n      headers,\n      colCount,\n      response,\n      isLoading,\n      currentPage,\n      showPaginator,\n      generateReport\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
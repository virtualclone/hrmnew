{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { required, validSelection, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { promiseDebounce } from '@ohrm/oxd';\nimport AddCustomerModal from '@/orangehrmTimePlugin/components/AddCustomerModal.vue';\nimport CustomerAutocomplete from '@/orangehrmTimePlugin/components/CustomerAutocomplete.vue';\nimport ProjectAdminAutocomplete from '@/orangehrmTimePlugin/components/ProjectAdminAutocomplete.vue';\nconst defaultProjectModel = {\n  name: null,\n  customer: null,\n  description: null,\n  projectAdminEmpNumbers: [],\n  forall: false,\n  active: true\n};\nexport default {\n  name: 'ProjectSave',\n  components: {\n    'add-customer-modal': AddCustomerModal,\n    'customer-autocomplete': CustomerAutocomplete,\n    'project-admin-autocomplete': ProjectAdminAutocomplete\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/time/projects');\n    http.setIgnorePath('/api/v2/time/validation/project-name');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      showCustomerModal: false,\n      projectAdmins: [{\n        value: null\n      }],\n      project: {\n        ...defaultProjectModel\n      },\n      projectId: null,\n      rules: {\n        name: [required, shouldNotExceedCharLength(50), promiseDebounce(this.validateProjectName, 500)],\n        description: [shouldNotExceedCharLength(255)],\n        customer: [required, validSelection],\n        projectAdmin: [validSelection, value => {\n          return this.projectAdmins.filter(({\n            value: admin\n          }) => admin && admin.id === value?.id).length < 2 ? true : this.$t('general.already_exists');\n        }]\n      }\n    };\n  },\n  methods: {\n    onClickAddCustomer() {\n      this.showCustomerModal = true;\n    },\n    onCustomerModalClose(data) {\n      if (data !== undefined) {\n        const {\n          id,\n          name\n        } = data;\n        this.project.customer = {\n          id,\n          label: name\n        };\n      }\n      this.showCustomerModal = false;\n    },\n    onAddAnother() {\n      if (this.projectAdmins.length < 5) {\n        this.projectAdmins.push({\n          value: null\n        });\n      }\n    },\n    onRemoveAdmin(index) {\n      this.projectAdmins.splice(index, 1);\n    },\n    onCancel() {\n      navigate('/time/viewProjects');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        name: this.project.name,\n        description: this.project.description,\n        customerId: this.project.customer.id,\n        forall: this.project.forall,\n        active: this.project.active,\n        projectAdminsEmpNumbers: this.projectAdmins.map(({\n          value\n        }) => value && value.id).filter(Number)\n      }).then(result => {\n        this.projectId = result.data?.data.id;\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        navigate('/time/saveProject/{id}', {\n          id: this.projectId\n        });\n      });\n    },\n    validateProjectName(project) {\n      return new Promise(resolve => {\n        if (project) {\n          this.http.request({\n            method: 'GET',\n            url: `/api/v2/time/validation/project-name`,\n            params: {\n              projectName: this.project.name.trim(),\n              customerId: this.project.customer?.id\n            }\n          }).then(response => {\n            const {\n              data\n            } = response.data;\n            return data.valid === true ? resolve(true) : resolve(this.$t('general.already_exists'));\n          });\n        } else {\n          resolve(true);\n        }\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
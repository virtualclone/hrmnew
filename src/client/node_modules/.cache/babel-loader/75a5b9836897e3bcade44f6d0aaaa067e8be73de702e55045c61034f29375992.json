{"ast":null,"code":"import { required, validDateFormat, endDateShouldBeAfterStartDate } from '@/core/util/validation/rules';\nimport { computed, ref } from 'vue';\nimport { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { truncate } from '@ohrm/core/util/helper/truncate';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useLeaveActions from '@/orangehrmLeavePlugin/util/composable/useLeaveActions';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\nconst defaultFilters = {\n  fromDate: null,\n  toDate: null\n};\nexport default {\n  name: 'CompOffListTable',\n  props: {\n    fromDate: {\n      type: String,\n      required: false,\n      default: null\n    },\n    toDate: {\n      type: String,\n      required: false,\n      default: null\n    }\n  },\n  setup(props) {\n    const filters = ref({\n      ...defaultFilters,\n      ...(props.fromDate && {\n        fromDate: props.fromDate\n      }),\n      ...(props.toDate && {\n        toDate: props.toDate\n      })\n    });\n    const {\n      $t\n    } = usei18n();\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat,\n      userDateFormat\n    } = useDateFormat();\n    const rules = {\n      fromDate: [required, validDateFormat(userDateFormat)],\n      toDate: [required, validDateFormat(userDateFormat), endDateShouldBeAfterStartDate(() => filters.value.fromDate, $t('general.to_date_should_be_after_from_date'), {\n        allowSameDate: true\n      })]\n    };\n    const serializedFilters = computed(() => {\n      return {\n        fromDate: filters.value.fromDate,\n        toDate: filters.value.toDate\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/leave/leave-calendar`);\n    const compOfflistNormalizer = data => {\n      if (!data || !Array.isArray(data)) {\n        // Handle the case where data is undefined or not an array\n        return [];\n      }\n      return data[0].map(item => {\n        let arr;\n        arr = item.Approve.split('HD:');\n        if (arr[1] != null) {\n          arr[1] = \"HD: \" + arr[1];\n        }\n        let pen;\n        pen = item.Pending.split('HD:');\n        if (pen[1] != null) {\n          pen[1] = \"HD: \" + pen[1];\n        }\n        const weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        const d = new Date(item.date);\n        let day = weekday[d.getDay()];\n        return {\n          date: item.date,\n          day: day,\n          pendingHalfday: pen[1],\n          approveHalfday: arr[1],\n          pendingFullday: pen[0],\n          approveFullday: arr[0]\n        };\n      });\n    };\n    const {\n      leaveActions,\n      processLeaveRequestAction\n    } = useLeaveActions(http);\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: compOfflistNormalizer\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      rules,\n      filters,\n      leaveActions,\n      processLeaveRequestAction\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'date',\n        title: this.$t('Working Date'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'day',\n        title: this.$t('Working Day'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'pendingHalfday',\n        title: this.$t('Pending HalfDay'),\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'approveHalfday',\n        title: this.$t('Approval HalfDay'),\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'pendingFullday',\n        title: this.$t('Pending FullDay'),\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'approveFullday',\n        title: this.$t('Approval FullDay'),\n        style: {\n          flex: 2\n        }\n      }]\n    };\n  },\n  methods: {\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onReset() {\n      this.filters = {\n        ...defaultFilters\n      };\n      this.resetDataTable();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
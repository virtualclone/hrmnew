{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport { reactive, toRefs, computed } from 'vue';\nimport { formatDate, parseDate } from '@ohrm/core/util/helper/datefns';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useLocale from '@/core/util/composable/useLocale';\nimport useInfiniteScroll from '@/core/util/composable/useInfiniteScroll';\nimport AddTrackerLogModal from '@/orangehrmPerformancePlugin/components/AddTrackerLogModal';\nimport EditTrackerLogModal from '@/orangehrmPerformancePlugin/components/EditTrackerLogModal';\nimport DeleteConfirmationDialog from '@/core/components/dialogs/DeleteConfirmationDialog';\nimport EmployeeTrackerLogCard from '@/orangehrmPerformancePlugin/components/EmployeeTrackerLogCard';\nimport { OxdIcon, OxdSheet, OxdSpinner } from '@ohrm/oxd';\nexport default {\n  name: 'ViewEmployeeTrackerLogs',\n  components: {\n    'oxd-icon': OxdIcon,\n    'oxd-sheet': OxdSheet,\n    'oxd-loading-spinner': OxdSpinner,\n    'add-tracker-log-modal': AddTrackerLogModal,\n    'edit-tracker-log-modal': EditTrackerLogModal,\n    'delete-confirmation': DeleteConfirmationDialog,\n    'employee-tracker-log-card': EmployeeTrackerLogCard\n  },\n  props: {\n    trackerId: {\n      type: Number,\n      required: true\n    },\n    empNumber: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/performance/trackers/${props.trackerId}/logs`);\n    const limit = 10;\n    const state = reactive({\n      total: 0,\n      items: [],\n      meta: {\n        positive: 0,\n        negative: 0\n      },\n      infinite: false,\n      isLoading: false,\n      showNoRecordsFound: false\n    });\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const fetchData = () => {\n      state.showNoRecordsFound = false;\n      state.isLoading = true;\n      http.getAll({\n        limit: limit,\n        offset: state.items.length === 0 ? 0 : limit\n      }).then(response => {\n        const {\n          data,\n          meta\n        } = response.data;\n        state.total = meta?.total || 0;\n        if (Array.isArray(data)) {\n          state.items = [...state.items, ...data.map(item => {\n            return {\n              ...item,\n              reviewerPictureSrc: `${window.appGlobal.baseUrl}/pim/viewPhoto/empNumber/${item.reviewer.empNumber}`,\n              reviewerName: $tEmpName(item.reviewer),\n              addedDate: formatDate(parseDate(item.addedDate), jsDateFormat, {\n                locale\n              }),\n              modifiedDate: formatDate(parseDate(item.modifiedDate), jsDateFormat, {\n                locale\n              })\n            };\n          })];\n          state.meta = {\n            ...state.meta,\n            ...meta\n          };\n        }\n      }).finally(() => {\n        state.showNoRecordsFound = state.total === 0;\n        state.isLoading = false;\n      });\n    };\n    const {\n      scrollerRef\n    } = useInfiniteScroll(() => {\n      if (state.items.length >= state.total) return;\n      fetchData();\n    });\n    const imgSrc = computed(() => {\n      return `${window.appGlobal.baseUrl}/pim/viewPhoto/empNumber/${props.empNumber}`;\n    });\n    return {\n      http,\n      scrollerRef,\n      fetchData,\n      ...toRefs(state),\n      imgSrc\n    };\n  },\n  data() {\n    return {\n      trackerName: '',\n      employeeName: '',\n      showAddTrackerModal: false,\n      showEditTrackerModal: false,\n      editTrackerLogId: null\n    };\n  },\n  beforeMount() {\n    this.http.request({\n      method: 'GET',\n      url: `/api/v2/performance/employees/trackers/${this.trackerId}`\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.trackerName = data.trackerName;\n      this.employeeName = `${data.employee.firstName} ${data.employee.lastName} ${data.employee.terminationId ? ` ${this.$t('general.past_employee')}` : ''}`;\n    }).then(() => {\n      this.fetchData();\n    });\n  },\n  methods: {\n    onClickAdd() {\n      this.showAddTrackerModal = true;\n    },\n    onAddTrackerModalClose() {\n      this.showAddTrackerModal = false;\n      this.resetItems();\n    },\n    onEditTrackerModalClose() {\n      this.showEditTrackerModal = false;\n      this.resetItems();\n    },\n    onClickEdit(id) {\n      this.editTrackerLogId = id;\n      this.showEditTrackerModal = true;\n    },\n    onClickDelete(id) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.items = [];\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).finally(() => {\n          this.fetchData();\n        });\n      }\n    },\n    resetItems() {\n      this.items = [];\n      this.fetchData();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
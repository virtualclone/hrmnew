{"ast":null,"code":"import { ref, computed } from 'vue';\nimport { navigate } from '@/core/util/helper/navigation';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport ReferenceIdAutocomplete from '@/orangehrmClaimPlugin/components/ReferenceIdAutocomplete.vue';\nimport ClaimEventDropdown from '@/orangehrmClaimPlugin/components/ClaimEventDropdown.vue';\nimport StatusDropdown from '@/orangehrmClaimPlugin/components/StatusDropdown.vue';\nimport { validDateFormat } from '@/core/util/validation/rules';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete.vue';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { formatDate, parseDate } from '@ohrm/core/util/helper/datefns';\nimport { validSelection, endDateShouldBeAfterStartDate } from '@/core/util/validation/rules';\nimport IncludeEmployeeDropdownVue from '@ohrm/core/components/dropdown/IncludeEmployeeDropdown.vue';\nimport usei18n from '@/core/util/composable/usei18n';\nconst defaultFilters = {\n  referenceId: '',\n  employee: null,\n  claimEvent: null,\n  status: null,\n  fromDate: null,\n  toDate: null\n};\nconst defaultSortOrder = {\n  'claimRequest.referenceId': 'DESC',\n  'claimRequest.employee.firstName': 'ASC',\n  'claimRequest.claimEvent.name': 'ASC',\n  'claimRequest.status': 'ASC',\n  'claimRequest.submittedDate': 'ASC'\n};\nexport default {\n  components: {\n    'reference-id-autocomplete': ReferenceIdAutocomplete,\n    'claim-event-dropdown': ClaimEventDropdown,\n    'status-dropdown': StatusDropdown,\n    'employee-autocomplete': EmployeeAutocomplete,\n    'include-employee-dropdown': IncludeEmployeeDropdownVue\n  },\n  props: {\n    empNumber: {\n      type: Number,\n      required: true\n    }\n  },\n  setup() {\n    const {\n      $t\n    } = usei18n();\n    const filters = ref({\n      includeEmployees: {\n        id: 1,\n        param: 'onlyCurrent',\n        label: $t('general.current_employees_only')\n      },\n      ...defaultFilters\n    });\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const serializedFilters = computed(() => {\n      return {\n        referenceId: typeof filters.value.referenceId === 'object' && filters.value.referenceId ? filters.value.referenceId.id : typeof filters.value.referenceId === 'string' ? filters.value.referenceId : null,\n        empNumber: filters.value.employee?.id,\n        eventId: filters.value.claimEvent ? filters.value.claimEvent?.id : null,\n        status: filters.value.status ? filters.value.status?.id : null,\n        fromDate: filters.value.fromDate,\n        toDate: filters.value.toDate,\n        includeEmployees: filters.value.includeEmployees?.param,\n        sortField: sortField.value === 'claimRequest.claimEvent.name' ? 'claimEvent.name' : sortField.value,\n        sortOrder: sortOrder.value\n      };\n    });\n    const claimRequestDataNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          referenceId: item.referenceId,\n          employee: $tEmpName(item.employee),\n          eventName: item.claimEvent.name,\n          description: item.description,\n          currency: item.currencyType.name,\n          status: item.status.charAt(0).toUpperCase() + item.status.slice(1).toLowerCase(),\n          submittedDate: formatDate(parseDate(item.submittedDate), jsDateFormat, {\n            locale\n          }),\n          amount: Number(item.amount).toLocaleString('en-US', {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n          })\n        };\n      });\n    };\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/claim/employees/requests');\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      normalizer: claimRequestDataNormalizer,\n      query: serializedFilters\n    });\n    onSort(execQuery);\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      response,\n      filters,\n      sortDefinition,\n      useDateFormat\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'referenceId',\n        title: this.$t('claim.reference_id'),\n        slot: 'title',\n        sortField: 'claimRequest.referenceId',\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'employee',\n        title: this.$t('general.employee_name'),\n        slot: 'title',\n        sortField: 'claimRequest.employee.firstName',\n        style: {\n          flex: 4\n        }\n      }, {\n        name: 'eventName',\n        title: this.$t('claim.event_name'),\n        slot: 'title',\n        cellType: 'oxd-table-cell-truncate',\n        sortField: 'claimRequest.claimEvent.name',\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'description',\n        title: this.$t('general.description'),\n        slot: 'title',\n        cellType: 'oxd-table-cell-truncate',\n        sortField: 'claimRequest.description',\n        style: {\n          flex: 4\n        }\n      }, {\n        name: 'currency',\n        title: this.$t('general.currency'),\n        slot: 'title',\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'submittedDate',\n        title: this.$t('claim.submitted_date'),\n        slot: 'title',\n        sortField: 'claimRequest.submittedDate',\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'status',\n        title: this.$t('general.status'),\n        sortField: 'claimRequest.status',\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'amount',\n        title: this.$t('claim.amount'),\n        slot: 'title',\n        sortField: 'claimRequest.amount',\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'actions',\n        slot: 'right',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 4\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          view: {\n            onClick: this.onClickView,\n            component: 'oxd-button',\n            props: {\n              label: this.$t('claim.view_details'),\n              displayType: 'text',\n              size: 'medium'\n            }\n          }\n        }\n      }],\n      rules: {\n        date: [validDateFormat(this.userDateFormat)],\n        toDate: [validDateFormat(this.userDateFormat), endDateShouldBeAfterStartDate(() => this.filters.fromDate, this.$t('general.to_date_should_be_after_from_date'), {\n          allowSameDate: true\n        })],\n        employee: [validSelection]\n      }\n    };\n  },\n  methods: {\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onClickReset() {\n      this.filters = {\n        ...defaultFilters\n      };\n      this.filterItems();\n    },\n    onClickAdd() {\n      navigate('/claim/assignClaim');\n    },\n    onClickView(item) {\n      navigate('/claim/assignClaim/id/{id}', {\n        id: item.id\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { computed, ref } from 'vue';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport { endDateShouldBeAfterStartDate, required, validDateFormat } from '@/core/util/validation/rules';\nimport { yearRange } from '@ohrm/core/util/helper/year-range';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\nexport default {\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog\n  },\n  props: {\n    leavePeriod: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const filters = ref({\n      fromDate: props.leavePeriod.startDate,\n      toDate: props.leavePeriod.endDate\n    });\n    const serializedFilters = computed(() => {\n      return {\n        fromDate: filters.value.fromDate,\n        toDate: filters.value.toDate\n      };\n    });\n    const {\n      jsDateFormat,\n      userDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const dataNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          name: item.name,\n          date: formatDate(parseDate(item.date), jsDateFormat, {\n            locale\n          }),\n          recurring: item.recurring ? 'Yes' : 'No',\n          length: item.lengthName\n        };\n      });\n    };\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/leave/holidays');\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: dataNormalizer\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      filters,\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      yearArray: [...yearRange(201)],\n      rules: {\n        fromDate: [required, validDateFormat(this.userDateFormat)],\n        toDate: [required, validDateFormat(this.userDateFormat), endDateShouldBeAfterStartDate(() => this.filters.fromDate, this.$t('general.to_date_should_be_after_from_date'), {\n          allowSameDate: true\n        })]\n      },\n      headers: [{\n        name: 'name',\n        slot: 'title',\n        title: this.$t('general.name'),\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'date',\n        title: this.$t('general.date'),\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'length',\n        title: this.$t('leave.full_day_half_day'),\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'recurring',\n        title: this.$t('leave.repeats_annually'),\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'actions',\n        title: this.$t('general.actions'),\n        slot: 'action',\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          delete: {\n            onClick: this.onClickDelete,\n            component: 'oxd-icon-button',\n            props: {\n              name: 'trash'\n            }\n          },\n          edit: {\n            onClick: this.onClickEdit,\n            props: {\n              name: 'pencil-fill'\n            }\n          }\n        }\n      }],\n      checkedItems: []\n    };\n  },\n  methods: {\n    onClickAdd() {\n      navigate('/leave/saveHolidays');\n    },\n    onClickEdit(item) {\n      navigate('/leave/saveHolidays/{id}', {\n        id: item.id\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
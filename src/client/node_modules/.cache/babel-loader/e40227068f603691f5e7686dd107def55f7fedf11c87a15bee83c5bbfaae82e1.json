{"ast":null,"code":"import { toRef, nextTick, computed } from 'vue';\nimport { OxdColorInput, OxdLabel, useField } from '@ohrm/oxd';\nexport default {\n  name: 'InlineColorInput',\n  components: {\n    'oxd-label': OxdLabel,\n    'oxd-color-input': OxdColorInput\n  },\n  inheritAttrs: false,\n  props: {\n    label: {\n      type: String,\n      default: null,\n      required: false\n    },\n    rules: {\n      type: Array,\n      default: () => [],\n      required: false\n    },\n    required: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    modelValue: {\n      type: String,\n      default: null,\n      required: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      required: false\n    }\n  },\n  emits: ['update:modelValue'],\n  setup(props, context) {\n    const disabled = toRef(props, 'disabled');\n    const modelValue = toRef(props, 'modelValue');\n    const initialValue = modelValue.value;\n    const onReset = async () => {\n      context.emit('update:modelValue', initialValue);\n      await nextTick();\n    };\n    const {\n      hasError,\n      message\n    } = useField({\n      fieldLabel: props.label ?? '',\n      rules: props.rules,\n      modelValue,\n      onReset,\n      disabled\n    });\n    const classes = computed(() => ({\n      label: {\n        'oxd-input-field-required': props.required\n      },\n      message: {\n        'oxd-input-field-error-message': hasError\n      },\n      wrapper: {\n        'orangehrm-color-input-wrapper': true\n      }\n    }));\n    return {\n      classes,\n      message,\n      hasError\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
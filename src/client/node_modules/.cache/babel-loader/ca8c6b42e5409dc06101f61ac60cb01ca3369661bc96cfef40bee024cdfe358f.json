{"ast":null,"code":"import { computed, ref } from 'vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useToast from '@/core/util/composable/useToast';\nimport { reloadPage } from '@/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport EditTranslationTable from '@/orangehrmAdminPlugin/components/EditTranslationTable.vue';\nimport GroupListDropdown from '@/orangehrmAdminPlugin/components/LanguageGroupListDropdown.vue';\nconst defaultFilters = {\n  sourceText: null,\n  translatedText: null,\n  groupId: null,\n  sortOrder: null,\n  onlyTranslated: null\n};\nexport default {\n  name: 'LanguageTranslationList',\n  components: {\n    'language-group-list-dropdown': GroupListDropdown,\n    'edit-translations': EditTranslationTable\n  },\n  props: {\n    languageId: {\n      type: Number,\n      required: true\n    },\n    languagePackage: {\n      type: String,\n      required: true\n    },\n    sourceLanguage: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props) {\n    const {\n      $t\n    } = usei18n();\n    const {\n      saveSuccess\n    } = useToast();\n    const translationOptions = ref([{\n      id: 1,\n      label: $t('admin.all'),\n      value: null\n    }, {\n      id: 2,\n      label: $t('admin.translated'),\n      value: true\n    }, {\n      id: 3,\n      label: $t('admin.not_translated'),\n      value: false\n    }]);\n    const sortOptions = ref([{\n      id: 'ASC',\n      label: $t('general.ascending')\n    }, {\n      id: 'DESC',\n      label: $t('general.descending')\n    }]);\n    const filters = ref({\n      ...defaultFilters,\n      sortOrder: sortOptions.value[0],\n      onlyTranslated: translationOptions.value[0]\n    });\n    const serializedFilters = computed(() => {\n      return {\n        sourceText: filters.value.sourceText,\n        translatedText: filters.value.translatedText,\n        groupId: filters.value.groupId?.id,\n        sortOrder: filters.value.sortOrder?.id,\n        onlyTranslated: filters.value.onlyTranslated?.value\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/admin/i18n/languages/${props.languageId}/translations`);\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      response: items,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters\n    });\n    const onReset = () => {\n      currentPage.value = 1;\n      filters.value = {\n        ...defaultFilters,\n        sortOrder: sortOptions.value[0]\n      };\n      execQuery();\n    };\n    const onSubmit = () => {\n      currentPage.value = 1;\n      execQuery();\n    };\n    const onSubmitLangString = () => {\n      isLoading.value = true;\n      http.request({\n        method: `PUT`,\n        url: `/api/v2/admin/i18n/languages/${props.languageId}/translations/bulk`,\n        data: {\n          data: items.value.data.filter(item => item.target !== null && item.modified == true).map(item => {\n            return {\n              langStringId: item.langStringId,\n              translatedValue: item.target\n            };\n          })\n        }\n      }).then(() => {\n        return saveSuccess();\n      }).then(() => reloadPage());\n    };\n    return {\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      items,\n      filters,\n      translationOptions,\n      sortOptions,\n      onReset,\n      onSubmit,\n      onSubmitLangString\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { isToday, freshDate, parseDate, formatDate } from '@/core/util/helper/datefns';\nimport { navigate } from '@/core/util/helper/navigation';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { APIService } from '@/core/util/services/api.service';\nimport BaseWidget from '@/orangehrmDashboardPlugin/components/BaseWidget.vue';\nimport { OxdBarChart, OxdIcon, CHART_COLORS } from '@ohrm/oxd';\nexport default {\n  name: 'EmployeeAttendanceWidget',\n  components: {\n    'oxd-icon': OxdIcon,\n    'base-widget': BaseWidget,\n    'oxd-bar-chart': OxdBarChart\n  },\n  setup() {\n    const {\n      locale\n    } = useLocale();\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/dashboard/employees/time-at-work');\n    return {\n      http,\n      locale\n    };\n  },\n  data() {\n    return {\n      dataset: [],\n      state: null,\n      endDate: null,\n      userDate: null,\n      userTime: null,\n      startDate: null,\n      isLoading: false,\n      empNumber: null,\n      timezoneOffset: null,\n      dayTotal: {\n        hours: 0,\n        minutes: 0\n      },\n      weekTotal: {\n        hours: 0,\n        minutes: 0\n      }\n    };\n  },\n  computed: {\n    lastState() {\n      switch (this.state) {\n        case 'PUNCHED IN':\n          return this.$t('attendance.punched_in');\n        case 'PUNCHED OUT':\n          return this.$t('attendance.punched_out');\n        default:\n          return this.$t('attendance.not_punched_in');\n      }\n    },\n    lastRecord() {\n      if (!this.userDate || !this.userTime) return null;\n      const parsedDate = parseDate(`${this.userDate} ${this.userTime}`, 'yyyy-MM-dd HH:mm');\n      const formattedTime = formatDate(parsedDate, 'hh:mm a', {\n        locale: this.locale\n      });\n      if (!isToday(parsedDate)) {\n        const formattedDate = formatDate(parsedDate, 'MMM do', {\n          locale: this.locale\n        });\n        return this.$t('dashboard.state_date_at_time_timezone_offset', {\n          lastState: this.lastState,\n          date: formattedDate,\n          time: formattedTime,\n          timezoneOffset: this.timezoneOffset\n        });\n      }\n      return this.$t('dashboard.state_today_at_time_timezone_offset', {\n        lastState: this.lastState,\n        time: formattedTime,\n        timezoneOffset: this.timezoneOffset\n      });\n    },\n    currentWeek() {\n      if (!this.startDate || !this.endDate) return null;\n      const startDate = formatDate(parseDate(this.startDate), 'MMM dd', {\n        locale: this.locale\n      });\n      const endDate = formatDate(parseDate(this.endDate), 'MMM dd', {\n        locale: this.locale\n      });\n      return `${startDate} - ${endDate}`;\n    }\n  },\n  beforeMount() {\n    this.fetchWidgetData();\n  },\n  methods: {\n    onClickPunchIn() {\n      navigate('/attendance/punchIn');\n    },\n    fetchWidgetData() {\n      this.isLoading = true;\n      const currentDate = freshDate();\n      const timezoneOffset = currentDate.getTimezoneOffset() / 60 * -1;\n      this.http.getAll({\n        timezoneOffset,\n        currentDate: formatDate(currentDate, 'yyyy-MM-dd'),\n        currentTime: formatDate(new Date(), 'HH:mm')\n      }).then(response => {\n        const {\n          data,\n          meta\n        } = response.data;\n        this.dataset = data.map(item => ({\n          value: item.totalTime.hours + item.totalTime.minutes / 60,\n          label: this.$t(`general.${new String(item.workDay.day).toLowerCase()}`),\n          color: CHART_COLORS.COLOR_HEAT_WAVE\n        }));\n        const {\n          lastAction,\n          currentDay,\n          currentWeek,\n          currentUser\n        } = meta;\n        if (lastAction) {\n          this.state = lastAction.state;\n          this.userDate = lastAction.userDate;\n          this.userTime = lastAction.userTime;\n          this.timezoneOffset = lastAction.timezoneOffset;\n        }\n        if (currentWeek) {\n          this.weekTotal = currentWeek.totalTime;\n          this.endDate = currentWeek.endDate?.date;\n          this.startDate = currentWeek.startDate?.date;\n        }\n        if (currentDay) {\n          this.dayTotal = currentDay.totalTime;\n        }\n        if (currentUser) {\n          this.empNumber = currentUser.empNumber;\n        }\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
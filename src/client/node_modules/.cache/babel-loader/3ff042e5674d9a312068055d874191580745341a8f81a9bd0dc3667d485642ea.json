{"ast":null,"code":"import { computed, ref } from 'vue';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport JobtitleDropdown from '@/orangehrmPimPlugin/components/JobtitleDropdown';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport VacancyDropdown from '@/orangehrmRecruitmentPlugin/components/VacancyDropdown.vue';\nimport HiringManagerDropdown from '@/orangehrmRecruitmentPlugin/components/HiringManagerDropdown';\nconst defaultFilters = {\n  jobTitleId: null,\n  hiringManagerId: null,\n  vacancyId: null,\n  status: null\n};\nconst defaultSortOrder = {\n  'vacancy.name': 'ASC',\n  'vacancy.status': 'DEFAULT',\n  'jobTitle.jobTitleName': 'DEFAULT',\n  'hiringManager.lastName': 'DEFAULT'\n};\nexport default {\n  name: 'ViewJobVacancy',\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog,\n    'jobtitle-dropdown': JobtitleDropdown,\n    'vacancy-dropdown': VacancyDropdown,\n    'hiring-manager-dropdown': HiringManagerDropdown\n  },\n  setup() {\n    const {\n      $t\n    } = usei18n();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const filters = ref({\n      ...defaultFilters\n    });\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilters = computed(() => {\n      return {\n        vacancyId: filters.value.vacancyId?.id,\n        jobTitleId: filters.value.jobTitleId?.id,\n        hiringManagerId: filters.value.hiringManagerId?.id,\n        status: filters.value.status?.id,\n        sortField: sortField.value,\n        sortOrder: sortOrder.value,\n        model: 'detailed'\n      };\n    });\n    const userdataNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          vacancy: item.name,\n          jobTitle: item.jobTitle?.isDeleted ? item.jobTitle.title + $t('general.deleted') : item.jobTitle?.title,\n          hiringManager: item.hiringManager?.id ? $tEmpName(item.hiringManager) : $t('general.deleted'),\n          status: item.status ? $t('general.active') : $t('general.closed')\n        };\n      });\n    };\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/recruitment/vacancies');\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: userdataNormalizer\n    });\n    onSort(execQuery);\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      filters,\n      sortDefinition\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'vacancy',\n        slot: 'title',\n        title: this.$t('recruitment.vacancy'),\n        sortField: 'vacancy.name',\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'jobTitle',\n        title: this.$t('general.job_title'),\n        sortField: 'jobTitle.jobTitleName',\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'hiringManager',\n        title: this.$t('recruitment.hiring_manager'),\n        sortField: 'hiringManager.lastName',\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'status',\n        title: this.$t('general.status'),\n        sortField: 'vacancy.status',\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 2\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          delete: {\n            onClick: this.onClickDelete,\n            component: 'oxd-icon-button',\n            props: {\n              name: 'trash'\n            }\n          },\n          edit: {\n            onClick: this.onClickEdit,\n            props: {\n              name: 'pencil-fill'\n            }\n          }\n        }\n      }],\n      statusOptions: [{\n        id: true,\n        param: 'active',\n        label: this.$t('general.active')\n      }, {\n        id: false,\n        param: 'closed',\n        label: this.$t('general.closed')\n      }],\n      vacancies: [],\n      checkedItems: []\n    };\n  },\n  methods: {\n    onClickAdd() {\n      navigate('/recruitment/addJobVacancy');\n    },\n    onClickEdit(item) {\n      navigate('/recruitment/addJobVacancy/{id}', {\n        id: item.id\n      });\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteData([item.id]);\n        }\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteData(ids);\n        }\n      });\n    },\n    async deleteData(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onClickReset() {\n      this.filters = {\n        ...defaultFilters\n      };\n      this.filterItems();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
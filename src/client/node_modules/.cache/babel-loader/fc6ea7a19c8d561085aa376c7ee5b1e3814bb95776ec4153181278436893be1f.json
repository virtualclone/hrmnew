{"ast":null,"code":"import { APIService } from '@ohrm/core/util/services/api.service';\nimport EditEmployeeLayout from '@/orangehrmPimPlugin/components/EditEmployeeLayout';\nimport { shouldNotExceedCharLength, validPhoneNumberFormat, validEmailFormat } from '@ohrm/core/util/validation/rules';\nimport { promiseDebounce } from '@ohrm/oxd';\nconst contactDetailsModel = {\n  street1: '',\n  street2: '',\n  city: '',\n  province: '',\n  countryCode: [],\n  zipCode: '',\n  homeTelephone: '',\n  workTelephone: '',\n  mobile: '',\n  workEmail: '',\n  otherEmail: ''\n};\nexport default {\n  components: {\n    'edit-employee-layout': EditEmployeeLayout\n  },\n  props: {\n    empNumber: {\n      type: String,\n      required: true\n    },\n    countries: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/pim/employee/${props.empNumber}/contact-details`);\n    http.setIgnorePath('/api/v2/pim/employees/[0-9]+/contact-details/validation/(work-emails|other-emails)');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      contact: {\n        ...contactDetailsModel\n      },\n      rules: {\n        street1: [shouldNotExceedCharLength(70)],\n        street2: [shouldNotExceedCharLength(70)],\n        city: [shouldNotExceedCharLength(70)],\n        province: [shouldNotExceedCharLength(70)],\n        zipCode: [shouldNotExceedCharLength(10)],\n        homeTelephone: [shouldNotExceedCharLength(25), validPhoneNumberFormat],\n        mobile: [shouldNotExceedCharLength(25), validPhoneNumberFormat],\n        workTelephone: [shouldNotExceedCharLength(25), validPhoneNumberFormat],\n        workEmail: [shouldNotExceedCharLength(50), validEmailFormat, promiseDebounce(this.validateWorkEmail, 500)],\n        otherEmail: [shouldNotExceedCharLength(50), validEmailFormat, promiseDebounce(this.validateOtherEmail, 500)]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.getAll().then(response => {\n      this.updateModel(response);\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.request({\n        method: 'PUT',\n        data: {\n          ...this.contact,\n          countryCode: this.contact.countryCode?.id\n        }\n      }).then(response => {\n        this.updateModel(response);\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.isLoading = false;\n      });\n    },\n    validateWorkEmail(contact) {\n      return new Promise(resolve => {\n        if (contact) {\n          const sameAsOtherEmail = this.contact.workEmail === this.contact.otherEmail;\n          this.http.request({\n            method: 'GET',\n            url: `/api/v2/pim/employees/${this.empNumber}/contact-details/validation/work-emails`,\n            params: {\n              workEmail: this.contact.workEmail\n            }\n          }).then(response => {\n            const {\n              data\n            } = response.data;\n            if (data.valid === true) {\n              return sameAsOtherEmail ? resolve(this.$t('pim.work_email_and_other_email_cannot_be_the_same')) : resolve(true);\n            }\n            return resolve(this.$t('general.already_exists'));\n          });\n        } else {\n          resolve(true);\n        }\n      });\n    },\n    validateOtherEmail(contact) {\n      return new Promise(resolve => {\n        if (contact) {\n          const sameAsWorkEmail = this.contact.otherEmail === this.contact.workEmail;\n          this.http.request({\n            method: 'GET',\n            url: `/api/v2/pim/employees/${this.empNumber}/contact-details/validation/other-emails`,\n            params: {\n              otherEmail: this.contact.otherEmail\n            }\n          }).then(response => {\n            const {\n              data\n            } = response.data;\n            if (data.valid === true) {\n              return sameAsWorkEmail ? resolve(this.$t('pim.work_email_and_other_email_cannot_be_the_same')) : resolve(true);\n            }\n            return resolve(this.$t('general.already_exists'));\n          });\n        } else {\n          resolve(true);\n        }\n      });\n    },\n    validateEmailDifferent(email) {\n      return v => {\n        const resolvedEmail = email();\n        if (resolvedEmail === null || resolvedEmail === '') {\n          return true;\n        }\n        return v !== resolvedEmail || this.$t('pim.work_email_and_other_email_cannot_be_the_same');\n      };\n    },\n    updateModel(response) {\n      const {\n        data\n      } = response.data;\n      this.contact = {\n        ...contactDetailsModel,\n        ...data\n      };\n      this.contact.countryCode = this.countries.find(item => item.id === data.countryCode);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { ref } from 'vue';\nimport { required, max, digitsOnly } from '@ohrm/core/util/validation/rules';\nimport usei18n from '@/core/util/composable/usei18n';\nexport default {\n  name: 'ReportCriterionRange',\n  inheritAttrs: false,\n  props: {\n    operator: {\n      type: Object,\n      required: false,\n      default: () => null\n    },\n    valueX: {\n      type: String,\n      required: false,\n      default: null\n    },\n    valueY: {\n      type: String,\n      required: false,\n      default: null\n    }\n  },\n  emits: ['update:valueX', 'update:valueY', 'update:operator'],\n  setup(props) {\n    const {\n      $t\n    } = usei18n();\n    const operators = ref([{\n      id: 'lt',\n      label: $t('general.less_than')\n    }, {\n      id: 'gt',\n      label: $t('general.greater_than')\n    }, {\n      id: 'between',\n      label: $t('general.range')\n    }]);\n    const rules = {\n      operator: [required],\n      valueXOnly: [required, digitsOnly, max(100)],\n      valueX: [required, digitsOnly, max(100), v => {\n        if (!parseInt(props.valueY)) return true;\n        return parseInt(v) < parseInt(props.valueY) || $t('general.should_be_less_than_upper_bound');\n      }],\n      valueY: [required, digitsOnly, max(100), v => {\n        if (!parseInt(props.valueX)) return true;\n        return parseInt(v) > parseInt(props.valueX) || $t('general.should_be_greater_than_lower_bound');\n      }]\n    };\n    return {\n      rules,\n      operators\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
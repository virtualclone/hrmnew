{"ast":null,"code":"import { computed, ref } from 'vue';\nimport { validSelection, validDateFormat, endDateShouldBeAfterStartDate, startDateShouldBeBeforeEndDate } from '@/core/util/validation/rules';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport { formatDate, parseDate } from '@ohrm/core/util/helper/datefns';\nimport JobtitleDropdown from '@/orangehrmPimPlugin/components/JobtitleDropdown';\nimport VacancyDropdown from '@/orangehrmRecruitmentPlugin/components/VacancyDropdown';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport CandidateAutocomplete from '@/orangehrmRecruitmentPlugin/components/CandidateAutocomplete';\nimport HiringManagerDropdown from '@/orangehrmRecruitmentPlugin/components/HiringManagerDropdown';\nimport CandidateStatusDropdown from '@/orangehrmRecruitmentPlugin/components/CandidateStatusDropdown';\nconst defaultFilters = {\n  jobTitle: null,\n  vacancy: null,\n  hiringManager: null,\n  status: null,\n  keywords: null,\n  application: null,\n  candidate: null,\n  fromDate: null,\n  toDate: null\n};\nconst defaultSortOrder = {\n  'vacancy.name': 'DEFAULT',\n  'candidate.lastName': 'DEFAULT',\n  'hiringManager.lastName': 'DEFAULT',\n  'candidate.dateOfApplication': 'DESC',\n  'candidateVacancy.status': 'DEFAULT'\n};\nexport default {\n  components: {\n    'vacancy-dropdown': VacancyDropdown,\n    'jobtitle-dropdown': JobtitleDropdown,\n    'delete-confirmation': DeleteConfirmationDialog,\n    'candidate-autocomplete': CandidateAutocomplete,\n    'hiring-manager-dropdown': HiringManagerDropdown,\n    'candidate-status-dropdown': CandidateStatusDropdown\n  },\n  props: {\n    status: {\n      type: Object,\n      required: false,\n      default: null\n    }\n  },\n  setup(props) {\n    const {\n      $t\n    } = usei18n();\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat,\n      userDateFormat\n    } = useDateFormat();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const statuses = [{\n      id: 1,\n      label: $t('recruitment.application_initiated')\n    }, {\n      id: 2,\n      label: $t('recruitment.shortlisted')\n    }, {\n      id: 3,\n      label: $t('leave.rejected')\n    }, {\n      id: 4,\n      label: $t('recruitment.interview_scheduled')\n    }, {\n      id: 5,\n      label: $t('recruitment.interview_passed')\n    }, {\n      id: 6,\n      label: $t('recruitment.interview_failed')\n    }, {\n      id: 7,\n      label: $t('recruitment.job_offered')\n    }, {\n      id: 8,\n      label: $t('recruitment.offer_declined')\n    }, {\n      id: 9,\n      label: $t('recruitment.hired')\n    }];\n    const candidateDataNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          vacancy: item.vacancy?.status === false ? `${item.vacancy?.name} (${$t('general.closed')})` : item.vacancy?.name,\n          candidate: `${item.firstName} ${item.middleName || ''} ${item.lastName}`,\n          manager: item?.vacancy?.hiringManager?.id ? $tEmpName(item.vacancy.hiringManager, {\n            includeMiddle: true,\n            excludePastEmpTag: false\n          }) : $t('general.deleted'),\n          dateOfApplication: formatDate(parseDate(item.dateOfApplication), jsDateFormat, {\n            locale\n          }),\n          status: statuses.find(status => status.id === item.status?.id)?.label || '',\n          resume: item.hasAttachment,\n          isSelectable: item.deletable\n        };\n      });\n    };\n    const filters = ref({\n      ...defaultFilters,\n      ...(props.status && {\n        status: props.status\n      })\n    });\n    const rules = {\n      candidate: [validSelection],\n      fromDate: [validDateFormat(userDateFormat), startDateShouldBeBeforeEndDate(() => filters.value.toDate, $t('general.from_date_should_be_before_to_date'), {\n        allowSameDate: true\n      })],\n      toDate: [validDateFormat(userDateFormat), endDateShouldBeAfterStartDate(() => filters.value.fromDate, $t('general.to_date_should_be_after_from_date'), {\n        allowSameDate: true\n      })]\n    };\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilters = computed(() => {\n      return {\n        jobTitleId: filters.value.jobTitle?.id,\n        vacancyId: filters.value.vacancy?.id,\n        hiringManagerId: filters.value.hiringManager?.id,\n        keywords: filters.value.keywords,\n        candidateId: filters.value.candidate?.id,\n        fromDate: filters.value.fromDate,\n        toDate: filters.value.toDate,\n        status: filters.value.status?.id,\n        methodOfApplication: filters.value.methodOfApplication?.id,\n        model: 'list',\n        sortField: sortField.value,\n        sortOrder: sortOrder.value\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/recruitment/candidates');\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: candidateDataNormalizer\n    });\n    onSort(execQuery);\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      filters,\n      sortDefinition,\n      rules\n    };\n  },\n  data() {\n    return {\n      checkedItems: [],\n      headers: [{\n        name: 'vacancy',\n        title: this.$t('recruitment.vacancy'),\n        sortField: 'vacancy.name',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'candidate',\n        slot: 'title',\n        title: this.$t('recruitment.candidate'),\n        sortField: 'candidate.lastName',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'manager',\n        title: this.$t('recruitment.hiring_manager'),\n        sortField: 'hiringManager.lastName',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'dateOfApplication',\n        title: this.$t('recruitment.date_of_application'),\n        sortField: 'candidate.dateOfApplication',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'status',\n        title: this.$t('general.status'),\n        sortField: 'candidateVacancy.status',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellRenderer: this.cellRenderer\n      }],\n      applications: [{\n        id: 1,\n        label: this.$t('recruitment.manual')\n      }, {\n        id: 2,\n        label: this.$t('recruitment.online')\n      }]\n    };\n  },\n  methods: {\n    cellRenderer(...[,,, row]) {\n      const cellConfig = {\n        view: {\n          onClick: this.onClickEdit,\n          props: {\n            name: 'eye-fill'\n          }\n        }\n      };\n      if (row.isSelectable) {\n        cellConfig.delete = {\n          onClick: this.onClickDelete,\n          component: 'oxd-icon-button',\n          props: {\n            name: 'trash'\n          }\n        };\n      }\n      if (row.resume) {\n        cellConfig.download = {\n          onClick: this.onDownload,\n          props: {\n            name: 'download'\n          }\n        };\n      }\n      return {\n        props: {\n          header: {\n            cellConfig\n          }\n        }\n      };\n    },\n    onClickAdd() {\n      navigate('/recruitment/addCandidate');\n    },\n    onClickEdit(item) {\n      navigate('/recruitment/addCandidate/{id}', {\n        id: item.id\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    onDownload(item) {\n      if (!item?.id) return;\n      const fileUrl = 'recruitment/viewCandidateAttachment/candidateId';\n      const downUrl = `${window.appGlobal.baseUrl}/${fileUrl}/${item.id}`;\n      window.open(downUrl, '_blank');\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        }).catch(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onReset() {\n      this.filters = {\n        ...defaultFilters\n      };\n      this.filterItems();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
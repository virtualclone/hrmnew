{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport ReportCriterion from '@/orangehrmPimPlugin/components/ReportCriterion';\nimport ReportDisplayField from '@/orangehrmPimPlugin/components/ReportDisplayField';\nimport useEmployeeReport from '@/orangehrmPimPlugin/util/composable/useEmployeeReport';\nexport default {\n  components: {\n    'report-criterion': ReportCriterion,\n    'report-display-field': ReportDisplayField\n  },\n  props: {\n    selectionCriteria: {\n      type: Array,\n      required: true\n    },\n    displayFieldGroups: {\n      type: Array,\n      required: true\n    },\n    displayFields: {\n      type: Array,\n      required: true\n    },\n    reportId: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/pim/reports/defined');\n    const {\n      report,\n      addCriterion,\n      serializeBody,\n      addDisplayField,\n      removeCriterion,\n      removeDisplayField,\n      removeDisplayFieldGroup,\n      availableCriteria,\n      availableFieldGroups,\n      availableDisplyFields\n    } = useEmployeeReport(props.selectionCriteria, props.displayFields, props.displayFieldGroups);\n    return {\n      http,\n      report,\n      addCriterion,\n      serializeBody,\n      addDisplayField,\n      removeCriterion,\n      removeDisplayField,\n      removeDisplayFieldGroup,\n      availableCriteria,\n      availableFieldGroups,\n      availableDisplyFields\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      rules: {\n        name: [required, shouldNotExceedCharLength(250)],\n        includeEmployees: [required]\n      },\n      includeOpts: [{\n        id: 1,\n        key: 'onlyCurrent',\n        label: this.$t('general.current_employees_only')\n      }, {\n        id: 2,\n        key: 'currentAndPast',\n        label: this.$t('general.current_and_past_employees')\n      }, {\n        id: 3,\n        key: 'onlyPast',\n        label: this.$t('general.past_employees_only')\n      }]\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.reportId).then(response => {\n      const {\n        data\n      } = response.data;\n      this.report.name = data.name;\n      this.report.includeEmployees = this.includeOpts.find(opt => opt.key === data.include);\n      const operators = [{\n        id: 'eq',\n        label: 'Equal'\n      }, {\n        id: 'lt',\n        label: 'Less Than'\n      }, {\n        id: 'gt',\n        label: 'Greater Than'\n      }, {\n        id: 'between',\n        label: 'Range'\n      }];\n      for (const key in data.fieldGroup) {\n        const fieldGroup = this.displayFields.find(group => group.field_group_id == key);\n        this.report.fieldGroupSelected.push(this.displayFieldGroups.find(group => group.id == key));\n        this.report.displayFieldSelected[key] = {\n          fields: data.fieldGroup[key].fields.map(id => fieldGroup.fields.find(field => field.id === id)),\n          includeHeader: data.fieldGroup[key].includeHeader\n        };\n      }\n      for (const key in data.criteria) {\n        const criterion = this.selectionCriteria.find(criterion => criterion.id == key);\n        this.report.criteriaSelected.push(criterion);\n        this.report.criteriaFieldValues[key] = {\n          valueX: data.criteria[key].x,\n          valueY: data.criteria[key].y === 'undefined' ? null : data.criteria[key].y,\n          operator: operators.find(o => o.id === data.criteria[key].operator)\n        };\n      }\n      // Fetch list data for unique test\n      return this.http.getAll({\n        limit: 0\n      });\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.rules.name.push(v => {\n        const index = data.findIndex(item => item.name == v);\n        if (index > -1) {\n          const {\n            id\n          } = data[index];\n          return id != this.reportId ? this.$t('general.already_exists') : true;\n        } else {\n          return true;\n        }\n      });\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      navigate('/pim/viewDefinedPredefinedReports');\n    },\n    onSave() {\n      if (Object.keys(this.report.displayFieldSelected).length === 0) {\n        return this.$toast.warn({\n          title: this.$t('general.warning'),\n          message: this.$t('pim.at_least_one_display_field_should_be_added')\n        });\n      }\n      this.isLoading = true;\n      const payload = this.serializeBody(this.report);\n      this.http.update(this.reportId, payload).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        navigate('/pim/displayPredefinedReport/{id}', {\n          id: this.reportId\n        });\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
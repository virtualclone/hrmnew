{"ast":null,"code":"import { required, validSelection, validDateFormat, endDateShouldBeAfterStartDate } from '@/core/util/validation/rules';\nimport { computed, ref } from 'vue';\nimport { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { truncate } from '@ohrm/core/util/helper/truncate';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useLeaveActions from '@/orangehrmLeavePlugin/util/composable/useLeaveActions';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\nconst defaultFilters = {\n  employee: null,\n  fromDate: null,\n  toDate: null,\n  CompOffList: \"Approve\"\n};\nexport default {\n  name: 'CompOffListTable',\n  props: {\n    CompOffList: {\n      type: String\n    },\n    leaveStatuses: {\n      type: Array,\n      default: () => []\n    },\n    employee: {\n      type: Object,\n      required: false,\n      default: () => null\n    },\n    fromDate: {\n      type: String,\n      required: false,\n      default: null\n    },\n    toDate: {\n      type: String,\n      required: false,\n      default: null\n    }\n  },\n  setup(props) {\n    const filters = ref({\n      ...defaultFilters,\n      ...(props.fromDate && {\n        fromDate: props.fromDate\n      }),\n      ...(props.toDate && {\n        toDate: props.toDate\n      }),\n      ...(props.employee && {\n        employee: {\n          id: props.employee.empNumber,\n          label: `${props.employee.firstName} ${props.employee.middleName} ${props.employee.lastName}`,\n          isPastEmployee: props.employee.terminationId\n        },\n        ...(props.CompOffList && {\n          CompOffList: props.CompOffList\n        })\n      })\n    });\n    const {\n      $t\n    } = usei18n();\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat,\n      userDateFormat\n    } = useDateFormat();\n    const rules = {\n      fromDate: [required, validDateFormat(userDateFormat)],\n      toDate: [required, validDateFormat(userDateFormat), endDateShouldBeAfterStartDate(() => filters.value.fromDate, $t('general.to_date_should_be_after_from_date'), {\n        allowSameDate: true\n      })],\n      employee: [validSelection]\n    };\n    const serializedFilters = computed(() => {\n      return {\n        employeeNum: filters.value.employee?.id,\n        fromDate: filters.value.fromDate,\n        toDate: filters.value.toDate,\n        CompOffList: filters.value.CompOffList\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/leave/compensatory-off`);\n    const compOfflistNormalizer = data => {\n      if (!data || !Array.isArray(data)) {\n        // Handle the case where data is undefined or not an array\n        return [];\n      }\n      return data.map(item => {\n        const apiDate = {\n          date: item.date.date,\n          timezone_type: item.date.timezone_type,\n          timezone: item.date.timezone\n        };\n        const parts = apiDate.date.split(\" \");\n        const datePart = parts[0];\n        const [year, month, day1] = datePart.split(\"-\");\n\n        // Create a new Date object with the parts\n\n        const parsedDate = new Date(parseInt(year), parseInt(month) - 1,\n        // Months are 0-based in JavaScript\n        parseInt(day1));\n\n        // Convert to a formatted string in the Indian timezone without time\n\n        const formattedDate = `${year}-${month}-${day1}`; //parsedDate.toLocaleDateString(\"en-IN\", options);\n        let duration = '';\n        if (item.duration == \"half_day\") {\n          duration = 'Half Day';\n        } else {\n          duration = 'Full Day';\n        }\n        if (item.status == 0) {\n          status = 'Pending';\n        } else if (item.status == 1) {\n          status = 'Approve';\n        } else {\n          status = 'Reject';\n        }\n        const weekday = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n        const d = new Date(item.date.date);\n        let day = weekday[d.getDay()];\n        const empName = `${item.employee?.firstName} ${item.employee?.middleName} ${item.employee?.lastName}`;\n        if (item.employee?.terminationId) {\n          empName + ` (${$t('general.past_employee')})`;\n        }\n        if (item.leaveType?.deleted) {\n          leaveTypeName + ` (${$t('general.deleted')})`;\n        }\n        return {\n          id: item.id,\n          empNumber: item.employee?.empNumber,\n          date: formattedDate,\n          employeeName: empName,\n          lengthHours: parseFloat(item.lengthHours).toFixed(2),\n          duration: duration,\n          status: status,\n          comment: item.comments,\n          actions: item.id,\n          day: day\n        };\n      });\n    };\n    const {\n      leaveActions,\n      processLeaveRequestAction\n    } = useLeaveActions(http);\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: compOfflistNormalizer\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      rules,\n      filters,\n      leaveActions,\n      processLeaveRequestAction\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'date',\n        title: this.$t('Working Date'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'day',\n        title: this.$t('Working Day'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'employeeName',\n        title: this.$t('Employee Name'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'lengthHours',\n        title: this.$t('No of Hours'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'duration',\n        title: this.$t('Days'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'status',\n        title: this.$t('general.status'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'comment',\n        title: this.$t('general.comments'),\n        style: {\n          flex: '5%'\n        }\n      }, {\n        name: 'action',\n        slot: 'footer',\n        title: this.$t('general.actions'),\n        cellType: 'oxd-table-cell-actions',\n        cellRenderer: this.cellRenderer,\n        style: {\n          flex: this.myLeaveList ? '10%' : '20%'\n        }\n      }]\n    };\n  },\n  methods: {\n    cellRenderer(...[,,, row]) {\n      const cellConfig = {};\n      const {\n        approve,\n        reject,\n        cancel\n      } = this.leaveActions;\n      approve.props.label = this.$t('general.approve');\n      approve.props.onClick = () => this.onLeaveAction(row.id, 'APPROVE');\n      cellConfig.approve = approve;\n      reject.props.label = this.$t('general.reject');\n      reject.props.onClick = () => this.onLeaveAction(row.id, 'REJECT');\n      cellConfig.reject = reject;\n      return {\n        props: {\n          header: {\n            cellConfig\n          }\n        }\n      };\n    },\n    onLeaveAction(compoffId, actionType) {\n      this.isLoading = true;\n      this.http.update(compoffId, {\n        action: actionType\n      }).then(() => {\n        this.$toast.updateSuccess();\n      }).finally(this.resetDataTable);\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onReset() {\n      this.filters = {\n        ...defaultFilters\n      };\n      this.resetDataTable();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport { required, shouldNotExceedCharLength, validDateFormat } from '@ohrm/core/util/validation/rules';\nimport { yearRange } from '@ohrm/core/util/helper/year-range';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nconst holidayModel = {\n  name: '',\n  date: '',\n  recurring: false,\n  length: {\n    id: 0,\n    label: 'Full Day'\n  }\n};\nexport default {\n  props: {\n    holidayLengthList: {\n      type: Array,\n      required: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/leave/holidays');\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      http,\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      yearArray: [...yearRange(201)],\n      isLoading: false,\n      holiday: {\n        ...holidayModel\n      },\n      rules: {\n        name: [required, shouldNotExceedCharLength(200)],\n        date: [required, validDateFormat(this.userDateFormat)],\n        length: [required]\n      },\n      errors: []\n    };\n  },\n  created() {\n    this.isLoading = true;\n    // Fetch list data for unique test\n    const today = new Date();\n    const startDate = today.getFullYear() - 100 + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n    const endDate = today.getFullYear() + 100 + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n    this.http.getAll({\n      fromDate: startDate,\n      toDate: endDate,\n      limit: 0\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.rules.date.push(v => {\n        const index = data.findIndex(item => item.date == v);\n        return index === -1 || this.$t('general.already_exists');\n      });\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        name: this.holiday.name,\n        date: this.holiday.date,\n        recurring: this.holiday.recurring,\n        length: this.holiday.length.id\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.holiday = {\n          ...holidayModel\n        };\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      navigate('/leave/viewHolidayList');\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
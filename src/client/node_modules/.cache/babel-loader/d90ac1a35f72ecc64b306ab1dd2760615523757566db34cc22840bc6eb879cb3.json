{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport { shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nconst formatExtraData = data => {\n  return typeof data === 'string' ? data.split(',').map((item, i) => {\n    return {\n      id: i,\n      label: item\n    };\n  }).filter(item => item.label.trim() != '') : [];\n};\nexport default {\n  name: 'ProfileCustomFields',\n  props: {\n    employeeId: {\n      type: String,\n      required: true\n    },\n    screen: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/pim/employees/${props.employeeId}/custom-fields?screen=${props.screen}`);\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      fields: [],\n      customFieldsModel: {},\n      rules: {\n        default: [shouldNotExceedCharLength(250)]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.getAll().then(response => {\n      const {\n        data,\n        meta\n      } = response.data;\n      this.customFieldsModel = {\n        ...data\n      };\n      if (meta.fields && meta.fields.length > 0) {\n        this.fields = meta.fields.map(field => {\n          const extraData = formatExtraData(field.extraData);\n          const model = `custom${field.id}`;\n          if (field.fieldType == 1 && data[model]) {\n            const selected = extraData.find(i => i.label == data[model]);\n            this.customFieldsModel[model] = selected || null;\n          }\n          return {\n            id: field.id,\n            label: field.fieldName,\n            type: field.fieldType == 1 ? 'select' : 'input',\n            model,\n            extraData\n          };\n        });\n      }\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.request({\n        method: 'PUT',\n        url: `/api/v2/pim/employees/${this.employeeId}/custom-fields`,\n        data: {\n          ...this.customFieldsModel\n        },\n        transformRequest: [data => {\n          for (const key in data) {\n            if (data[key]?.label) data[key] = data[key].label;\n          }\n          return JSON.stringify(data);\n        }]\n      }).then(() => {\n        this.isLoading = false;\n        this.$toast.saveSuccess();\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
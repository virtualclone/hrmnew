{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport PasswordInput from '@/core/components/inputs/PasswordInput';\nimport { required, validSelection, shouldNotExceedCharLength, shouldNotLessThanCharLength } from '@ohrm/core/util/validation/rules';\nimport { promiseDebounce } from '@ohrm/oxd';\nconst userModel = {\n  id: '',\n  username: '',\n  role: null,\n  employee: null,\n  status: null,\n  changePassword: false,\n  payrollAdmin: false,\n  password: '',\n  passwordConfirm: ''\n};\nexport default {\n  components: {\n    'employee-autocomplete': EmployeeAutocomplete,\n    'password-input': PasswordInput\n  },\n  props: {\n    systemUserId: {\n      type: Number,\n      required: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/admin/users');\n    http.setIgnorePath('/api/v2/admin/validation/user-name');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      user: {\n        ...userModel\n      },\n      rules: {\n        username: [required, shouldNotLessThanCharLength(5), shouldNotExceedCharLength(40), promiseDebounce(this.validateUserName, 500)],\n        role: [required],\n        employee: [required, validSelection],\n        status: [required]\n      },\n      userRoles: [{\n        id: 1,\n        label: this.$t('general.admin')\n      }, {\n        id: 2,\n        label: this.$t('general.ess')\n      }],\n      userStatuses: [{\n        id: 1,\n        label: this.$t('general.enabled')\n      }, {\n        id: 2,\n        label: this.$t('general.disabled')\n      }]\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.systemUserId).then(response => {\n      console.log(response);\n      const {\n        data\n      } = response.data;\n      this.user.id = data.id;\n      this.user.username = data.userName;\n      this.user.role = this.userRoles.find(item => item.id === data.userRole.id);\n      this.user.payrollAdmin = data.payrolladmin;\n      this.user.employee = {\n        id: data.employee.empNumber,\n        label: `${data.employee.firstName} ${data.employee.middleName} ${data.employee.lastName}`,\n        isPastEmployee: data.employee.terminationId\n      };\n      if (data.status) {\n        this.user.status = {\n          id: 1,\n          label: this.$t('general.enabled')\n        };\n      } else {\n        this.user.status = {\n          id: 2,\n          label: this.$t('general.disabled')\n        };\n      }\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      navigate('/admin/viewSystemUsers');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.systemUserId, {\n        username: this.user.username.trim(),\n        password: this.user.password,\n        status: this.user.status && this.user.status.id === 1,\n        userRoleId: this.user.role?.id,\n        empNumber: this.user.employee?.id,\n        changePassword: this.user.changePassword,\n        payrollAdmin: this.user.payrollAdmin\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    validateUserName(user) {\n      return new Promise(resolve => {\n        if (user) {\n          this.http.request({\n            method: 'GET',\n            url: `/api/v2/admin/validation/user-name`,\n            params: {\n              userName: this.user.username.trim(),\n              userId: this.systemUserId\n            }\n          }).then(response => {\n            const {\n              data\n            } = response.data;\n            return data.valid === true ? resolve(true) : resolve(this.$t('general.already_exists'));\n          });\n        } else {\n          resolve(true);\n        }\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
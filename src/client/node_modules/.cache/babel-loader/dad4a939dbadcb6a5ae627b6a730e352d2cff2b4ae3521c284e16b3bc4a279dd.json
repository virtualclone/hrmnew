{"ast":null,"code":"import { computed } from 'vue';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { required, validDateFormat, greaterThanOrEqual, lessThanOrEqual } from '@/core/util/validation/rules';\nexport default {\n  name: 'FinalEvaluation',\n  props: {\n    completedDate: {\n      type: String,\n      default: null,\n      required: false\n    },\n    finalRating: {\n      type: Number,\n      default: null,\n      required: false\n    },\n    finalComment: {\n      type: String,\n      default: null,\n      required: false\n    },\n    status: {\n      type: Number,\n      required: true\n    },\n    isRequired: {\n      type: Boolean,\n      required: true\n    }\n  },\n  emits: ['update:finalRating', 'update:finalComment', 'update:completedDate'],\n  setup(props) {\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat,\n      userDateFormat\n    } = useDateFormat();\n    const editable = computed(() => props.status !== 4);\n    const formattedCompletedDate = computed(() => formatDate(parseDate(props.completedDate), jsDateFormat, {\n      locale\n    }));\n    return {\n      editable,\n      userDateFormat,\n      formattedCompletedDate\n    };\n  },\n  data() {\n    return {\n      rules: {\n        completedDate: [validDateFormat(this.userDateFormat), ...(this.isRequired ? [required] : [])],\n        finalRating: [greaterThanOrEqual(0, this.$t('performance.rating_should_be_greater_than_or_equal_to_minValue', {\n          minValue: 0\n        })), lessThanOrEqual(100, this.$t('performance.rating_should_be_less_than_or_equal_to_maxValue', {\n          maxValue: 100\n        })), ...(this.isRequired ? [required] : [])],\n        finalComment: [...(this.isRequired ? [required] : [])]\n      }\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
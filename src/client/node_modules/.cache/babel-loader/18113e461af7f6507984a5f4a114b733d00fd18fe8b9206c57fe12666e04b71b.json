{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useLocale from '@/core/util/composable/useLocale';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport { navigate } from '@/core/util/helper/navigation';\nimport usei18n from '@/core/util/composable/usei18n';\nconst ACTION_ASSIGNED_VACANCY = 1;\nconst ACTION_SHORTLISTED = 2;\nconst ACTION_REJECTED = 3;\nconst ACTION_INTERVIEW_SCHEDULED = 4;\nconst ACTION_INTERVIEW_PASSED = 5;\nconst ACTION_INTERVIEW_FAILED = 6;\nconst ACTION_JOB_OFFERED = 7;\nconst ACTION_OFFER_DECLINED = 8;\nconst ACTION_HIRED = 9;\nconst ACTION_REMOVED = 15;\nconst ACTION_ADDED = 16;\nconst ACTION_APPLIED = 17;\nexport default {\n  name: 'HistoryTable',\n  props: {\n    candidate: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const {\n      $t\n    } = usei18n();\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/recruitment/candidates/${props.candidate?.id}/history`);\n    const historyDataNormalizer = data => {\n      const candidateName = `${props.candidate?.firstName} ${props.candidate?.middleName || ''} ${props.candidate?.lastName}`;\n      return data.map(item => {\n        let description = null;\n        const interview = {\n          name: '',\n          data: '',\n          interviewers: ''\n        };\n        const performerName = $tEmpName(item.performedBy, {\n          includeMiddle: true,\n          excludePastEmpTag: false\n        });\n        if (item.interview) {\n          interview.name = item.interview.name;\n          interview.date = item.interview.date;\n          const interviewers = item.interview.interviewers.map(interviewer => {\n            return $tEmpName(interviewer, {\n              includeMiddle: true,\n              excludePastEmpTag: false\n            });\n          });\n          interview.interviewers = interviewers.join(', ');\n        }\n        switch (item?.action.id) {\n          case ACTION_APPLIED:\n            description = $t('recruitment.candidate_applied_for_the_vacancy', {\n              candidate: candidateName,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_ADDED:\n            description = $t('recruitment.employee_added_candidate', {\n              employee: performerName,\n              candidate: candidateName\n            });\n            break;\n          case ACTION_ASSIGNED_VACANCY:\n            description = $t('recruitment.employee_assigned_vacancy_to_candidate', {\n              employee: performerName,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_SHORTLISTED:\n            description = $t('recruitment.candidate_shortlisted_for_vacancy_by_employee', {\n              vacancy: item.vacancyName,\n              employee: performerName\n            });\n            break;\n          case ACTION_REJECTED:\n            description = $t('recruitment.employee_rejected_the_candidate', {\n              employee: performerName,\n              candidate: candidateName,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_INTERVIEW_SCHEDULED:\n            description = $t('recruitment.employee_schedule_interview_with_interviewers', {\n              employee: performerName,\n              interview: interview.name,\n              interviewDate: interview.date,\n              interviewers: interview.interviewers,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_INTERVIEW_PASSED:\n            description = $t('recruitment.employee_marked_interveiw_passed', {\n              employee: performerName,\n              interview: interview.name,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_INTERVIEW_FAILED:\n            description = $t('recruitment.employee_marked_interveiw_failed', {\n              employee: performerName,\n              interview: interview.name,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_JOB_OFFERED:\n            description = $t('recruitment.employee_offered_the_job', {\n              employee: performerName,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_OFFER_DECLINED:\n            description = $t('recruitment.employee_marked_the_offer_declined', {\n              employee: performerName,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_HIRED:\n            description = $t('recruitment.employee_hired_the_candidate', {\n              employee: performerName,\n              candidate: candidateName,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_REMOVED:\n            description = $t('recruitment.employee_removed_candidate_from_vacancy', {\n              employee: performerName,\n              candidate: candidateName,\n              vacancy: item.vacancyName\n            });\n            break;\n        }\n        return {\n          ...item,\n          description: description,\n          performedDate: formatDate(parseDate(item.performedDate), jsDateFormat, {\n            locale\n          })\n        };\n      });\n    };\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      normalizer: historyDataNormalizer\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'performedDate',\n        slot: 'title',\n        title: this.$t('recruitment.performed_date'),\n        style: {\n          flex: '20%'\n        }\n      }, {\n        name: 'description',\n        title: this.$t('general.description'),\n        style: {\n          flex: '65%'\n        }\n      }, {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: '15%'\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellRenderer: this.cellRenderer\n      }]\n    };\n  },\n  watch: {\n    candidate() {\n      this.execQuery();\n    }\n  },\n  methods: {\n    cellRenderer(...[,,, row]) {\n      const cellConfig = {};\n      if (row.action?.id != ACTION_ASSIGNED_VACANCY && row.action?.id != ACTION_ADDED && row.action?.id != ACTION_REMOVED && row.action?.id != ACTION_APPLIED && row.editable) {\n        cellConfig.edit = {\n          onClick: this.onClickEdit,\n          props: {\n            name: 'pencil-fill'\n          }\n        };\n      }\n      if ((row.action?.id === ACTION_INTERVIEW_SCHEDULED || row.action?.id === ACTION_INTERVIEW_PASSED || row.action?.id === ACTION_INTERVIEW_FAILED) && row.editable) {\n        cellConfig.attachment = {\n          onClick: this.onClickAttachment,\n          props: {\n            name: 'paperclip'\n          }\n        };\n      }\n      return {\n        props: {\n          header: {\n            cellConfig\n          }\n        }\n      };\n    },\n    onClickEdit(item) {\n      navigate('/recruitment/candidateHistory/{candidateId}/{historyId}', {\n        candidateId: this.candidate.id,\n        historyId: item.id\n      });\n    },\n    onClickAttachment(item) {\n      navigate('/recruitment/interviewAttachments/{interviewId}', {\n        interviewId: item.interview?.id\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { computed, ref } from 'vue';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog.vue';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport { validSelection } from '@/core/util/validation/rules';\nimport CustomerAutocomplete from '@/orangehrmTimePlugin/components/CustomerAutocomplete.vue';\nimport IncludeStatusDropdown from '@/core/components/dropdown/IncludeStatusDropdown';\nconst defaultSortOrder = {\n  'customer.name': 'ASC',\n  'customer.activestatus': 'true'\n};\nexport default {\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog,\n    'customer-autocomplete': CustomerAutocomplete,\n    'include-status-dropdown': IncludeStatusDropdown\n  },\n  props: {\n    unselectableIds: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup(props) {\n    const customerNormalizer = data => {\n      return data.map(item => {\n        const selectable = props.unselectableIds.findIndex(id => id == item.id);\n        let status = '';\n        if (item.active == 0) {\n          status = 'No';\n        } else {\n          status = 'Yes';\n        }\n        return {\n          id: item.id,\n          name: item.name,\n          description: item.description,\n          clientemail: item.emailto,\n          mhrslimit: item.mhrslimit,\n          status: status,\n          isSelectable: selectable === -1\n        };\n      });\n    };\n    const filters = ref({\n      customer: null,\n      active: {\n        id: 1,\n        param: 'Active',\n        label: 'Active'\n      }\n    });\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilters = computed(() => {\n      return {\n        customerId: filters.value.customer?.id,\n        status: filters.value.active?.param,\n        sortField: sortField.value,\n        sortOrder: sortOrder.value\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/time/customers');\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: customerNormalizer\n    });\n    onSort(execQuery);\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      filters,\n      sortDefinition\n    };\n  },\n  data() {\n    return {\n      customerStatuses: [{\n        id: 1,\n        label: this.$t('Active')\n      }, {\n        id: 2,\n        label: this.$t('InActive')\n      }, {\n        id: 3,\n        label: this.$t('All')\n      }],\n      checkedItems: [],\n      rules: {\n        customer: [validSelection]\n      }\n    };\n  },\n  computed: {\n    headers() {\n      const headers = [{\n        name: 'name',\n        slot: 'title',\n        title: this.$t('general.name'),\n        sortField: 'customer.name',\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'description',\n        title: this.$t('general.description'),\n        style: {\n          flex: 4\n        }\n      }, {\n        name: 'clientemail',\n        title: this.$t('Client Email'),\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'mhrslimit',\n        title: this.$t('Monthly Hrs'),\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'status',\n        title: this.$t('Active'),\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'actions',\n        title: this.$t('general.actions'),\n        slot: 'action',\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          delete: {\n            onClick: this.onClickDelete,\n            component: 'oxd-icon-button',\n            props: {\n              name: 'trash'\n            }\n          },\n          edit: {\n            onClick: this.onClickEdit,\n            props: {\n              name: 'pencil-fill'\n            }\n          }\n        }\n      }];\n      return headers;\n    }\n  },\n  methods: {\n    onClickAdd() {\n      navigate('/time/addCustomer');\n    },\n    onClickEdit(item) {\n      navigate('/time/addCustomer/{id}', {\n        id: item.id\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      const isSelectable = this.unselectableIds.findIndex(id => id == item.id);\n      if (isSelectable > -1) {\n        return this.$toast.error({\n          title: this.$t('general.error'),\n          message: this.$t('time.not_allowed_to_delete_customer_who_have_time_logged_against')\n        });\n      }\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { digitsOnlyWithDecimalPoint, maxCurrency, required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { OxdSwitchInput } from '@ohrm/oxd';\nconst salComponentModel = {\n  name: '',\n  salaryAmount: '',\n  comment: '',\n  payGradeId: null,\n  payFrequencyId: null,\n  currencyId: null\n};\nconst directDepositModel = {\n  directDepositAccount: '',\n  directDepositAccountType: null,\n  directDepositRoutingNumber: '',\n  directDepositAmount: ''\n};\nexport default {\n  name: 'EditSalaryComponent',\n  components: {\n    'oxd-switch-input': OxdSwitchInput\n  },\n  props: {\n    http: {\n      type: Object,\n      required: true\n    },\n    data: {\n      type: Object,\n      required: true\n    },\n    paygrades: {\n      type: Array,\n      default: () => []\n    },\n    payFrequencies: {\n      type: Array,\n      default: () => []\n    },\n    currencies: {\n      type: Array,\n      default: () => []\n    },\n    accountTypes: {\n      type: Array,\n      default: () => []\n    }\n  },\n  emits: ['close'],\n  data() {\n    return {\n      isLoading: false,\n      includeDirectDeposit: false,\n      salaryComponent: {\n        ...salComponentModel\n      },\n      directDeposit: {\n        ...directDepositModel\n      },\n      accountType: '',\n      usableCurrencies: [],\n      rules: {\n        name: [required, shouldNotExceedCharLength(100)],\n        salaryAmount: [required, digitsOnlyWithDecimalPoint, maxCurrency(1000000000)],\n        comment: [shouldNotExceedCharLength(250)],\n        currencyId: [required],\n        directDepositAccount: [required, shouldNotExceedCharLength(100)],\n        directDepositAccountType: [required],\n        accountType: [required, shouldNotExceedCharLength(20)],\n        directDepositRoutingNumber: [required, shouldNotExceedCharLength(9), digitsOnlyWithDecimalPoint],\n        directDepositAmount: [required, digitsOnlyWithDecimalPoint, maxCurrency(1000000000)]\n      }\n    };\n  },\n  computed: {\n    showOptionalAccountType() {\n      return this.directDeposit.directDepositAccountType?.id == 'OTHER';\n    },\n    minAmount() {\n      return this.currencyInfo?.minAmount;\n    },\n    maxAmount() {\n      return this.currencyInfo?.maxAmount;\n    },\n    currenciesOpts() {\n      const paygrade = this.salaryComponent.payGradeId?.id;\n      if (!paygrade) {\n        return this.currencies;\n      } else if (paygrade && this.usableCurrencies.length > 0) {\n        return this.currencies.filter(item => this.usableCurrencies.findIndex(currency => currency.id === item.id) > -1);\n      } else {\n        return [];\n      }\n    },\n    currencyInfo() {\n      return this.usableCurrencies.find(item => item.id === this.salaryComponent.currencyId?.id);\n    }\n  },\n  watch: {\n    'salaryComponent.payGradeId': function (newVal) {\n      if (newVal?.id) {\n        this.isLoading = true;\n        this.http.request({\n          url: `/api/v2/admin/pay-grades/${newVal.id}/currencies`,\n          method: 'GET',\n          params: {\n            limit: 0\n          }\n        }).then(response => {\n          const {\n            data\n          } = response.data;\n          this.usableCurrencies = data.map(item => {\n            return {\n              id: item.currencyType.id,\n              name: item.currencyType.name,\n              minAmount: item.minSalary,\n              maxAmount: item.maxSalary\n            };\n          });\n          const currency = this.salaryComponent.currencyId;\n          const currencyIndex = this.usableCurrencies.findIndex(item => item.id === currency?.id);\n          this.salaryComponent.currencyId = currencyIndex === -1 ? [] : this.salaryComponent.currencyId;\n        }).then(() => {\n          this.isLoading = false;\n        });\n      } else {\n        this.usableCurrencies = [];\n      }\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.rules.salaryAmount.push(v => {\n        const min = this.minAmount ? this.minAmount : 0;\n        return v >= min || this.$t('pim.should_be_within_min_max_values');\n      });\n      this.rules.salaryAmount.push(v => {\n        const max = this.maxAmount ? this.maxAmount : 999999999;\n        return v <= max || this.$t('pim.should_be_within_min_max_values');\n      });\n    });\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.data.id).then(response => {\n      const {\n        data\n      } = response.data;\n      this.salaryComponent.name = data.salaryName;\n      this.salaryComponent.salaryAmount = data.amount;\n      this.salaryComponent.comment = data.comment ? data.comment : '';\n      this.salaryComponent.payGradeId = this.paygrades.find(item => item.id === data.payGrade?.id);\n      this.salaryComponent.payFrequencyId = this.payFrequencies.find(item => item.id === data.payPeriod?.id);\n      this.salaryComponent.currencyId = this.currencies.find(item => item.id === data.currencyType?.id);\n      if (data.directDebit.id !== null) {\n        this.includeDirectDeposit = true;\n        this.directDeposit.directDepositAccount = data.directDebit.account;\n        const accountType = this.accountTypes.find(item => item.id === data.directDebit.accountType);\n        this.directDeposit.directDepositAccountType = accountType ? accountType : {\n          id: 'OTHER',\n          label: this.$t('pim.other')\n        };\n        this.accountType = accountType.length === 0 ? data.directDebit.accountType : '';\n        this.directDeposit.directDepositRoutingNumber = data.directDebit.routingNumber;\n        this.directDeposit.directDepositAmount = data.directDebit.amount;\n      }\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      const accountType = this.showOptionalAccountType ? this.accountType : this.directDeposit.directDepositAccountType?.id;\n      this.http.update(this.data.id, {\n        // Paygrade fields\n        salaryComponent: this.salaryComponent.name,\n        salaryAmount: this.salaryComponent.salaryAmount,\n        payGradeId: this.salaryComponent.payGradeId?.id,\n        currencyId: this.salaryComponent.currencyId?.id,\n        payFrequencyId: this.salaryComponent.payFrequencyId?.id,\n        comment: this.salaryComponent.comment ? this.salaryComponent.comment : null,\n        addDirectDeposit: this.includeDirectDeposit,\n        // Directdeposi fields\n        directDepositAccount: this.includeDirectDeposit ? this.directDeposit.directDepositAccount : undefined,\n        directDepositAccountType: this.includeDirectDeposit ? accountType : undefined,\n        directDepositAmount: this.includeDirectDeposit ? this.directDeposit.directDepositAmount : undefined,\n        directDepositRoutingNumber: this.includeDirectDeposit ? this.directDeposit.directDepositRoutingNumber : undefined\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { computed, ref } from 'vue';\nimport { navigate } from '@/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport { formatDate, parseDate } from '@ohrm/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useLocale from '@/core/util/composable/useLocale';\nimport usei18n from '@/core/util/composable/usei18n';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport IncludeEmployeeDropdown from '@/core/components/dropdown/IncludeEmployeeDropdown';\nimport { validSelection } from '@/core/util/validation/rules';\nconst defaultFilters = {\n  empName: null,\n  includeEmployees: {\n    id: 1,\n    param: 'onlyCurrent',\n    label: 'Current Employees Only'\n  }\n};\nconst defaultSortOrder = {\n  'employee.lastName': 'DEFAULT',\n  'tracker.trackerName': 'DEFAULT',\n  'tracker.modifiedDate': 'DESC',\n  'tracker.addedDate': 'DEFAULT'\n};\nexport default {\n  components: {\n    'include-employee-dropdown': IncludeEmployeeDropdown,\n    'employee-autocomplete': EmployeeAutocomplete\n  },\n  setup() {\n    const {\n      $t\n    } = usei18n();\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const employeeTrackerNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          title: item.title,\n          empName: `${item.employee?.firstName} ${item.employee?.lastName} ${item.employee?.terminationId ? ` ${$t('general.past_employee')}` : ''}`,\n          modifiedDate: formatDate(parseDate(item.modifiedDate), jsDateFormat, {\n            locale\n          }),\n          addedDate: formatDate(parseDate(item.addedDate), jsDateFormat, {\n            locale\n          })\n        };\n      });\n    };\n    const filters = ref({\n      ...defaultFilters\n    });\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilter = computed(() => {\n      return {\n        sortField: sortField.value,\n        sortOrder: sortOrder.value,\n        empNumber: filters.value.empName?.id,\n        includeEmployees: filters.value.includeEmployees?.param\n      };\n    });\n    const api = '/api/v2/performance/employees/trackers';\n    const http = new APIService(window.appGlobal.baseUrl, api);\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      isLoading,\n      response,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilter,\n      normalizer: employeeTrackerNormalizer\n    });\n    onSort(execQuery);\n    return {\n      total,\n      showPaginator,\n      currentPage,\n      pages,\n      pageSize,\n      isLoading,\n      items: response,\n      api,\n      http,\n      execQuery,\n      sortDefinition,\n      filters\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'empName',\n        slot: 'title',\n        title: this.$t('general.employee_name'),\n        sortField: 'employee.lastName',\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'title',\n        title: this.$t('general.trackers'),\n        sortField: 'tracker.trackerName',\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'addedDate',\n        title: this.$t('performance.added_date'),\n        sortField: 'tracker.addedDate',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'modifiedDate',\n        title: this.$t('performance.modified_date'),\n        sortField: 'tracker.modifiedDate',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'actions',\n        title: this.$t('general.actions'),\n        slot: 'action',\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          view: {\n            onClick: this.onClickView,\n            component: 'oxd-button',\n            props: {\n              name: 'view',\n              label: this.$t('general.view'),\n              class: 'orangehrm-left-space',\n              displayType: 'text'\n            }\n          }\n        }\n      }],\n      rules: {\n        employee: [validSelection]\n      }\n    };\n  },\n  methods: {\n    async resetDataTable() {\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onClickView(item) {\n      navigate('/performance/addPerformanceTrackerLog/trackId/{id}', {\n        id: item.id\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
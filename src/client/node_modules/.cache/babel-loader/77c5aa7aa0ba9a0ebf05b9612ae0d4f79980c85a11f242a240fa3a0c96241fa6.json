{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { required, validSelection, validDateFormat, validTimeFormat, shouldNotExceedCharLength } from '@/core/util/validation/rules';\nimport { navigate } from '@/core/util/helper/navigation';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { APIService } from '@/core/util/services/api.service';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport CandidateActionLayout from '@/orangehrmRecruitmentPlugin/components/CandidateActionLayout.vue';\nimport InterviewerAutocomplete from '@/orangehrmRecruitmentPlugin/components/InterviewerAutocomplete.vue';\nconst actionHistoryModel = {\n  id: null,\n  action: {\n    id: null,\n    label: null\n  },\n  performedBy: {\n    empNumber: null,\n    lastName: null,\n    firstName: null,\n    middleName: null,\n    terminationId: null\n  },\n  interview: {\n    id: null\n  },\n  performedDate: null,\n  note: null\n};\nconst interviewModel = {\n  interviewName: null,\n  interviewDate: null,\n  interviewTime: null\n};\nexport default {\n  components: {\n    'candidate-action-layout': CandidateActionLayout,\n    'interviewer-autocomplete': InterviewerAutocomplete\n  },\n  props: {\n    candidateId: {\n      type: Number,\n      required: true\n    },\n    historyId: {\n      type: Number,\n      required: true\n    },\n    editable: {\n      type: Boolean,\n      required: false,\n      default: true\n    }\n  },\n  setup(props) {\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat,\n      userDateFormat\n    } = useDateFormat();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/recruitment/candidates/${props.candidateId}/history`);\n    return {\n      http,\n      locale,\n      jsDateFormat,\n      userDateFormat,\n      translateEmpName: $tEmpName\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      history: {\n        ...actionHistoryModel\n      },\n      interview: {\n        ...interviewModel\n      },\n      interviewers: [],\n      rules: {\n        interviewName: [required, shouldNotExceedCharLength(100)],\n        interviewDate: [required, validDateFormat(this.userDateFormat)],\n        interviewTime: [validTimeFormat],\n        interviewerName: [required, validSelection, value => {\n          return this.interviewers.filter(interviewer => interviewer && interviewer.id === value?.id).length < 2 ? true : this.$t('general.already_exists');\n        }],\n        note: [shouldNotExceedCharLength(2000)]\n      },\n      statuses: [{\n        id: 1,\n        label: this.$t('recruitment.application_initiated')\n      }, {\n        id: 2,\n        label: this.$t('recruitment.shortlist')\n      }, {\n        id: 3,\n        label: this.$t('general.reject')\n      }, {\n        id: 4,\n        label: this.$t('recruitment.schedule_interview')\n      }, {\n        id: 5,\n        label: this.$t('recruitment.mark_interview_passed')\n      }, {\n        id: 6,\n        label: this.$t('recruitment.mark_interview_failed')\n      }, {\n        id: 7,\n        label: this.$t('recruitment.offer_job')\n      }, {\n        id: 8,\n        label: this.$t('recruitment.decline_offer')\n      }, {\n        id: 9,\n        label: this.$t('recruitment.hire')\n      }],\n      disabled: false\n    };\n  },\n  computed: {\n    performedBy() {\n      return this.translateEmpName(this.history.performedBy, {\n        includeMiddle: true,\n        excludePastEmpTag: false\n      });\n    },\n    performedDate() {\n      return formatDate(parseDate(this.history.performedDate), this.jsDateFormat, {\n        locale: this.locale\n      });\n    },\n    performedAction() {\n      return this.statuses.find(item => item.id === this.history.action.id)?.label || null;\n    },\n    isScheduleInterview() {\n      return this.history.interview?.id && this.history.action?.id === 4;\n    }\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.historyId).then(response => {\n      const {\n        data,\n        meta\n      } = response.data;\n      this.history = {\n        ...data\n      };\n      this.disabled = meta.disabled;\n      return this.isScheduleInterview ? this.http.request({\n        method: 'GET',\n        url: `/api/v2/recruitment/candidates/${this.candidateId}/interviews/${this.history.interview.id}`\n      }) : null;\n    }).then(response => {\n      if (response) {\n        const {\n          data\n        } = response.data;\n        this.interview.interviewName = data.name;\n        this.interview.interviewDate = data.interviewDate;\n        this.interview.interviewTime = data.interviewTime;\n        this.history.note = data.note;\n        if (Array.isArray(data.interviewers)) {\n          this.interviewers = data.interviewers.map(interviewer => ({\n            id: interviewer.empNumber,\n            label: this.translateEmpName(interviewer, {\n              includeMiddle: true,\n              excludePastEmpTag: true\n            }),\n            isPastEmployee: interviewer.terminationId ? true : false\n          }));\n        }\n      }\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onAddAnother() {\n      if (this.interviewers.length < 5) {\n        this.interviewers.push(null);\n      }\n    },\n    onRemoveInterviewer(index) {\n      this.interviewers.splice(index, 1);\n    },\n    onSave() {\n      this.loading = true;\n      this.http.update(this.historyId, {\n        note: this.history.note\n      }).then(() => {\n        return this.isScheduleInterview ? this.http.request({\n          method: 'PUT',\n          url: `/api/v2/recruitment/candidates/${this.candidateId}/interviews/${this.history.interview.id}`,\n          data: {\n            ...this.interview,\n            note: this.history.note,\n            interviewerEmpNumbers: this.interviewers.map(interviewer => interviewer?.id).filter(Number)\n          }\n        }) : null;\n      }).then(() => {\n        this.loading = false;\n        this.$toast.saveSuccess();\n      });\n    },\n    onClickBack() {\n      navigate('/recruitment/addCandidate/{id}', {\n        id: this.candidateId\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { onBeforeMount, reactive, toRefs } from 'vue';\nimport { required, maxFileSize, validHexFormat, validFileTypes, imageShouldHaveDimensions } from '@ohrm/core/util/validation/rules';\nimport useForm from '@/core/util/composable/useForm';\nimport useToast from '@/core/util/composable/useToast';\nimport { APIService } from '@/core/util/services/api.service';\nimport { reloadPage } from '@ohrm/core/util/helper/navigation';\nimport FileUploadInput from '@/core/components/inputs/FileUploadInput';\nimport InlineColorInput from '@/orangehrmAdminPlugin/components/InlineColorInput';\nimport { OxdSwitchInput } from '@ohrm/oxd';\nconst colorModel = {\n  primaryColor: null,\n  primaryFontColor: null,\n  secondaryColor: null,\n  secondaryFontColor: null,\n  primaryGradientStartColor: null,\n  primaryGradientEndColor: null\n};\nconst fileUploadModel = {\n  oldAttachment: null,\n  newAttachment: null,\n  method: 'keepCurrent'\n};\nexport default {\n  components: {\n    'oxd-switch-input': OxdSwitchInput,\n    'file-upload-input': FileUploadInput,\n    'inline-color-input': InlineColorInput\n  },\n  props: {\n    allowedImageTypes: {\n      type: Array,\n      required: true\n    },\n    aspectRatios: {\n      type: Object,\n      required: true\n    },\n    aspectRatioTolerance: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/admin/theme`);\n    const {\n      saveSuccess\n    } = useToast();\n    const {\n      formRef,\n      invalid,\n      validate\n    } = useForm();\n    const state = reactive({\n      isLoading: false,\n      colors: {\n        ...colorModel\n      },\n      clientLogo: {\n        ...fileUploadModel\n      },\n      clientBanner: {\n        ...fileUploadModel\n      },\n      loginBanner: {\n        ...fileUploadModel\n      },\n      showSocialMediaImages: true\n    });\n    const rules = {\n      color: [required, validHexFormat],\n      clientLogo: [v => state.clientLogo.method === 'replaceCurrent' ? required(v) : true, maxFileSize(1024 * 1024), imageShouldHaveDimensions(props.aspectRatios.clientLogo, props.aspectRatioTolerance), validFileTypes(props.allowedImageTypes)],\n      clientBanner: [v => state.clientBanner.method === 'replaceCurrent' ? required(v) : true, maxFileSize(1024 * 1024), imageShouldHaveDimensions(props.aspectRatios.clientBanner, props.aspectRatioTolerance), validFileTypes(props.allowedImageTypes)],\n      loginBanner: [v => state.loginBanner.method === 'replaceCurrent' ? required(v) : true, maxFileSize(1024 * 1024), imageShouldHaveDimensions(props.aspectRatios.loginBanner, props.aspectRatioTolerance), validFileTypes(props.allowedImageTypes)]\n    };\n    const onFormSubmit = () => {\n      const getAttachment = fileUploadModel => {\n        if (fileUploadModel.method === null || fileUploadModel.method === 'replaceCurrent') {\n          return fileUploadModel.newAttachment;\n        }\n        return undefined;\n      };\n      state.isLoading = true;\n      http.request({\n        method: 'PUT',\n        url: '/api/v2/admin/theme',\n        data: {\n          variables: state.colors,\n          showSocialMediaImages: state.showSocialMediaImages,\n          currentClientLogo: state.clientLogo.method,\n          clientLogo: getAttachment(state.clientLogo),\n          currentClientBanner: state.clientBanner.method,\n          clientBanner: getAttachment(state.clientBanner),\n          currentLoginBanner: state.loginBanner.method,\n          loginBanner: getAttachment(state.loginBanner)\n        }\n      }).then(() => {\n        return saveSuccess();\n      }).then(() => reloadPage());\n    };\n    const onClickReset = () => {\n      state.isLoading = true;\n      http.request({\n        method: 'DELETE',\n        url: '/api/v2/admin/theme'\n      }).then(() => reloadPage());\n    };\n    const onClickPreview = () => {\n      validate().then(() => {\n        if (invalid.value === true) return;\n        state.isLoading = true;\n        http.request({\n          method: 'POST',\n          url: '/api/v2/admin/theme/preview',\n          data: {\n            ...state.colors\n          }\n        }).then(response => {\n          const {\n            data\n          } = response.data;\n          for (const key in data) {\n            const value = data[key];\n            document.documentElement.style.setProperty(key, value);\n          }\n        }).finally(() => state.isLoading = false);\n      });\n    };\n    onBeforeMount(() => {\n      state.isLoading = true;\n      http.getAll().then(response => {\n        const {\n          data\n        } = response.data;\n        const {\n          clientLogo,\n          clientBanner,\n          loginBanner,\n          showSocialMediaImages,\n          variables\n        } = data;\n        state.colors = variables;\n        if (clientLogo === null) {\n          state.clientLogo.method = null;\n        } else {\n          state.clientLogo.oldAttachment = clientLogo;\n          state.clientLogo.oldAttachment.id = 'clientLogo';\n        }\n        if (clientBanner === null) {\n          state.clientBanner.method = null;\n        } else {\n          state.clientBanner.oldAttachment = clientBanner;\n          state.clientBanner.oldAttachment.id = 'clientBanner';\n        }\n        if (loginBanner === null) {\n          state.loginBanner.method = null;\n        } else {\n          state.loginBanner.oldAttachment = loginBanner;\n          state.loginBanner.oldAttachment.id = 'loginBanner';\n        }\n        state.showSocialMediaImages = showSocialMediaImages;\n      }).finally(() => state.isLoading = false);\n    });\n    return {\n      rules,\n      formRef,\n      onFormSubmit,\n      onClickReset,\n      onClickPreview,\n      ...toRefs(state)\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
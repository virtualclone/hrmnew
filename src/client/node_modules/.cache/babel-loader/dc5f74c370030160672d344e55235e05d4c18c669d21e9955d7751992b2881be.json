{"ast":null,"code":"import { required, shouldNotExceedCharLength } from '@/core/util/validation/rules';\nimport { computed, reactive, toRefs } from 'vue';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { APIService } from '@/core/util/services/api.service';\nimport useAutoFocus from '@/core/util/composable/useAutoFocus';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport ProfileImage from '@/orangehrmBuzzPlugin/components/ProfileImage';\nimport useBuzzAPIs from '@/orangehrmBuzzPlugin/util/composable/useBuzzAPIs';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport { OxdIcon } from '@ohrm/oxd';\nexport default {\n  name: 'PostComment',\n  components: {\n    'oxd-icon': OxdIcon,\n    'profile-image': ProfileImage\n  },\n  directives: {\n    ...useAutoFocus()\n  },\n  props: {\n    postId: {\n      type: Number,\n      required: true\n    },\n    data: {\n      type: Object,\n      required: true\n    }\n  },\n  emits: ['edit', 'delete', 'like'],\n  setup(props, context) {\n    let loading = false;\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat,\n      jsTimeFormat\n    } = useDateFormat();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const rules = [required, shouldNotExceedCharLength(65530)];\n    const state = reactive({\n      edit: false,\n      comment: props.data.comment.text,\n      readMore: new String(props.data.comment.text).length < 500\n    });\n    const {\n      updatePostComment,\n      updateCommentLike\n    } = useBuzzAPIs(new APIService(window.appGlobal.baseUrl, ''));\n    const onSubmit = () => {\n      updatePostComment(props.postId, props.data.comment.id, state.comment).then(() => {\n        state.edit = false;\n        context.emit('edit', props.data.comment.id);\n      });\n    };\n    const onClickEdit = () => {\n      state.edit = true;\n    };\n    const onClickLike = () => {\n      if (loading) return;\n      loading = true;\n      updateCommentLike(props.data.comment.id, props.data.comment.liked).then(() => {\n        loading = false;\n        context.emit('like', props.data.comment.id);\n      });\n    };\n    const onClickDelete = () => {\n      context.emit('delete', props.data.comment.id);\n    };\n    const onClickReadMore = () => {\n      state.readMore = !state.readMore;\n    };\n    const onCancelComment = () => {\n      state.comment = props.data.comment.text;\n      state.edit = false;\n    };\n    const dateTime = computed(() => {\n      const {\n        createdDate,\n        createdTime\n      } = props.data.comment;\n      const utcDate = parseDate(`${createdDate} ${createdTime} +00:00`, 'yyyy-MM-dd HH:mm xxx');\n      return formatDate(utcDate, `${jsDateFormat} ${jsTimeFormat}`, {\n        locale\n      });\n    });\n    const employeeFullName = computed(() => {\n      return $tEmpName(props.data.employee, {\n        includeMiddle: true,\n        excludePastEmpTag: false\n      });\n    });\n    return {\n      rules,\n      dateTime,\n      onSubmit,\n      onClickLike,\n      onClickEdit,\n      onClickDelete,\n      onClickReadMore,\n      onCancelComment,\n      employeeFullName,\n      ...toRefs(state)\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { computed, ref } from 'vue';\nimport { required, validSelection, validDateFormat, endDateShouldBeAfterStartDate, startDateShouldBeBeforeEndDate } from '@/core/util/validation/rules';\nimport ReportsTable from '@/core/components/table/ReportsTable';\nimport ProjectAutocomplete from '@/orangehrmTimePlugin/components/ProjectAutocomplete.vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { OxdSwitchInput } from '@ohrm/oxd';\nconst defaultFilters = {\n  project: null,\n  fromDate: null,\n  toDate: null,\n  includeTimesheet: false\n};\nexport default {\n  components: {\n    'reports-table': ReportsTable,\n    'oxd-switch-input': OxdSwitchInput,\n    'project-autocomplete': ProjectAutocomplete\n  },\n  props: {\n    project: {\n      type: Object,\n      required: false,\n      default: null\n    },\n    fromDate: {\n      type: String,\n      required: false,\n      default: null\n    },\n    toDate: {\n      type: String,\n      required: false,\n      default: null\n    },\n    includeTimesheet: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const filters = ref({\n      ...defaultFilters,\n      fromDate: props.fromDate,\n      toDate: props.toDate,\n      includeTimesheet: props.includeTimesheet,\n      ...(props.project && {\n        project: props.project\n      })\n    });\n    const {\n      $t\n    } = usei18n();\n    const {\n      userDateFormat\n    } = useDateFormat();\n    const rules = {\n      project: [required, validSelection],\n      fromDate: [validDateFormat(userDateFormat), startDateShouldBeBeforeEndDate(() => filters.value.toDate, $t('general.from_date_should_be_before_to_date'), {\n        allowSameDate: true\n      })],\n      toDate: [validDateFormat(userDateFormat), endDateShouldBeAfterStartDate(() => filters.value.fromDate, $t('general.to_date_should_be_after_from_date'), {\n        allowSameDate: true\n      })]\n    };\n    const serializedFilters = computed(() => {\n      return {\n        projectId: filters.value.project?.id,\n        fromDate: filters.value.fromDate,\n        toDate: filters.value.toDate,\n        includeTimesheet: filters.value.includeTimesheet ? 'onlyApproved' : 'all'\n      };\n    });\n    return {\n      rules,\n      filters,\n      serializedFilters\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nconst languageModel = {\n  languageId: null,\n  fluencyId: null,\n  competencyId: null,\n  comment: ''\n};\nexport default {\n  name: 'SaveLanguage',\n  props: {\n    http: {\n      type: Object,\n      required: true\n    },\n    fluencies: {\n      type: Array,\n      required: true\n    },\n    competencies: {\n      type: Array,\n      required: true\n    },\n    api: {\n      type: String,\n      required: true\n    }\n  },\n  emits: ['close'],\n  data() {\n    return {\n      isLoading: false,\n      language: {\n        ...languageModel\n      },\n      languages: [],\n      rules: {\n        languageId: [required],\n        fluencyId: [required],\n        competencyId: [required],\n        comment: [shouldNotExceedCharLength(100)]\n      }\n    };\n  },\n  computed: {\n    allowedLanguages() {\n      return this.languages;\n    },\n    allowedFluencies() {\n      const languageIndex = this.languages.findIndex(item => item.id === this.language.languageId?.id);\n      if (languageIndex > -1) {\n        const selectedLanguage = this.languages[languageIndex];\n        return this.fluencies.filter(item => {\n          return selectedLanguage.allowedFluencyIds.includes(item.id);\n        });\n      }\n      return [];\n    }\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.request({\n      method: 'GET',\n      url: this.api,\n      params: {\n        limit: 0\n      }\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      if (Array.isArray(data)) {\n        this.languages = data.map(item => {\n          return {\n            id: item.id,\n            label: item.name,\n            allowedFluencyIds: item.allowedFluencyIds ? item.allowedFluencyIds : []\n          };\n        });\n      }\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        languageId: this.language.languageId?.id,\n        fluencyId: this.language.fluencyId?.id,\n        competencyId: this.language.competencyId?.id,\n        comment: this.language.comment\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { onBeforeMount, reactive, toRefs } from 'vue';\nimport { APIService } from '@/core/util/services/api.service';\nimport ProfileImage from '@/orangehrmBuzzPlugin/components/ProfileImage';\nimport useInfiniteScroll from '@/core/util/composable/useInfiniteScroll';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport { OxdDialog, OxdIcon, OxdSheet, OxdSpinner } from '@ohrm/oxd';\nexport default {\n  name: 'PostStatsModal',\n  components: {\n    'oxd-icon': OxdIcon,\n    'oxd-sheet': OxdSheet,\n    'oxd-dialog': OxdDialog,\n    'profile-image': ProfileImage,\n    'oxd-loading-spinner': OxdSpinner\n  },\n  props: {\n    postId: {\n      type: Number,\n      required: true\n    },\n    type: {\n      type: String,\n      required: true\n    },\n    icon: {\n      type: String,\n      required: true\n    },\n    mobile: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: ['close'],\n  setup(props, context) {\n    let apiPath;\n    const EMPLOYEE_LIMIT = 10;\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    switch (props.type) {\n      case 'likes':\n        apiPath = `/api/v2/buzz/shares/${props.postId}/likes`;\n        break;\n      case 'shares':\n        apiPath = `/api/v2/buzz/posts/${props.postId}/shares`;\n        break;\n      default:\n        break;\n    }\n    const http = new APIService(window.appGlobal.baseUrl, apiPath);\n    const state = reactive({\n      total: 0,\n      offset: 0,\n      users: [],\n      isLoading: false\n    });\n    const fetchData = () => {\n      state.isLoading = true;\n      http.getAll({\n        limit: EMPLOYEE_LIMIT,\n        offset: state.offset\n      }).then(response => {\n        const {\n          data,\n          meta\n        } = response.data;\n        state.total = meta?.total || 0;\n        if (Array.isArray(data)) {\n          const _data = data.map(user => {\n            const {\n              employee\n            } = user;\n            return {\n              employee,\n              fullName: $tEmpName(employee, {\n                includeMiddle: false,\n                excludePastEmpTag: false\n              })\n            };\n          });\n          state.users = [...state.users, ..._data];\n        }\n      }).finally(() => state.isLoading = false);\n    };\n    useInfiniteScroll(() => {\n      if (state.users.length >= state.total) return;\n      state.offset += EMPLOYEE_LIMIT;\n      fetchData();\n    });\n    onBeforeMount(() => fetchData());\n    const onClose = () => {\n      context.emit('close');\n    };\n    return {\n      onClose,\n      fetchData,\n      ...toRefs(state)\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { required, maxFileSize, validFileTypes, validDateFormat, validEmailFormat, validPhoneNumberFormat, shouldNotExceedCharLength } from '@/core/util/validation/rules';\nimport { urlFor } from '@ohrm/core/util/helper/url';\nimport DateInput from '@/core/components/inputs/DateInput';\nimport { APIService } from '@/core/util/services/api.service';\nimport FileUploadInput from '@/core/components/inputs/FileUploadInput';\nimport FullNameInput from '@/orangehrmPimPlugin/components/FullNameInput';\nimport VacancyDropdown from '@/orangehrmRecruitmentPlugin/components/VacancyDropdown';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport ConfirmationDialog from '@/core/components/dialogs/ConfirmationDialog';\nimport { OxdSwitchInput } from '@ohrm/oxd';\nconst CandidateProfileModel = {\n  firstName: '',\n  middleName: '',\n  lastName: '',\n  email: '',\n  contactNumber: '',\n  comment: '',\n  keywords: '',\n  dateOfApplication: null,\n  consentToKeepData: false\n};\nconst CandidateAttachmentModel = {\n  id: null,\n  oldAttachment: {},\n  newAttachment: null,\n  method: 'replaceCurrent'\n};\nconst VacancyModel = {\n  id: null,\n  label: ''\n};\nexport default {\n  name: 'CandidateProfile',\n  components: {\n    DateInput,\n    'oxd-switch-input': OxdSwitchInput,\n    'full-name-input': FullNameInput,\n    'vacancy-dropdown': VacancyDropdown,\n    'file-upload-input': FileUploadInput,\n    'confirmation-dialog': ConfirmationDialog\n  },\n  props: {\n    candidate: {\n      type: Object,\n      required: true\n    },\n    allowedFileTypes: {\n      type: Array,\n      required: true\n    },\n    maxFileSize: {\n      type: Number,\n      required: true\n    },\n    updatable: {\n      type: Boolean,\n      required: false,\n      default: true\n    }\n  },\n  emits: ['update'],\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/');\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      http,\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      editable: false,\n      isLoading: false,\n      profile: {\n        ...CandidateProfileModel\n      },\n      vacancy: {\n        ...VacancyModel\n      },\n      attachment: {\n        ...CandidateAttachmentModel\n      },\n      rules: {\n        firstName: [required, shouldNotExceedCharLength(30)],\n        lastName: [required, shouldNotExceedCharLength(30)],\n        middleName: [shouldNotExceedCharLength(30)],\n        email: [required, validEmailFormat, shouldNotExceedCharLength(50)],\n        contactNumber: [validPhoneNumberFormat, shouldNotExceedCharLength(25)],\n        keywords: [shouldNotExceedCharLength(250)],\n        applicationDate: [validDateFormat(this.userDateFormat)],\n        resume: [maxFileSize(this.maxFileSize), validFileTypes(this.allowedFileTypes)]\n      }\n    };\n  },\n  watch: {\n    candidate() {\n      this.fetchCandidate();\n    }\n  },\n  beforeMount() {\n    this.fetchCandidate();\n  },\n  methods: {\n    onSave() {\n      if (this.candidate.vacancy?.id && this.candidate.vacancy?.id !== this.vacancy?.id) {\n        this.$refs.confirmDialog.showDialog().then(confirmation => {\n          if (confirmation === 'ok') this.updateCandidate();\n        });\n      } else {\n        this.updateCandidate();\n      }\n    },\n    updateCandidate() {\n      this.isLoading = true;\n      this.http.request({\n        method: 'PUT',\n        url: `/api/v2/recruitment/candidates/${this.candidate.id}`,\n        data: {\n          ...this.profile,\n          vacancyId: this.vacancy?.id\n        }\n      }).then(() => {\n        if (this.attachment.newAttachment || this.candidate.hasAttachment) {\n          return this.http.request({\n            method: 'PUT',\n            url: `/api/v2/recruitment/candidate/${this.candidate.id}/attachment`,\n            data: {\n              currentAttachment: this.attachment.oldAttachment ? this.attachment.method : undefined,\n              attachment: this.attachment.newAttachment ? this.attachment.newAttachment : undefined\n            }\n          });\n        }\n        return true;\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.$emit('update');\n        this.isLoading = false;\n        this.editable = false;\n      });\n    },\n    getResumeUrl() {\n      return urlFor('/recruitment/viewCandidateAttachment/candidateId/{candidateId}', {\n        candidateId: this.candidate.id\n      });\n    },\n    fetchCandidate() {\n      this.isLoading = true;\n      this.profile.firstName = this.candidate.firstName;\n      this.profile.middleName = this.candidate.middleName;\n      this.profile.lastName = this.candidate.lastName;\n      this.profile.email = this.candidate.email;\n      this.profile.contactNumber = this.candidate.contactNumber;\n      this.profile.keywords = this.candidate.keywords;\n      this.profile.dateOfApplication = this.candidate.dateOfApplication;\n      this.profile.comment = this.candidate.comment;\n      this.profile.consentToKeepData = this.candidate.consentToKeepData;\n      const {\n        vacancy\n      } = this.candidate;\n      if (vacancy) {\n        this.vacancy = {\n          id: vacancy.id,\n          label: vacancy.status === false ? vacancy.name + ` (${this.$t('general.closed')})` : vacancy.name\n        };\n      }\n      if (this.candidate.hasAttachment) {\n        this.http.request({\n          method: 'GET',\n          url: `/api/v2/recruitment/candidate/${this.candidate.id}/attachment`\n        }).then(({\n          data: {\n            data\n          }\n        }) => {\n          this.attachment.id = data.id;\n          this.attachment.newAttachment = null;\n          this.attachment.oldAttachment = {\n            id: data.id,\n            filename: data.attachment.fileName,\n            fileType: data.attachment.fileType,\n            fileSize: data.attachment.fileSize\n          };\n          this.attachment.method = 'keepCurrent';\n        });\n      } else {\n        this.attachment = {\n          ...CandidateAttachmentModel\n        };\n      }\n      this.isLoading = false;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
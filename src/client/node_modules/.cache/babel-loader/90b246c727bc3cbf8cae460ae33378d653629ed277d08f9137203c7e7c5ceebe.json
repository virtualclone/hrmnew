{"ast":null,"code":"import { computed, ref } from 'vue';\nimport { required, validDateFormat } from '@/core/util/validation/rules';\nimport { navigate } from '@/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport { freshDate, formatDate } from '@ohrm/core/util/helper/datefns';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport { yearRange } from '@/core/util/helper/year-range';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nexport default {\n  components: {\n    'employee-autocomplete': EmployeeAutocomplete\n  },\n  props: {\n    date: {\n      type: String,\n      default: null\n    }\n  },\n  setup(props) {\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const {\n      userDateFormat\n    } = useDateFormat();\n    const rules = {\n      date: [required, validDateFormat(userDateFormat)]\n    };\n    const filters = ref({\n      date: props.date ? props.date : formatDate(freshDate(), 'yyyy-MM-dd'),\n      employee: null\n    });\n    const serializedFilters = computed(() => {\n      return {\n        date: filters.value.date,\n        empNumber: filters.value.employee?.id\n      };\n    });\n    const attendanceRecordNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.empNumber,\n          empName: $tEmpName(item, {\n            includeMiddle: false,\n            excludePastEmpTag: false\n          }),\n          duration: item.sum?.label\n        };\n      });\n    };\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/attendance/employees/summary');\n    const {\n      total,\n      pages,\n      response,\n      isLoading,\n      execQuery,\n      currentPage,\n      showPaginator\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: attendanceRecordNormalizer\n    });\n    return {\n      http,\n      rules,\n      total,\n      pages,\n      filters,\n      isLoading,\n      execQuery,\n      currentPage,\n      showPaginator,\n      items: response\n    };\n  },\n  data() {\n    return {\n      yearArray: [...yearRange()],\n      headers: [{\n        name: 'empName',\n        slot: 'title',\n        title: this.$t('general.employee_name'),\n        style: {\n          flex: '40%'\n        }\n      }, {\n        name: 'duration',\n        title: this.$t('time.total_duration'),\n        style: {\n          flex: '40%'\n        }\n      }, {\n        name: 'actions',\n        slot: 'footer',\n        title: this.$t('general.actions'),\n        style: {\n          flex: '20%'\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          view: {\n            onClick: this.onClickView,\n            component: 'oxd-button',\n            props: {\n              label: this.$t('general.view'),\n              displayType: 'text',\n              size: 'medium'\n            }\n          }\n        }\n      }]\n    };\n  },\n  methods: {\n    async resetDataTable() {\n      await this.execQuery();\n    },\n    async filterItems() {\n      if (this.filters.employee && this.filters.date) {\n        return navigate('/attendance/viewAttendanceRecord', undefined, {\n          employeeId: this.filters.employee.id,\n          date: this.filters.date\n        });\n      }\n      await this.execQuery();\n    },\n    onClickView(item) {\n      navigate('/attendance/viewAttendanceRecord', undefined, {\n        employeeId: item.id,\n        date: this.filters.date\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
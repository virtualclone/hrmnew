{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport { convertFilesizeToString } from '@ohrm/core/util/helper/filesize';\nimport SaveAttachment from '@/orangehrmPimPlugin/components/SaveAttachment';\nimport EditAttachment from '@/orangehrmPimPlugin/components/EditAttachment';\nimport ProfileActionHeader from '@/orangehrmPimPlugin/components/ProfileActionHeader';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog.vue';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { parseDate, formatDate } from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\nexport default {\n  name: 'ProfileAttachments',\n  components: {\n    'save-attachment': SaveAttachment,\n    'edit-attachment': EditAttachment,\n    'profile-action-header': ProfileActionHeader,\n    'delete-confirmation': DeleteConfirmationDialog\n  },\n  props: {\n    employeeId: {\n      type: String,\n      required: true\n    },\n    allowedFileTypes: {\n      type: Array,\n      required: true\n    },\n    maxFileSize: {\n      type: Number,\n      required: true\n    },\n    screen: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/pim/employees/${props.employeeId}/screen/${props.screen}/attachments`);\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const attachmentDataNormalizer = data => {\n      return data.map(item => {\n        return {\n          ...item,\n          attachedDate: formatDate(parseDate(item.attachedDate), jsDateFormat, {\n            locale\n          }),\n          size: convertFilesizeToString(item.size, 2)\n        };\n      });\n    };\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      normalizer: attachmentDataNormalizer,\n      toastNoRecords: false\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'filename',\n        slot: 'title',\n        title: this.$t('general.file_name'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'description',\n        title: this.$t('general.description'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'size',\n        title: this.$t('general.size'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'fileType',\n        title: this.$t('general.type'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'attachedDate',\n        title: this.$t('pim.date_added'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'attachedByName',\n        title: this.$t('pim.added_by'),\n        style: {\n          flex: 1\n        }\n      }],\n      checkedItems: [],\n      showSaveModal: false,\n      showEditModal: false,\n      editModalState: null\n    };\n  },\n  computed: {\n    tableHeaders() {\n      const headerActions = {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {}\n      };\n      if (this.$can.update(`${this.screen}_attachment`)) {\n        headerActions.cellConfig.edit = {\n          onClick: this.onClickEdit,\n          props: {\n            name: 'pencil-fill'\n          }\n        };\n      }\n      if (this.$can.delete(`${this.screen}_attachment`)) {\n        headerActions.cellConfig.delete = {\n          onClick: this.onClickDelete,\n          component: 'oxd-icon-button',\n          props: {\n            name: 'trash'\n          }\n        };\n      }\n      if (this.$can.read(`${this.screen}_attachment`)) {\n        headerActions.cellConfig.download = {\n          onClick: this.onClickDownload,\n          props: {\n            name: 'download'\n          }\n        };\n      }\n      return Object.keys(headerActions.cellConfig).length > 0 ? this.headers.concat([headerActions]) : this.headers;\n    }\n  },\n  methods: {\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    onClickAdd() {\n      this.showEditModal = false;\n      this.editModalState = null;\n      this.showSaveModal = true;\n    },\n    onClickEdit(item) {\n      this.showSaveModal = false;\n      this.editModalState = item;\n      this.showEditModal = true;\n    },\n    onClickDownload(item) {\n      const downUrl = `${window.appGlobal.baseUrl}/pim/viewAttachment/empNumber/${this.employeeId}/attachId/${item.id}`;\n      window.open(downUrl, '_blank');\n    },\n    onSaveModalClose() {\n      this.showSaveModal = false;\n      this.resetDataTable();\n    },\n    onEditModalClose() {\n      this.showEditModal = false;\n      this.editModalState = null;\n      this.resetDataTable();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport ReportCriterion from '@/orangehrmPimPlugin/components/ReportCriterion';\nimport ReportDisplayField from '@/orangehrmPimPlugin/components/ReportDisplayField';\nimport useEmployeeReport from '@/orangehrmPimPlugin/util/composable/useEmployeeReport';\nexport default {\n  components: {\n    'report-criterion': ReportCriterion,\n    'report-display-field': ReportDisplayField\n  },\n  props: {\n    selectionCriteria: {\n      type: Array,\n      required: true\n    },\n    displayFieldGroups: {\n      type: Array,\n      required: true\n    },\n    displayFields: {\n      type: Array,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/pim/reports/defined');\n    const {\n      report,\n      addCriterion,\n      serializeBody,\n      addDisplayField,\n      removeCriterion,\n      removeDisplayField,\n      removeDisplayFieldGroup,\n      availableCriteria,\n      availableFieldGroups,\n      availableDisplyFields\n    } = useEmployeeReport(props.selectionCriteria, props.displayFields, props.displayFieldGroups);\n    return {\n      http,\n      report,\n      addCriterion,\n      serializeBody,\n      addDisplayField,\n      removeCriterion,\n      removeDisplayField,\n      removeDisplayFieldGroup,\n      availableCriteria,\n      availableFieldGroups,\n      availableDisplyFields\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      rules: {\n        name: [required, shouldNotExceedCharLength(250)],\n        includeEmployees: [required]\n      },\n      includeOpts: [{\n        id: 1,\n        key: 'onlyCurrent',\n        label: this.$t('general.current_employees_only')\n      }, {\n        id: 2,\n        key: 'currentAndPast',\n        label: this.$t('general.current_and_past_employees')\n      }, {\n        id: 3,\n        key: 'onlyPast',\n        label: this.$t('general.past_employees_only')\n      }]\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.getAll({\n      limit: 0\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.rules.name.push(v => {\n        const index = data.findIndex(item => item.name == v);\n        return index === -1 || this.$t('general.already_exists');\n      });\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      navigate('/pim/viewDefinedPredefinedReports');\n    },\n    onSave() {\n      if (Object.keys(this.report.displayFieldSelected).length === 0) {\n        return this.$toast.warn({\n          title: this.$t('general.warning'),\n          message: this.$t('pim.at_least_one_display_field_should_be_added')\n        });\n      }\n      this.isLoading = true;\n      let reportId = null;\n      const payload = this.serializeBody(this.report);\n      this.http.create(payload).then(response => {\n        const {\n          data\n        } = response.data;\n        reportId = data.id;\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        reportId && navigate('/pim/displayPredefinedReport/{id}', {\n          id: reportId\n        });\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
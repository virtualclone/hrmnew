{"ast":null,"code":"import usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport { APIService } from '@/core/util/services/api.service';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\nexport default {\n  name: 'TimesheetActions',\n  props: {\n    timesheetId: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/time/timesheets/${props.timesheetId}/action-logs`);\n    const {\n      $t\n    } = usei18n();\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const actionsNormalizer = data => {\n      return data.map(item => {\n        let performedEmployee;\n        let actionName = item.action?.label;\n        const firstName = item.performedEmployee?.firstName;\n        const lastName = item.performedEmployee?.lastName;\n        switch (actionName) {\n          case 'Submitted':\n            actionName = $t('time.submitted');\n            break;\n          case 'Rejected':\n            actionName = $t('leave.rejected');\n            break;\n          case 'Not Submitted':\n            actionName = $t('time.not_submitted');\n            break;\n          case 'Approved':\n            actionName = $t('time.approved');\n            break;\n        }\n        if (firstName && lastName) {\n          performedEmployee = `${firstName} ${lastName}`;\n        } else {\n          performedEmployee = $t('general.purged_employee');\n        }\n        if (item.performedEmployee?.terminationId) {\n          performedEmployee += ` (${$t('general.past_employee')})`;\n        }\n        return {\n          id: item.id,\n          action: actionName,\n          date: formatDate(parseDate(item.date), jsDateFormat, {\n            locale\n          }),\n          comment: item.comment,\n          performedBy: performedEmployee\n        };\n      });\n    };\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      toastNoRecords: false,\n      normalizer: actionsNormalizer\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'action',\n        slot: 'title',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'performedBy',\n        title: this.$t('general.performed_by'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'date',\n        title: this.$t('general.date'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'comment',\n        cellType: 'oxd-table-cell-truncate',\n        title: this.$t('general.comment'),\n        style: {\n          flex: 1\n        }\n      }]\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
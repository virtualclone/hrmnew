{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { required, numericOnly, validSelection, shouldNotExceedCharLength, numberShouldBeBetweenMinAndMaxValue } from '@ohrm/core/util/validation/rules';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport JobtitleDropdown from '@/orangehrmPimPlugin/components/JobtitleDropdown';\nimport VacancyLinkCard from '../components/VacancyLinkCard.vue';\nimport { OxdSwitchInput } from '@ohrm/oxd';\nconst vacancyModel = {\n  jobTitle: null,\n  name: '',\n  hiringManager: null,\n  numOfPositions: '',\n  description: '',\n  status: true,\n  isPublished: true\n};\nconst basePath = `${window.location.protocol}//${window.location.host}${window.appGlobal.baseUrl}`;\nexport default {\n  components: {\n    'oxd-switch-input': OxdSwitchInput,\n    'employee-autocomplete': EmployeeAutocomplete,\n    'jobtitle-dropdown': JobtitleDropdown,\n    'vacancy-link-card': VacancyLinkCard\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/recruitment/vacancies');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      vacancy: {\n        ...vacancyModel\n      },\n      rules: {\n        jobTitle: [required],\n        name: [required, shouldNotExceedCharLength(50)],\n        hiringManager: [required, validSelection],\n        numOfPositions: [value => {\n          if (value === null || value === '') return true;\n          return typeof numericOnly(value) === 'string' ? numericOnly(value) : numberShouldBeBetweenMinAndMaxValue(1, 99)(value);\n        }],\n        description: [],\n        status: [required],\n        isPublished: [required]\n      },\n      rssFeedUrl: `${basePath}/recruitmentApply/jobs.rss`,\n      webUrl: `${basePath}/recruitmentApply/jobs.html`\n    };\n  },\n  created() {\n    this.isLoading = true;\n    this.http.getAll({\n      limit: 0\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.rules.name.push(v => {\n        const index = data.findIndex(item => item.name == v);\n        return index === -1 || this.$t('general.already_exists');\n      });\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      navigate('/recruitment/viewJobVacancy');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.vacancy = {\n        name: this.vacancy.name,\n        jobTitleId: this.vacancy.jobTitle.id,\n        employeeId: this.vacancy.hiringManager.id,\n        numOfPositions: this.vacancy.numOfPositions ? parseInt(this.vacancy.numOfPositions) : null,\n        description: this.vacancy.description,\n        status: this.vacancy.status,\n        isPublished: this.vacancy.isPublished\n      };\n      this.http.create({\n        ...this.vacancy\n      }).then(response => {\n        const {\n          data\n        } = response.data;\n        this.$toast.saveSuccess();\n        navigate('/recruitment/addJobVacancy/{id}', {\n          id: data.id\n        });\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
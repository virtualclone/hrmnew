{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed } from 'vue';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport { navigate } from '@/core/util/helper/navigation';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog.vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport ExpenseTypeAutocomplete from '@/orangehrmClaimPlugin/components/ExpenseTypeAutocomplete.vue';\nconst defaultFilters = {\n  name: '',\n  status: null\n};\nconst defaultSortOrder = {\n  'expenseType.name': 'ASC',\n  'expenseType.status': 'DESC'\n};\nexport default {\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog,\n    'expense-type-autocomplete': ExpenseTypeAutocomplete\n  },\n  setup() {\n    const filters = ref({\n      ...defaultFilters\n    });\n    const {\n      $t\n    } = usei18n();\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilters = computed(() => {\n      return {\n        expenseTypeId: typeof filters.value.name === 'object' ? filters.value.name.id : null,\n        name: typeof filters.value.name === 'string' ? filters.value.name : null,\n        status: filters.value.status ? filters.value.status?.id === 1 : null,\n        sortField: sortField.value,\n        sortOrder: sortOrder.value\n      };\n    });\n    const expenseTypeDataNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          name: item.name,\n          description: item.description,\n          status: item.status ? $t('general.active') : $t('performance.inactive')\n        };\n      });\n    };\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/claim/expenses/types');\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      normalizer: expenseTypeDataNormalizer,\n      query: serializedFilters\n    });\n    onSort(execQuery);\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      response,\n      filters,\n      sortDefinition\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'name',\n        title: this.$t('general.name'),\n        slot: 'title',\n        sortField: 'expenseType.name',\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'status',\n        title: this.$t('general.status'),\n        sortField: 'expenseType.status',\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'actions',\n        title: this.$t('general.actions'),\n        slot: 'action',\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          delete: {\n            onClick: this.onClickDelete,\n            component: 'oxd-icon-button',\n            props: {\n              name: 'trash'\n            }\n          },\n          edit: {\n            onClick: this.onClickEdit,\n            props: {\n              name: 'pencil-fill'\n            }\n          }\n        }\n      }],\n      checkedItems: [],\n      ExpenseTypeStatuses: [{\n        id: 1,\n        label: this.$t('general.active')\n      }, {\n        id: 0,\n        label: this.$t('performance.inactive')\n      }]\n    };\n  },\n  methods: {\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onClickReset() {\n      this.filters = {\n        ...defaultFilters\n      };\n      this.filterItems();\n    },\n    onClickAdd() {\n      navigate('/claim/saveExpense');\n    },\n    onClickDeleteSelected() {\n      const ids = [];\n      this.checkedItems.forEach(index => {\n        ids.push(this.items?.data[index].id);\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    onClickEdit(item) {\n      navigate('/claim/saveExpense/{id}', {\n        id: item.id\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { navigate } from '@/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport BaseWidget from '@/orangehrmDashboardPlugin/components/BaseWidget.vue';\nexport default {\n  name: 'QuickLaunchWidget',\n  components: {\n    'base-widget': BaseWidget\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/dashboard/shortcuts');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      quickLaunchActions: []\n    };\n  },\n  computed: {\n    isEmpty() {\n      return this.quickLaunchActions.length === 0;\n    },\n    sortedActions() {\n      return [...this.quickLaunchActions].sort((prevItem, item) => prevItem.order - item.order);\n    }\n  },\n  beforeMount() {\n    this.isLoading = true;\n    const ACTIONS = {\n      'leave.assign_leave': {\n        order: 1,\n        icon: 'leaveassign',\n        label: this.$t('leave.assign_leave'),\n        path: '/leave/assignLeave'\n      },\n      'leave.leave_list': {\n        order: 2,\n        icon: 'leavelist',\n        label: this.$t('leave.leave_list'),\n        path: '/leave/viewLeaveList'\n      },\n      'time.employee_timesheet': {\n        order: 3,\n        icon: 'timesheets',\n        label: this.$t('general.timesheets'),\n        path: '/time/viewEmployeeTimesheet'\n      },\n      'leave.apply_leave': {\n        order: 4,\n        icon: 'leaveapply',\n        label: this.$t('leave.apply_leave'),\n        path: '/leave/applyLeave'\n      },\n      'leave.my_leave': {\n        order: 5,\n        icon: 'myleaves',\n        label: this.$t('general.my_leave'),\n        path: '/leave/viewMyLeaveList'\n      },\n      'time.my_timesheet': {\n        order: 6,\n        icon: 'mytimesheet',\n        label: this.$t('time.my_timesheet'),\n        path: '/time/viewMyTimesheet'\n      }\n    };\n    this.http.getAll().then(response => {\n      const {\n        data\n      } = response.data;\n      for (const key in data) {\n        if (data[key]) {\n          this.quickLaunchActions.push(ACTIONS[key]);\n        }\n      }\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onClickAction(path) {\n      if (path) navigate(path);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
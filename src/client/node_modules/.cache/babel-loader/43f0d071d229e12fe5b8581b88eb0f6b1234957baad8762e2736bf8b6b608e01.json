{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { secondsTohhmm, parseTimeInSeconds } from '@ohrm/core/util/helper/datefns';\nimport { onBeforeMount, toRefs } from 'vue';\nimport useToast from '@/core/util/composable/useToast';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport Timesheet from '@/orangehrmTimePlugin/components/Timesheet.vue';\nimport useTimesheetAPIs from '@/orangehrmTimePlugin/util/composable/useTimesheetAPIs';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nexport default {\n  components: {\n    timesheet: Timesheet\n  },\n  props: {\n    myTimesheet: {\n      type: Boolean,\n      default: false\n    },\n    timesheetId: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/time/timesheets`);\n    http.setIgnorePath('/api/v2/time/timesheets/[0-9]+/entries');\n    let timesheetModal = [];\n    const {\n      saveSuccess\n    } = useToast();\n    const {\n      state,\n      fetchTimesheetEntries,\n      updateTimesheetEntries\n    } = useTimesheetAPIs(http);\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const loadTimesheet = () => {\n      state.isLoading = true;\n      timesheetModal = [];\n      state.timesheetRecords = [];\n      fetchTimesheetEntries(props.timesheetId, !props.myTimesheet).then(response => {\n        const {\n          data,\n          meta,\n          timesheet,\n          allowedActions\n        } = response;\n        state.timesheet = timesheet;\n        state.employee = meta.employee;\n        state.timesheetColumns = meta.columns;\n        state.timesheetSubtotal = meta.sum.label;\n        state.timesheetStatus = timesheet.status.name;\n        state.timesheetAllowedActions = allowedActions;\n        if (data.length > 0) {\n          state.timesheetRecords = data;\n          timesheetModal = JSON.parse(JSON.stringify(data));\n        } else {\n          state.timesheetRecords.push({\n            project: null,\n            activity: null,\n            dates: {}\n          });\n          timesheetModal.push({\n            project: null,\n            activity: null,\n            dates: {}\n          });\n        }\n        state.isLoading = false;\n      });\n    };\n    const onClickReset = () => loadTimesheet();\n    const onClickCancel = () => {\n      if (props.myTimesheet) {\n        navigate('/time/viewMyTimesheet', {}, {\n          startDate: state.timesheet.startDate\n        });\n      } else {\n        navigate('/time/viewTimesheet/employeeId/{id}', {\n          id: state.employee?.empNumber\n        }, {\n          startDate: state.timesheet.startDate\n        });\n      }\n    };\n    const onSave = () => {\n      state.isLoading = true;\n      const payload = {\n        entries: state.timesheetRecords.map(record => {\n          const dates = {};\n          for (const date in record.dates) {\n            const _duration = parseTimeInSeconds(record.dates[date].duration);\n            dates[date] = {\n              duration: _duration > 0 ? secondsTohhmm(_duration) : '00:00'\n            };\n          }\n          return {\n            projectId: record.project.id,\n            activityId: record.activity.id,\n            dates\n          };\n        }),\n        deletedEntries: timesheetModal.filter(record => {\n          if (!record.project) return false;\n          return state.timesheetRecords.findIndex(item => item.project.id === record.project.id && item.activity.id === record.activity.id) < 0;\n        }).map(record => ({\n          projectId: record.project.id,\n          activityId: record.activity.id\n        }))\n      };\n      updateTimesheetEntries(props.timesheetId, payload, !props.myTimesheet).then(() => {\n        return saveSuccess();\n      }).catch(() => {\n        // Catch invalid parameter error when submitting without any time\n        return saveSuccess();\n      }).then(() => {\n        onClickCancel();\n      });\n    };\n    onBeforeMount(() => loadTimesheet());\n    return {\n      onSave,\n      onClickReset,\n      onClickCancel,\n      ...toRefs(state),\n      jsDateFormat,\n      locale,\n      translateEmpName: $tEmpName\n    };\n  },\n  computed: {\n    title() {\n      if (this.myTimesheet) {\n        return this.$t('time.edit_timesheet');\n      } else if (this.employee) {\n        const empName = this.translateEmpName(this.employee, {\n          includeMiddle: false,\n          excludePastEmpTag: false\n        });\n        return `${this.$t('time.edit_timesheet_for')} ${empName}`;\n      }\n      return '';\n    },\n    timesheetDateRange() {\n      if (!this.timesheet) return '';\n      const startDate = formatDate(parseDate(this.timesheet.startDate), this.jsDateFormat, {\n        locale: this.locale\n      });\n      const endDate = formatDate(parseDate(this.timesheet.endDate), this.jsDateFormat, {\n        locale: this.locale\n      });\n      return `${startDate} - ${endDate}`;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { computed, ref } from 'vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport { validSelection } from '@/core/util/validation/rules';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport ProjectAutocomplete from '@/orangehrmTimePlugin/components/ProjectAutocomplete.vue';\nimport CustomerAutocomplete from '@/orangehrmTimePlugin/components/CustomerAutocomplete.vue';\nimport ProjectAdminAutocomplete from '@/orangehrmTimePlugin/components/ProjectAdminAutocomplete.vue';\nimport IncludeStatusDropdown from '@/core/components/dropdown/IncludeStatusDropdown';\nimport ProjectUserAutocomplete from '@/orangehrmTimePlugin/components/ProjectUserAutocomplete.vue';\n\n// const defaultFilters = {\n//   customer: null,\n//   project: null,\n//   projectAdmin: null,\n// };\n\nconst defaultSortOrder = {\n  'project.name': 'ASC',\n  'customer.name': 'DEFAULT',\n  'employee.lastName': 'DEFAULT',\n  'customer.activestatus': 'true'\n};\nexport default {\n  components: {\n    'project-autocomplete': ProjectAutocomplete,\n    'customer-autocomplete': CustomerAutocomplete,\n    'delete-confirmation': DeleteConfirmationDialog,\n    'project-admin-autocomplete': ProjectAdminAutocomplete,\n    'include-status-dropdown': IncludeStatusDropdown,\n    'projectUser-autocomplete': ProjectUserAutocomplete\n  },\n  props: {\n    unselectableIds: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup(props) {\n    const {\n      $t\n    } = usei18n();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const projectNormalizer = data => {\n      return data.map(item => {\n        const selectable = props.unselectableIds.findIndex(id => id == item.id);\n        let status = '';\n        if (item.active == 0) {\n          status = 'No';\n        } else {\n          status = 'Yes';\n        }\n        return {\n          id: item.id,\n          project: item.name,\n          customer: item.customer?.deleted ? item.customer?.name + $t('general.deleted') : item.customer?.name,\n          projectAdmins: item.projectAdmins?.map(projectAdmin => $tEmpName(projectAdmin)).join(', '),\n          projectUsers: item.projectUsers?.map(projectUser => $tEmpName(projectUser)).join(', '),\n          status: status,\n          isSelectable: selectable === -1\n          //empName: $tEmpName(item.employee, {includeMiddle: false}),\n        };\n      });\n    };\n\n    const filters = ref({\n      customer: null,\n      project: null,\n      projectAdmin: null,\n      projectUser: null,\n      active: {\n        id: 1,\n        param: 'Active',\n        label: 'Active'\n      }\n    });\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilters = computed(() => {\n      return {\n        customerId: filters.value.customer?.id,\n        projectId: filters.value.project?.id,\n        empNumber: filters.value.projectAdmin?.id,\n        userNumber: filters.value.projectUser?.id,\n        status: filters.value.active?.param,\n        sortField: sortField.value,\n        sortOrder: sortOrder.value,\n        model: 'detailed'\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/time/projects');\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: projectNormalizer\n    });\n    onSort(execQuery);\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      filters,\n      sortDefinition\n    };\n  },\n  data() {\n    return {\n      projectStatuses: [{\n        id: 1,\n        label: this.$t('Active')\n      }, {\n        id: 2,\n        label: this.$t('InActive')\n      }, {\n        id: 3,\n        label: this.$t('All')\n      }],\n      checkedItems: [],\n      rules: {\n        project: [validSelection],\n        customer: [validSelection],\n        projectAdmin: [validSelection],\n        projectAdmin: [validSelection]\n      }\n    };\n  },\n  computed: {\n    headers() {\n      const headers = [{\n        name: 'customer',\n        title: this.$t('time.customer_name'),\n        sortField: 'customer.name',\n        style: {\n          flex: '15%'\n        }\n      }, {\n        name: 'project',\n        slot: 'title',\n        title: this.$t('time.project'),\n        sortField: 'project.name',\n        style: {\n          flex: '15%'\n        }\n      }, {\n        name: 'projectAdmins',\n        title: this.$t('time.project_admins'),\n        style: {\n          flex: '20%'\n        }\n      }, {\n        name: 'projectUsers',\n        title: this.$t('Project Users'),\n        style: {\n          flex: '20%'\n        }\n      }, {\n        name: 'status',\n        title: this.$t('Active'),\n        style: {\n          flex: 2\n        }\n      }];\n      const headerActions = {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {}\n      };\n      if (this.$can.delete(`time_projects`)) {\n        headerActions.cellConfig.delete = {\n          onClick: this.onClickDelete,\n          props: {\n            name: 'trash'\n          }\n        };\n      }\n      if (this.$can.update(`time_project_activities`)) {\n        headerActions.cellConfig.edit = {\n          onClick: this.onClickEdit,\n          props: {\n            name: 'pencil-fill'\n          }\n        };\n      }\n      if (Object.keys(headerActions.cellConfig).length > 0) {\n        headers.push(headerActions);\n      }\n      return headers;\n    }\n  },\n  methods: {\n    onClickAdd() {\n      navigate('/time/saveProject');\n    },\n    onClickEdit(item) {\n      navigate('/time/saveProject/{id}', {\n        id: item.id\n      });\n    },\n    onClickDelete(item) {\n      const isSelectable = this.unselectableIds.findIndex(id => id == item.id);\n      if (isSelectable > -1) {\n        return this.$toast.error({\n          title: this.$t('general.error'),\n          message: this.$t('time.not_allowed_to_delete_projects_which_have_time_logged')\n        });\n      }\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteData([item.id]);\n        }\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteData(ids);\n        }\n      });\n    },\n    async deleteData(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
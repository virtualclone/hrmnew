{"ast":null,"code":"import { validDateFormat, shouldNotExceedCharLength, endDateShouldBeAfterStartDate } from '@ohrm/core/util/validation/rules';\nimport { yearRange } from '@ohrm/core/util/helper/year-range';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nconst licenseModel = {\n  name: '',\n  licenseNo: '',\n  issuedDate: '',\n  expiryDate: ''\n};\nexport default {\n  name: 'EditLicense',\n  props: {\n    http: {\n      type: Object,\n      required: true\n    },\n    data: {\n      type: Object,\n      required: true\n    }\n  },\n  emits: ['close'],\n  setup() {\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      license: {\n        ...licenseModel\n      },\n      yearArray: [...yearRange()],\n      rules: {\n        licenseNo: [shouldNotExceedCharLength(50)],\n        issuedDate: [validDateFormat(this.userDateFormat)],\n        expiryDate: [validDateFormat(this.userDateFormat), endDateShouldBeAfterStartDate(() => this.license.issuedDate, this.$t('pim.expiry_date_should_be_after_issued_date'))]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.data.id).then(response => {\n      const {\n        data\n      } = response.data;\n      this.license.name = data.license.name;\n      this.license.licenseNo = data.licenseNo ? data.licenseNo : '';\n      this.license.issuedDate = data.issuedDate;\n      this.license.expiryDate = data.expiryDate;\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.data.id, {\n        licenseNo: this.license.licenseNo,\n        issuedDate: this.license.issuedDate,\n        expiryDate: this.license.expiryDate\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}